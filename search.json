[
  {
    "objectID": "setup/wsl_users.html",
    "href": "setup/wsl_users.html",
    "title": "Linux Users in WSL",
    "section": "",
    "text": "Some students may either a) run into problems that require a Linux user to correct; or b) wish to go further with WSL and Linux. You do not (normally) need this to run Podman or Docker.\n\n\n\n\n\n\nCreating a Linux User\n\n\n\nIf you want to install a full Linux distribution (e.g. because you want to do more than just run Docker) then make sure you set up a new Linux user and do not end up running everything as root.\n\n\nTo make full use of WSL2 and Linux (if you want to do more than just use Docker) you will need to familiarise yourself with how having two operating systems that can talk to each other works. That is covered in the next section. This will actually be useful for understanding how Docker works, as it can be profoundly confusing.\nThe behaviour of the ‘shell’ (command line) is quite confusing because, with WSL2, you effectively end up with two ‘home’ directories: one for your Windows user, and one for your new Ubuntu user. Starting a Linux shell/command line puts you in your Linux home directory (the username may be completely different from your Windows username). Starting a Windows shell/command line puts you in your Windows home directory (again, the username may be completely different from your Linux username).\nSo the first, and perhaps most important, thing is understanding where ‘data’ is being stored:\n\nUnder Linux the user directory is apparently something like: \\\\wsl$\\&lt;DistroName&gt;\\home\\&lt;UserName&gt;\\ but you can usually get it by simply typing cd $HOME and then pwd when starting a new Linux shell.\nUnder Windows the user directory is: C:\\Users\\&lt;UserName&gt;\\ or /mnt/c/Users/&lt;UserName&gt;/, and you can often simply type pwd when opening a new Windows shell.\n\nSo these are different locations on your computer’s hard drive, and you will not see your Linux files in your Windows Home Directory and vice versa. To make it easy to switch between the two, I found this page on Microsoft’s web site that goes through some of the post-WSL2 installation steps, but see especially the additional page on Windows Terminal configuration.\nSlightly confusingly, you can run Linux commands directly from Windows, usually be adding wsl in front of the Linux command (e.g. wsl ls *.csv from Windows, where in Linux the command would be ls *.csv).\nTo make it easy to move from the Linux side of your machine to the Windows machine you can also do this:\n\nWork out where your CASA files are stored on the Windows side (see above: /mnt/c/Users/&lt;UserName&gt;/My\\ Documents/CASA/... where &lt;UserName&gt; is your Windows user name).\ncd to this location and type pwd to output the full path to the CASA directory.\nCopy this.\nNow start a Linux shell and run the following command once (you do not need to do it ever again): echo \"export WIN_HOME=\\\"/mnt/c/Users/.../CASA/\\\"\" &gt;&gt; $HOME/.bashrc. Replace the ... with the rest of the actual path! The \\\" is very important, don’t try to change those!\nNow run source .bashrc and you should see no errors.\n\nOnce you have done this you will have added a single line to your .bashrc file in Linux. This will create a ‘shortcut’ for bash in Linux. From here on out you should be able to type cd $WIN_HOME and move immediately over to the CASA directory on the Windows side. This will save having to remember (and type) the Windows path each time."
  },
  {
    "objectID": "setup/problems.html",
    "href": "setup/problems.html",
    "title": "Dealing with Problems",
    "section": "",
    "text": "There are two types of problems that you’re likely to encounter when trying to use Podman or Docker:\nThe vast majority of people encountering these issues will be on Windows machines."
  },
  {
    "objectID": "setup/problems.html#errors-installing",
    "href": "setup/problems.html#errors-installing",
    "title": "Dealing with Problems",
    "section": "Errors Installing",
    "text": "Errors Installing\n\nUnsupported Version\nThe only problem that is common to both Windows and macOS machines is the ‘unsupported version’ (or similar wording) error. This happens when you are running an older version of the Operating System that is no longer supported by the most recent installer.\nIf you are not able to update your computer’s operating system to a more recent release, then your only option is to use an older version of the application. You can find older versions of [Podman]() and Docker to install, though for very old machines this may still not resolve the ‘unsupported version’ problem.\n\n\nProblems with WSL2\nOn Windows, if you have problems that mention WSL/WSL2 (this could be errors installing or updating this system) and you are sure that you’ve installed and updated WSL, then you may need to try using ‘Hyper-V’ instead. This is a ‘second-best’ workaround that has worked for some people.\n\nEnabling Hyper-V\nMicrosoft has instructions here on how to enable Hyper-V on your Windows machine. You will need to restart your computer after enabling Hyper-V. These instructions may also help.\nYou will then need to look at the Podman or Docker settings and change the Use the WSL2 based engine to Use the Hyper-V based engine.\n\n\n\nProblems with Admin Rights\nIssues with administrator rights are the main reason that we are trying to swich from Docker to Podman. Podman does not require you to be an administrator of your machine. So if you are unable to install Docker on your computer (e.g. because you are using a secure corporate laptop), you may wish to try using Podman instead. Podman is runs in ‘user space’, which means that it does not need admin rights to run. You can find out more about Podman here. Our limited testing suggests that it works well with the sparc environment.\nYou will need to:\n\nDownload and install the Podman CLI and Desktop from here.\nRun the following command in the PowerShell or Terminal: podman machine initpodman machine start\nAnd then run this command in PowerShell or Terminal to download the sparc image with podman pull jreades/sparc:2025-amd (or jreades/sparc:2025-arm for M-chip Macs)"
  },
  {
    "objectID": "setup/problems.html#errors-running",
    "href": "setup/problems.html#errors-running",
    "title": "Dealing with Problems",
    "section": "Errors Running",
    "text": "Errors Running\nIf you have managed to install Docker (or Podman) and have managed to ‘pull’ a disk image then the last remaining obstacle to running Podman or Docker is, typically, running out of disk space.\n\nDealing with Disk Space\nSome Windows PCs (especially those sold with Windows10) have two drives (C and D). The C drive may fill up very quickly once you start installing and running software or processing data. In that case you may want to store your images on the D drive.\nThis is a complex process, and you may need assistance, so there is a Moving to the D Drive page to try to talk you through the process.\n\n\nOther Disk Space Issues\nIf you don’t have separate C and D drives but still have very little space left on your hard drive then it’s worth remembering that all of the images you’ve used and containers that you have run are saved on your computer. You can see how much space Docker (there’s a similar command for Podman) is using by running the following command in the PowerShell or Terminal:\ndocker system df\n\nDeleting an Image\nThe most ‘intuitive’ way is to delete each image by it’s unique ID:\ndocker ps -aq # Get list of running processes and work out container IDs to remove\ndocker rm -f &lt;list of container IDs&gt;\ndocker images # Get list of available images and work out image IDs to remove\ndocker rmi -f &lt;list of image IDs&gt;\n\n\nDeleting by Filter\nA more ‘direct’ approach that should be used with some care is to looking for the name of the image and delete that way:\ndocker ps -aqf \"name=sds\" --format=\"{{.Image}} {{.Names}} {{.ID}}\" | grep \"2025\" | cut -d' ' -f3 | xargs docker rm -f\ndocker images --format=\"{{.Repository}} {{.Tag}} {{.ID}}\" | grep \"sds\" | cut -d' ' -f3 | xargs docker rmi"
  },
  {
    "objectID": "setup/problems.html#the-last-resort",
    "href": "setup/problems.html#the-last-resort",
    "title": "Dealing with Problems",
    "section": "The Last Resort",
    "text": "The Last Resort\nA very small number of students are unable to run Docker or Podman at all on computers running Windows 10 Home (in 23/24 there were none), in which case Anaconda Python can be used with a configuration based on the Podman build file. We don’t recommend this as Podman and Docker isolate the programming environment from your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every Python library as the rest of the class (and the versions for which the practicals are tested).\nAnaconda is only supported as a last resort.\nHowever you are always free to install Anaconda Python and to use our YAML configuration script to install the sparc environment, but you should do this in your own time: in previous years students have encountered difficult-to-diagnose bugs in their code (and lost marks in the Assessments!) because they had installed an older or more recent version of a Python library than the one configured and tested in the sparc environment.\nWe believe that the replication advantages of virtualisation outweigh the disbenefits in terms of performance. It also means that you will spend less time installing libraries and more time running code, which is where your attention should really be when you are familiarising yourself with the foundations of data science.\nEventually you will, of course, want to install and manage your own programming environment (possibly even by building and sharing Podman/Docker images!) but this can be left for later when you have developed an appreciation of how and when virtualisation is (or is not) an appropriate solution to your needs."
  },
  {
    "objectID": "setup/markdown.html",
    "href": "setup/markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown is a ‘markup language’ for documents that is compatible with a lot of different tools (including GitHub and Jupyter) that we use day-in and day-out for doing our research and teaching. Many of us have now largely stopped using Word (and even LaTeX) except for the final polishing of a document. Why? Because Markdown is faster, simpler, and just gets out of the way when we’re writing. So rather than fiddling about with Word’s styles (or, worse, discovering that you should have been using styles all along) or with LaTeX’s painful table layout, you can just get on with writing in Markdown and then export to Word or LaTeX for the final steps. Best of both worlds!\nIn fact, Markdown is so handy that it’s become the default for writing content for the web. This web site was actually written in Markdown and then ‘rendered’ (i.e. turned into a functional web page) using Quarto. We’ve included Quarto on the SDS2022 Docker image that we’ve recommended you use."
  },
  {
    "objectID": "setup/markdown.html#markdown-editors",
    "href": "setup/markdown.html#markdown-editors",
    "title": "Markdown",
    "section": "Markdown Editors",
    "text": "Markdown Editors\nOver time you will undoubtedly learn how to write markdwon without need to think much (if at all) about how to type the formatting ‘codes’, but a simple markdown editor can make your life much, much easier. Even when you’re highly experienced!\n\nFor MacOSFor WindowsFor Linux\n\n\nThere’s a good overview of ‘free’1 editors for the Mac which highlights a few in particular:\n\nMacDown – I’ve not used this, but it seems determinedly FOSS so is probably a good choice.\nHaroopad – this looks like a more powerful, but less immediatley user-friendly editor.\nAtom – I’ve used Atom for editing Python code but believe it’s largely plugin-based so it clearly supports markdown too.\n\nTypora was free while in beta, but I thought it was worth the modest amount of money asked for something that was super-fast and gave me a tool with which to write up my research, not just my code and teaching content. iA Writer is another good (paid for) option because it runs on iPad and iPhone as well! Together with the Working Copy Git client for iOS I’ve used iA Writer to draft articles, make notes directly in my codebase, and correct errors found at the last minute in my teaching materials. Like Typora, iA Writer is probably intended more for writing text, not writing complex Reveal.js presentations or non-standard markdown.\n\n\nI don’t have access to a Windows machine to test this out, but there are plenty of opinions to be found by Googling ‘best Windows Markdown editors’ or ‘best free Windows Markdown editors’. There’s one for writers and a more generic set of recommendations. Have a look around and see what you like!\n\n\nIf you use Linux already do you really need a recommendation? How about vim or vi?"
  },
  {
    "objectID": "setup/markdown.html#using-markdown",
    "href": "setup/markdown.html#using-markdown",
    "title": "Markdown",
    "section": "Using Markdown",
    "text": "Using Markdown\nFor Markdown to be useful as more than just a lightweight way to write notes, we want to be able to render it into new output formats/contexts. Here are three…"
  },
  {
    "objectID": "setup/markdown.html#markdown-github",
    "href": "setup/markdown.html#markdown-github",
    "title": "Markdown",
    "section": "Markdown & GitHub",
    "text": "Markdown & GitHub\nMarkdown is the ‘default’ language of GitHub, which means it’s worth your while to familiarise yourself with how it works. However, there are different ‘flavours’ of markdown, which also means that just because something works on GitHub it will work everywhere else in the same way. This is particularly common when dealing with optional parameters that try to give the ‘renderer’ (the thing that converts markdown to HTML, or LaTeX, or any other format) hints about how the content should look."
  },
  {
    "objectID": "setup/markdown.html#markdown-notebooks",
    "href": "setup/markdown.html#markdown-notebooks",
    "title": "Markdown",
    "section": "Markdown & Notebooks",
    "text": "Markdown & Notebooks\nMarkdown is also the language of plain-text cells in Jupyter notebooks, which makes it doubly worth your while to familiarise yourself with how it works."
  },
  {
    "objectID": "setup/markdown.html#quarto",
    "href": "setup/markdown.html#quarto",
    "title": "Markdown",
    "section": "Quarto",
    "text": "Quarto\nQuarto builds on RMarkdown to make the power of Markdown+Code available to other languages than R. In our Foundations of Spatial Data Science module we use Quarto to do submissions but that’s largely because it demonstrates how we can Quarto to write whole articles or dissertation!\nIn many cases, it is as straightforward as installing Quarto and then running quarto render ..., but there are some tricks. In particular, to ‘render’ Markdown files to PDF, you will need to have some flabour to TeX installed. The default suggested by Quarto is TinyTex, and this can be installed using:\nquarto install tool tinytex\nBut on some platforms there are additional issues:\n\nMacWindows\n\n\nYou will probably be able to successfully install tinytex, but then be told that no TeX installation could be found when trying to render. The issue relates to the $PATH where Quarto searches for a valid TeX installation and when completing the installation you may have seen a warning to the effect of “To complete the installation, please run the following…”\nSo that’s basically what we need to do. The first thing you need to do is find the TinyTeX binaries, in the cases that I’ve been able to fix these were found under something like $HOME/Library/TinyTex/bin/, but you may need to look further under $HOME/Library/ to find the TinyTex directory.\nOnce you know where TinyTeX is (adjust the cd command below as necessary), you can then follow the suggestion given:\ncd $HOME/Library/TinyTeX/bin/\n./universal-darwin/tlmgr option sys_bin $HOME/Library/TinyTeX/bin\n./universal-darwin/tlmgr path add\nThat should do it, but in case you are still getting errors, then the following might be necessary (again, adjust the path if necessary):\necho \"export PATH=\\\"/Users/$(whoami)/Library/TinyTeX/bin:\\$PATH\\\"\" &gt;&gt; $HOME/.zshrc\nThe command above uses whoami to set the username and assumes that’s how things should be set up, but don’t blindly copy+paste and assume this will work! You could, for instance, check this location exists first using: ls /Users/$(whoami)/Library/TinyTeX/bin/ That will show if the path exists! The above command then updates the $PATH variable used by your Terminal to look for binaries, enabling Quarto to find TinyTeX once you close and then re-open a new Shell.\n\n\nMost commands seem to require replacing quarto with quarto.exe to run correctly. So quarto render Template.qmd becaomes quarto.exe render Template.qmd.\nHowever, if you are still getting errors to the effect that Quarto cannot be found then you may need to make additional edites to your .bashrc file (this is the configuration file for bash):\n\nCheck where Quarto is installed, it is most likely under /mnt/c/Users/&lt;Your Username&gt;/AppData/Local/Programs/Quarto/bin (replace &lt;Your Username&gt; as appropriate.\nEdit the .bashrc file in your $HOME directory. On Windows I would Google search for the best way to do this: “edit .bashrc file Windows”.\nAdd the following line at the end of the file: export PATH=/mnt/c/Users/&lt;Your Username&gt;/AppData/Local/Programs/Quarto/bin:$PATH\nSave the file and run source .bashrc in the Terminal.\nYou should now be able to run the following command successfully: quarto.exe --help"
  },
  {
    "objectID": "setup/markdown.html#footnotes",
    "href": "setup/markdown.html#footnotes",
    "title": "Markdown",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNot all of these are still free.↩︎"
  },
  {
    "objectID": "setup/health.html",
    "href": "setup/health.html",
    "title": "Requirements",
    "section": "",
    "text": "This guide will help you to perform a basic ‘health check’ on your computer to see if you’re likely to run into problems running the programming environment. When answering the questions below, ‘your computer’ is the machine on which you plan to do the programming.\nWe try to support as many different configurations as possible, but there is no programming environment that installs and runs seamlessly on all computers so if you run into issues please come back to this guide.",
    "crumbs": [
      "Requirements"
    ]
  },
  {
    "objectID": "setup/health.html#hardware-requirements",
    "href": "setup/health.html#hardware-requirements",
    "title": "Requirements",
    "section": "Hardware Requirements",
    "text": "Hardware Requirements\nIn our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer 8GB or less of RAM.\nYour computer has less than 20GB of free disk space remaining.\n\nRead on below to check what specification you have…\n\nMacOSWindowsLinux\n\n\nYou will need to look up:\n\nHow much RAM does your computer have? Help for Mac.\nHow much free disk space does your computer have? Help for Mac.\n\n\n\nYou will need to look up:\n\nHow much RAM does your computer have? Help for Windows.\nHow much free disk space does your computer have? Help for Windows.\n\n\n\nWe’re going to assume that you know what you’re doing. If you want a recommendation, we’d probably go with the latest Ubuntu desktop release.\n\n\n\nIf your computer has less than 8GB of RAM and/or less than 20GB of free disk space you are likely to have issues with virutalisation and (on Windows) WSL2. Your options are: 1) add more RAM (possible on Windows); 2) back up and remove unnecessary files (Movies, Photos, and Applications are particularly big ‘hogs’).",
    "crumbs": [
      "Requirements"
    ]
  },
  {
    "objectID": "setup/health.html#software-requirements",
    "href": "setup/health.html#software-requirements",
    "title": "Requirements",
    "section": "Software Requirements",
    "text": "Software Requirements\nIn our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer runs Windows 10 Home or older, or\nYour computer runs MacOS 10.13 (High Sierra) or older.\n\nAs long as your computer is running one of the last two major releases of the Operating System you should encounter few issues.\n\nMacOSWindows\n\n\nYou will need to look up:\n\nWhat Operating System and Version is your computer running? Help for Mac.\n\n\n\nYou will need to look up:\n\nWhat Operating System and Version is your computer running? Help for Windows.\n\n\n\n\n\nRecommendations\nIf you are using a Mac then your system should have the option to update to the latest version of the MacOS at no charge. If you are unable to update then it is likely that you have an older machine that is not fully supported by the most recent Operating System and, in all probability, you will also encounter issues running the programming environment.\nIf you are using a Windows PC then try to update to either Windows 11 or to Windows 10 Pro as this will ‘unlock’ additional features that are useful for supporting the programming environment. As a student you are likely to qualify for significantly cheaper/free updates, so make sure you do this when you have access to a discount.",
    "crumbs": [
      "Requirements"
    ]
  },
  {
    "objectID": "setup/docker_vs_podman.html",
    "href": "setup/docker_vs_podman.html",
    "title": "Podman or Docker",
    "section": "",
    "text": "You’ll see that we talk about both Podman and Docker interchangeably. You may have heard of one, but not the other. Is there a difference? In terms of what they do there is no difference that you need to care about at the moment: both allow you to build images of virtual machines, share them with other users, and run any image you find as a container. All of these words are explained below. The point being, they aim to do the same thing.\nHowever, how they do this is quite different. Docker is/was the market leader in this kind of image/container sharing system and is very stable and well-supported; however, to be installed and run Docker requires administrator access (also known as root).\nPodman is a more recent, open source tool: it is slightly less stable and widely supported than Docker, and to make the most of it you need to change quite a few things. However, the biggest benefit is that you can run it as a user: this makes installation and execution much easier.\nWe are trying to move over to Podman because it will make everyone’s life easier, but sometimes we run into issues that cause us to fall back to using Docker instead. Hope that makes sense!\n\n\n\n\n\n\nTL;DR\n\n\n\nChoose Podman unless you have a specific reason to choose Docker instead or you have been unable to successfully install and run Podman."
  },
  {
    "objectID": "setup/code_camp.html",
    "href": "setup/code_camp.html",
    "title": "Code Camp",
    "section": "",
    "text": "Code Camp provides a gentle introduction to the basics of programming in Python. Across about twelve sessions you will learn about syntax, variables, ‘simple’ data structures such as lists and dictionaries, and about the fundamentals of writing functions for reusable code. The sessions are entirely self-led: you should follow along at your own pace and remember that ‘it’s a marathon, not a sprint’.\nWe’ve tried to keep Code Camp as simple as possible so that you can get started as quickly as possible. We recommend that you simply run Code Camp in your browser since that will allow you to learn (and run) Python anywhere and any time. However, you are welcome to run Code Camp code on your own computer (see: install options).",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "setup/code_camp.html#tldr",
    "href": "setup/code_camp.html#tldr",
    "title": "Code Camp",
    "section": "TL;DR",
    "text": "TL;DR\nJust point your browser to Lesson 1 and get started because there’s nothing to install.",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "sessions/day4.html",
    "href": "sessions/day4.html",
    "title": "Day 4: Visualising Data",
    "section": "",
    "text": "Goal\n\n\n\nTo get you using the tools taught to create maps and plots using data.\n\n\nIntroductory session:\n\nAn introduction to Quarto (some examples of what you can do):\n\nThe Palmer Penguins\nCreate beautiful documents with R, Python, Julia and Observable\nOther ‘Real-Life Examples’ of Presentations, Web Sites and Books\nQuarto for the Python User\n\n\n\n\n\nSource\nSite\n\n\n\n\ngithub.com/jreades/code-camp\njreades.github.io/code-camp\n\n\ngithub.com/jreades/jaipur\njreades.github.io/jaipur\n\n\n\nApplied session:\n\nCreating a report in Quarto starting from: Report.qmd and include-in-header.tex. [These need to be in the same directory!]\nAdding new data to your map\nChanging colours, line widths, …, choropleths and maps-in-maps.\nWorking on a report — choosing a topic of interest (continuation of Day 3)",
    "crumbs": [
      "Day 4: Visualising Data"
    ]
  },
  {
    "objectID": "sessions/day2.html",
    "href": "sessions/day2.html",
    "title": "Day 2: Exploring Code",
    "section": "",
    "text": "Goal\n\n\n\nLearning to manage and link data.\n\n\nIntroductory session:\n\nLists\nLists-of-Lists (LOLs)\nDictionaries\nDictionaries-of-Lists (DOLs)\n\nFor further study (if the above is easy):\n\nThe Command Line\nGit\n\nApplied session:\n\nKey Concepts (Right+Click to download file)",
    "crumbs": [
      "Day 2: Exploring Code"
    ]
  },
  {
    "objectID": "lectures/3.6-Git.html#how-it-works",
    "href": "lectures/3.6-Git.html#how-it-works",
    "title": "Getting to Grips with Git",
    "section": "How It Works",
    "text": "How It Works\nThe natural way normal people think about managing versions of a document is to save a copy with a new name that somehow shows which version is most recent.\nThe natural way developers used to think about managing versions of a document is to have a master copy somewhere. Everyone asks the server for the master copy, makes some changes, and then checks those changes back in.\nThis is not how Git works.\n\nThe way normal people approach this problem assumes that, usually, only one or two people are making changes. But how do you coordinate with 20 other people to find out who has the most recent copy then collect all 21 people’s changes?\nThe way developers used to approach this problem assumes that someone is in final charge. That a company or organisation runs a server which will decide whose changes are allowed, and whose are not."
  },
  {
    "objectID": "lectures/3.6-Git.html#how-git-works",
    "href": "lectures/3.6-Git.html#how-git-works",
    "title": "Getting to Grips with Git",
    "section": "How Git Works",
    "text": "How Git Works\nGit is distributed, meaning that every computer where git is installed has its own master copy.\nSo every computer has a full history of any git project (aka. repository or ‘repo’). Indeed, you don’t have to synchronise your repo with any other computer or server at all! 1\n\nIn order to make this useful, you need ways to synchronise changes between computers that all think they’re right.\n\nI’d suggest that this is leaving the benefit of free backups on the table for no good reason!"
  },
  {
    "objectID": "lectures/3.6-Git.html#github",
    "href": "lectures/3.6-Git.html#github",
    "title": "Getting to Grips with Git",
    "section": "GitHub",
    "text": "GitHub\nGitHub is nothing special to Git, just another Git server with which to negotiate changes. Do not think of GitHub as the ‘master’ copy. There isn’t one.\nThere are, however, upstream and remote repositories.\n\nAn ‘upstream’ repository is where there’s a ‘gatekeeper’: e.g. the people who run PySAL have a repo that is considered the ‘gatekeeper’ for PySAL.\nA remote repository is any repository with which your copy synchronises. So the remote repository can be ‘upstream’ or it can just be another computer you run, or you GitHub account."
  },
  {
    "objectID": "lectures/3.6-Git.html#a-dropbox-analogy",
    "href": "lectures/3.6-Git.html#a-dropbox-analogy",
    "title": "Getting to Grips with Git",
    "section": "A Dropbox Analogy",
    "text": "A Dropbox Analogy\n\nThink of JupyterLab as being like Word or Excel: an application that allows you to read/write/edit notebook files.\nThink of GitHub as being like Dropbox: a place somewhere in the cloud that files on your home machine can be backed up.\n\nBut Dropbox doesn’t have the .gitignore file!\n\nGitHub offers a lot of ‘value added’ features (like simple text editing) on top of the basic service of ‘storing files’."
  },
  {
    "objectID": "lectures/3.6-Git.html#getting-started",
    "href": "lectures/3.6-Git.html#getting-started",
    "title": "Getting to Grips with Git",
    "section": "Getting Started",
    "text": "Getting Started\n\n\n\nTerm\nMeans\n\n\n\n\nRepository (Repo)\nA project or achive stored in Git.\n\n\ninit\nTo create a new repo on your computer.\n\n\nclone\nTo make a full copy of a repo somewhere else.\n\n\n\nThis creates a local repo that is unsynchronised with anything else:\nmkdir test\ncd test\ngit init\nWhereas this creates a local clone that is fully synchronised with GitHub:\ncd .. # To move out of 'test'\ngit clone https://github.com/jreades/fsds.git"
  },
  {
    "objectID": "lectures/3.6-Git.html#working-on-a-file",
    "href": "lectures/3.6-Git.html#working-on-a-file",
    "title": "Getting to Grips with Git",
    "section": "Working on a File",
    "text": "Working on a File\n\n\n\nTerm\nMeans\n\n\n\n\nadd\nAdd a file to a repo.\n\n\nmv\nMove/Rename a file in a repo.\n\n\nrm\nRemove a file from a repo.\n\n\n\nFor example:\ncd test # Back into the new Repo\ntouch README.md # Create empty file called README.md\ngit add README.md # Add it to the repository\ngit mv README.md fileA.md # Rename it (move it)\ngit rm fileA.md # Remove it... which is an Error!\nThis produces:\nerror: the following file has changes staged in the index:\n    fileA.md\n(use --cached to keep the file, or -f to force removal)\n\nThis is telling you that you can force remove (git rm -f fileA.md) if you really want, but you’d probably be better off commiting the changes that have been ‘staged’… more on this in a second!\nAlso: no one else knows about these changes yet!"
  },
  {
    "objectID": "lectures/3.6-Git.html#looking-at-the-history",
    "href": "lectures/3.6-Git.html#looking-at-the-history",
    "title": "Getting to Grips with Git",
    "section": "Looking at the History",
    "text": "Looking at the History\n\n\n\nTerm\nMeans\n\n\n\n\ndiff\nShow changes between commits.\n\n\nstatus\nShow status of files in repo.\n\n\nlog\nShow history of commits.\n\n\n\nFor example:\ncd ../test/ # In case you weren't already there\ngit status  # What's the status\nThis produces:\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   fileA.md\n\nSo again, git is giving us hints as to the options: ‘changes to be committed’ vs. ‘unstage’ the changes. We can also see what files are to be committed (i.e. have changed)."
  },
  {
    "objectID": "lectures/3.6-Git.html#working-on-a-project-or-file",
    "href": "lectures/3.6-Git.html#working-on-a-project-or-file",
    "title": "Getting to Grips with Git",
    "section": "Working on a Project or File",
    "text": "Working on a Project or File\n\n\n\nTerm\nMeans\n\n\n\n\ncommit\nTo record changes to the repo.\n\n\nbranch\nCreate or delete branches.\n\n\ncheckout\nJump to a different branch.\n\n\n\nFor example:\ngit commit -m \"Added and then renamed the README.\"\ngit status\nYou should see:\n[master (root-commit) e7a0b25] Added and then renamed the README Markdown file.\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 fileA.md\n# ... and then this:\nOn branch master\nnothing to commit, working tree clean\nMake a note of the number after ‘root-commit’!"
  },
  {
    "objectID": "lectures/3.6-Git.html#recovery",
    "href": "lectures/3.6-Git.html#recovery",
    "title": "Getting to Grips with Git",
    "section": "Recovery",
    "text": "Recovery\ngit rm fileA.md\ngit status\ngit commit -m \"Removed file.\"\nls \ngit checkout &lt;number you wrote down earlier&gt;\nls \n\nSo every operation on a file is recorded in the repository: adding, renaming, deleting, and so on. And we can roll back any change at any time. For plain-text files (such as Markdown, Python and R scripts) these changes are recorded at the level of each line of code: so you can jump around through your entire history of a project and trace exactly when and what changes you (or anyone else) made."
  },
  {
    "objectID": "lectures/3.6-Git.html#a-rock-climbing-analogy",
    "href": "lectures/3.6-Git.html#a-rock-climbing-analogy",
    "title": "Getting to Grips with Git",
    "section": "A Rock-Climbing Analogy",
    "text": "A Rock-Climbing Analogy"
  },
  {
    "objectID": "lectures/3.6-Git.html#collaborating-on-a-project",
    "href": "lectures/3.6-Git.html#collaborating-on-a-project",
    "title": "Getting to Grips with Git",
    "section": "Collaborating on a Project",
    "text": "Collaborating on a Project\n\n\n\nTerm\nMeans\n\n\n\n\npull\nTo request changes on a repo from another computer.\n\n\npush\nTo send changes on a repo to another computer.\n\n\n\nFor example:\ngit push"
  },
  {
    "objectID": "lectures/3.6-Git.html#a-note-on-workflow",
    "href": "lectures/3.6-Git.html#a-note-on-workflow",
    "title": "Getting to Grips with Git",
    "section": "A Note on Workflow",
    "text": "A Note on Workflow\nSo your workflow should be:\n\nSave edits to Jupyter notebook.\nRun git add &lt;filename.ipynb&gt; to record changes to the notebook (Note: replace &lt;filename.ipynb&gt; completely with the notebook filename).\nRun git commit -m \"Adding notes based on lecture\" (or whatever message is appropriate: -m means ‘message’).\nThen run git push to push the changes to GitHub.\n\nIf any of those commands indicate that there are no changes being recorded/pushed then it might be that you’re not editing the file that you think you are (this happens to me!).\nOn the GitHub web site you may need to force reload the view of the repository: Shift + the Reload button usually does it in most browsers. You may also need to wait 5 to 10 seconds for the changes to become ‘visible’ before reloading. It’s not quite instantaeous."
  },
  {
    "objectID": "lectures/3.6-Git.html#this-is-not-easy",
    "href": "lectures/3.6-Git.html#this-is-not-easy",
    "title": "Getting to Grips with Git",
    "section": "This is not easy",
    "text": "This is not easy\n\nSource"
  },
  {
    "objectID": "lectures/3.6-Git.html#so-here-are-some-cheat-sheets",
    "href": "lectures/3.6-Git.html#so-here-are-some-cheat-sheets",
    "title": "Getting to Grips with Git",
    "section": "So here are some cheat sheets",
    "text": "So here are some cheat sheets"
  },
  {
    "objectID": "lectures/3.6-Git.html#resources",
    "href": "lectures/3.6-Git.html#resources",
    "title": "Getting to Grips with Git",
    "section": "Resources",
    "text": "Resources\n\nUnderstanding Git (Part 1) – Explain it Like I’m Five\nTrying Git\nVisualising Git\nGit Novice\nConfusing Git Terminology\nGit Cheat Sheet: Commands and Best Practices\nAndy’s R-focussed Tutorial\n\n\nI now have everything in Git repos: articles, research, presentations, modules… the uses are basically endless once you start using Markdown heavily (even if you don’t do much coding)."
  },
  {
    "objectID": "lectures/3.4-DOLs_to_Data.html#but-compare",
    "href": "lectures/3.4-DOLs_to_Data.html#but-compare",
    "title": "Data Structures",
    "section": "But Compare…",
    "text": "But Compare…\nConsider how these two data structures differ:\ncities = [\n  {'name': 'London', 'loc': [51.5072, 0.1275], 'tz': +0}, \n  {'name': 'New York', 'loc': [40.7127, 74.0059], 'tz': -5}, \n  {'name': 'Tokyo', 'loc': [35.6833, 139.6833], 'tz': +8}\n]\nOr:\ncities = {\n  'London': {'loc': [51.5072, 0.1275], 'tz': +0}, \n  'New York': {'loc': [40.7127, 74.0059], 'tz': -5}, \n  'Tokyo': {'loc': [35.6833, 139.6833], 'tz': +8}\n}\n\nWhy don’t you copy the code and then see how to access different fields/values? What might be the pros and cons of each?"
  },
  {
    "objectID": "lectures/3.4-DOLs_to_Data.html#implications",
    "href": "lectures/3.4-DOLs_to_Data.html#implications",
    "title": "Data Structures",
    "section": "Implications",
    "text": "Implications\n\nSo we can mix and match dictionaries and lists in whatever way we need to store… ‘data’. The question is then: what’s the right way to store our data?\n\n\nAnswer: the way that makes the most sense to a human while also being the most robust for coding."
  },
  {
    "objectID": "lectures/3.4-DOLs_to_Data.html#but-compare-1",
    "href": "lectures/3.4-DOLs_to_Data.html#but-compare-1",
    "title": "Data Structures",
    "section": "But Compare…",
    "text": "But Compare…\nHow do these data structures differ?\n\n\nOption 1\nds1 = [\n  ['lat','lon','name','tz'],\n  [51.51,0.13,'London',+0],\n  [40.71,74.01,'New York',-5],\n  [35.69,139.68,'Tokyo',+8]\n]\n\nOption 2\nds2 = {\n  'lat': [51.51,40.71,35.69],\n  'lon': [0.13,74.01,139.68],\n  'tz':  [+0,-5,+8],\n  'name':['London','New York','Tokyo']\n}\n\n\nTo understand why I’m asking this question, here are two example questions I’d like you to try to answer:\n\nWhat’s the average latitude of these three cities?\nWhat’s the time zone of Tokyo?"
  },
  {
    "objectID": "lectures/3.4-DOLs_to_Data.html#thinking-it-through",
    "href": "lectures/3.4-DOLs_to_Data.html#thinking-it-through",
    "title": "Data Structures",
    "section": "Thinking it Through",
    "text": "Thinking it Through\nWhy does this work for both computers and people?\nds2 = {\n  'lat': [51.51,40.71,35.69],\n  'lon': [0.13,74.01,139.68],\n  'tz':  [+0,-5,+8],\n  'name':['London','New York','Tokyo']\n}\n\nWe are doing away with the idea that the order of columns matters (humans don’t care that a city’s name is in the first column, and a city’s latitude in the second). We just want to find the column. But because we have a dictionary-of-lists we can ensure that the row order is preserved. Let’s see this in action."
  },
  {
    "objectID": "lectures/3.4-DOLs_to_Data.html#examples",
    "href": "lectures/3.4-DOLs_to_Data.html#examples",
    "title": "Data Structures",
    "section": "Examples",
    "text": "Examples\nds2 = {\n  'lat': [51.51,40.71,35.69],\n  'lon': [0.13,74.01,139.68],\n  'tz':  [+0,-5,+8],\n  'name':['London','New York','Tokyo']\n}\n\nprint(ds2['name'][0]) # London\nprint(ds2['lat'][0])  # 51.51\nprint(ds2['tz'][0])   # 0\nSo 0 always returns information about London, and 2 always returns information about Tokyo. But it’s also easy to ask for the latitude (ds2['lat'][0]) or time zone (ds2['tz'][0]) value once you know that 0 is London!\n\nBut there’s another advantage that’s not quite so obvious: for the computer because everything of type ‘lat’ is a float, everything of type ‘tz’ is an integer, and everything of type ‘name’ is a string, it’s a lot easier to work with each column as data."
  },
  {
    "objectID": "lectures/3.4-DOLs_to_Data.html#how-is-that-easier",
    "href": "lectures/3.4-DOLs_to_Data.html#how-is-that-easier",
    "title": "Data Structures",
    "section": "How is that easier???",
    "text": "How is that easier???\nRemember that we can use any immutable ‘thing’ as a key. This means…\nds2 = {\n  'lat': [51.51,40.71,35.69],\n  'lon': [0.13,74.01,139.68],\n  'tz':  [+0,-5,+8],\n  'name':['London','New York','Tokyo']\n}\n\ncity_nm = 'Tokyo'\ncity_idx = ds2['name'].index(city_nm)\n\nprint(f\"The time zone of {city_nm} is {ds2['tz'][city_idx]}\")\nWe can re-write this into a single line as:\ncity_nm = 'New York'\nprint(f\"The time zone of {city_nm} is {ds2['tz'][ ds2['name'].index(city_nm)]}\")\n\nThis achieves several useful things:\n\nIt is fast: faster than iterating over a list-of-lists or dictionary-of-dictionaries. In other words, there is no iteration at all!\nAll data in a list is of the same type so we can easily add checks to make sure that it’s valid.\nWe can also easily calculate an average/max/min/median and so on (as we’ll see later) without even having to look at any other columns!\nWe can add more columns instantly and the process of finding something is just as fast as it is now. And adding more rows doesn’t make it much slower either!\n\nAlso, notice how in these two examples we don’t try to write the second example in one go: first, we work it out as a set of steps: how do we figure out what ‘row’ (position in the list) Tokyo is in? Now that we’ve got that, how do we retrieve the time zone value for Tokyo? We know that code works, now let’s do variable substitution, as we would if we were doing maths: we can replace the city_idx in the time zone lookup with ds2['name'].index('Tokyo')."
  },
  {
    "objectID": "lectures/3.4-DOLs_to_Data.html#resources",
    "href": "lectures/3.4-DOLs_to_Data.html#resources",
    "title": "Data Structures",
    "section": "Resources",
    "text": "Resources\n\n8 Data Structures Every Data Scientist Should Know (by a CASA alum)"
  },
  {
    "objectID": "lectures/3.2-LOLs.html#making-sense-of-this",
    "href": "lectures/3.2-LOLs.html#making-sense-of-this",
    "title": "LoLs",
    "section": "Making Sense of This",
    "text": "Making Sense of This\nWe can ‘unpack’ my_list in stages in order to make sense of it:\nmy_list = [\n  [1, 2, 3], \n  [4, 5, 6], \n  [7, 8, 9]\n]\n\nfor i in my_list:\n  print(i)\nWhat do you think this will print?"
  },
  {
    "objectID": "lectures/3.2-LOLs.html#debugging-our-thinking",
    "href": "lectures/3.2-LOLs.html#debugging-our-thinking",
    "title": "LoLs",
    "section": "Debugging Our Thinking",
    "text": "Debugging Our Thinking\nLet’s make it a little more obvious:\na = [1, 2, 3]\nb = [4, 5, 6]\nc = [7, 8, 9]\n\nmy_list = [a, b, c]\n\nfor i in my_list:\n  print(i) # Prints a, b, c in turn..."
  },
  {
    "objectID": "lectures/3.2-LOLs.html#the-next-step",
    "href": "lectures/3.2-LOLs.html#the-next-step",
    "title": "LoLs",
    "section": "The Next Step",
    "text": "The Next Step\nWe could then try this:\nfor i in my_list:\n  print(f\" &gt;&gt; {i}\")\n  for j in i: # Remember that i is a list!\n    print(j)\nThis produces:\n &gt;&gt; [1, 2, 3]\n1\n2\n3\n &gt;&gt; [4, 5, 6]\n4\n..."
  },
  {
    "objectID": "lectures/3.2-LOLs.html#putting-it-together",
    "href": "lectures/3.2-LOLs.html#putting-it-together",
    "title": "LoLs",
    "section": "Putting It Together",
    "text": "Putting It Together\nSome observations:\n\nWe can access i in my_list using either for i in my_list (every element in turn) or my_list[i] (one element only).\nWe can access j in list i using for j in i (every element in turn) or i[j] (one element only).\n\nDoes that mean we can also do this:\nmy_list = [\n  [1, 2, 3], \n  [4, 5, 6], \n  [7, 8, 9]\n]\n\ni,j = 0,1\nprint(my_list[i][j])"
  },
  {
    "objectID": "lectures/3.2-LOLs.html#lets-talk-it-out",
    "href": "lectures/3.2-LOLs.html#lets-talk-it-out",
    "title": "LoLs",
    "section": "Let’s Talk It Out!",
    "text": "Let’s Talk It Out!\nSo if we write:\ni,j = 0,1\nprint(my_list[i][j])\nThen:\n\nmy_list[i] returns [1,2,3] (because i==0 and the first list is [1,2,3]), and\nmy_list[i][j] returns 2 (because j==1 and the [1,2,3][1]==2).\n\nSimilarly, my_list[2] grabs the third list ([7,8,9]) and then my_list[2][2] tells Python to get the third item in that third list (i.e. 9).\n\nHow you print the number 5 from this list-of-lists?"
  },
  {
    "objectID": "lectures/3.2-LOLs.html#making-this-useful",
    "href": "lectures/3.2-LOLs.html#making-this-useful",
    "title": "LoLs",
    "section": "Making This Useful",
    "text": "Making This Useful\nIf I rewrite the list this way perhaps it looks a little more useful?\nmy_cities = [\n  ['London', 51.5072, 0.1275, +0], \n  ['New York', 40.7127, 74.0059, -5], \n  ['Tokyo', 35.6833, 139.6833, +8]\n]\nNow we have something that is starting to look like data!"
  },
  {
    "objectID": "lectures/3.2-LOLs.html#down-the-rabbit-hole",
    "href": "lectures/3.2-LOLs.html#down-the-rabbit-hole",
    "title": "LoLs",
    "section": "Down the Rabbit Hole",
    "text": "Down the Rabbit Hole"
  },
  {
    "objectID": "lectures/3.2-LOLs.html#lols-of-lols",
    "href": "lectures/3.2-LOLs.html#lols-of-lols",
    "title": "LoLs",
    "section": "LOLs of LOLs",
    "text": "LOLs of LOLs\nThis is also a legitimate list in Python.\nmy_cities = [\n  ['London', [51.5072, 0.1275], +0], \n  ['New York', [40.7127, 74.0059], -5], \n  ['Tokyo', [35.6833, 139.6833], +8]\n]\nprint(my_cities[0][0])\n&gt; London\nprint(my_cities[0][1][0])\n&gt; 51.5072\n\nWhy might it be a better choice of data structure than the earlier version?"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#reading-writing",
    "href": "lectures/2.4-Geodata.html#reading-writing",
    "title": "Geopandas",
    "section": "Reading & Writing",
    "text": "Reading & Writing\nSupported file formats:\n\n\n\nType\nExtension\nNotes\n\n\n\n\nShape\n.shp (etc.)\nMaximum compatibility\n\n\nGeoPackage\n.gpkg\nGood default choice\n\n\nGeoJSON\n.geojson\nFor web mapping\n\n\nZip\n.zip\nFor use with Shapefiles\n\n\nWKT\n.txt\nPlain-text & SQL\n\n\nGeoParquet\n.geoparquet\nGood for large data sets & SQL\n\n\n\nAdditionally, it is possible to read only subsets of the data using row, column, geometry, and bbox filters."
  },
  {
    "objectID": "lectures/2.4-Geodata.html#reading-remote-files",
    "href": "lectures/2.4-Geodata.html#reading-remote-files",
    "title": "Geopandas",
    "section": "Reading (Remote Files)",
    "text": "Reading (Remote Files)\nAgain, depending on file size you may want to save these locally, but…\nimport geopandas as gpd\ngpkg_src = 'https://orca.casa.ucl.ac.uk/~jreades/jaipur/TM_WORLD_BORDERS-0.3.gpkg'\nworld = gpd.read_file(gpkg_src)\n# The ';' suppresses matplotlib output\nworld.plot(facecolor='white', edgecolor='darkblue');"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#writing-local-files",
    "href": "lectures/2.4-Geodata.html#writing-local-files",
    "title": "Geopandas",
    "section": "Writing (Local Files)",
    "text": "Writing (Local Files)\nWrite any OGR-supported vector drivers.\nworld.to_file('world.gpkg', driver='GPKG')\nworld.to_file('world.shp', driver='ESRI Shapefile')\nworld.to_file('world.geojson', driver='GeoJSON')\nMy favourite (when installed):\nworld.to_parquet('world.geoparquet')\n\nIf you forget to specify the driver it writes shapefiles by default. This is mainly an issue if you try to write a GeoPackage or GeoJSON file but then end up writing a shapefile to a directory called world.gpkg!"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#data-structures",
    "href": "lectures/2.4-Geodata.html#data-structures",
    "title": "Geopandas",
    "section": "Data Structures",
    "text": "Data Structures\nGeoPandas does all this by adding just two new classes:\n\nGeoDataFrame\nGeoSeries\n\nIn principle, a GeoSeries can contain multiple geo-data types, but in practice you’ll want to be one of the following shapely classes:\n\nPoints / Multi-Points\nLines / Multi-Lines\nPolygons / Multi-Polygons"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#consider",
    "href": "lectures/2.4-Geodata.html#consider",
    "title": "Geopandas",
    "section": "Consider",
    "text": "Consider\nRecall that we can ask if a particular object is an instance of any given class:\n\nprint(isinstance(world, str))\nprint(isinstance(world, pd.DataFrame))\nprint(isinstance(world, gpd.GeoDataFrame))\n\nFalse\nTrue\nTrue\n\n\n\nprint(isinstance(world.geometry, str))\nprint(isinstance(world.geometry, pd.Series))\nprint(isinstance(world.geometry, gpd.GeoSeries))\n\nFalse\nTrue\nTrue\n\n\n\nSo converting from Pandas to GeoPandas works well because GeoPandas knows all about Pandas.\nYou can use a GeoDataFrame anywhere you’d use a DataFrame with no loss of functionality! Same for a GeoSeries, though in this case a GeoSeries cannot perform the same statistical operations."
  },
  {
    "objectID": "lectures/2.4-Geodata.html#projections",
    "href": "lectures/2.4-Geodata.html#projections",
    "title": "Geopandas",
    "section": "Projections",
    "text": "Projections\nDepending on your data source, you may or may not have projection information attached to your GeoDataFrame:\n\nprint(world.crs)\n\nEPSG:4326\n\n\nBut:\n\nworld.crs\n\n&lt;Geographic 2D CRS: EPSG:4326&gt;\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#finding-projections",
    "href": "lectures/2.4-Geodata.html#finding-projections",
    "title": "Geopandas",
    "section": "Finding Projections",
    "text": "Finding Projections\nYou’ll have already covered this in GIS, but you can find nearly any EPSG you might need at epsg.io. By far the most commonly-used here are:\n\nEPSG:4326 for the World Geodetic System 84 used in GPS.\nEPSG:27700 for OSGB 1936/British National Grid used in the UK.\nEPSG:32643 was what I was given for Jaipur geodata.\nEPSG:3857 was what I found for some boundary data for India.\n\nNote: recall that large territories (such as Canada, China and Russia) may well have multiple projections at the state of provincial level."
  },
  {
    "objectID": "lectures/2.4-Geodata.html#reprojection",
    "href": "lectures/2.4-Geodata.html#reprojection",
    "title": "Geopandas",
    "section": "Reprojection",
    "text": "Reprojection\nFor data sets without projection information (i.e. often anything loaded from a shapefile) you must gdf.set_crs(&lt;spec&gt;). For all others you should gdf.to_crs(&lt;spec&gt;).\n\nworld2 = world.to_crs('ESRI:54030')\nworld2.plot();"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#code-wont-stop-you-being-silly",
    "href": "lectures/2.4-Geodata.html#code-wont-stop-you-being-silly",
    "title": "Geopandas",
    "section": "Code Won’t Stop You Being Silly",
    "text": "Code Won’t Stop You Being Silly\n\nworld2 = world.to_crs('EPSG:27700')\nworld2.plot();\n\n\n\n\n\n\n\n\n\nUnlike a shapefile, you can have more than one geometry column, each with a different projection. However, only one will be plotted (the one named geometry or specified via set_geometry())."
  },
  {
    "objectID": "lectures/2.4-Geodata.html#the-spatial-index",
    "href": "lectures/2.4-Geodata.html#the-spatial-index",
    "title": "Geopandas",
    "section": "The Spatial Index",
    "text": "The Spatial Index\nWe can use GeoSeries’ spatial index directly to perform simple spatial queries:\n\nimport matplotlib.pyplot as plt\nwslice = world.cx[-50:50, -20:20] # cx = coordinate index\nax = wslice.plot()\nplt.axvline(-50, linestyle='--', color='red')\nplt.axvline(50, linestyle='--', color='red')\nplt.axhline(-20, linestyle='--', color='red')\nplt.axhline(20, linestyle='--', color='red');"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#attributes",
    "href": "lectures/2.4-Geodata.html#attributes",
    "title": "Geopandas",
    "section": "Attributes",
    "text": "Attributes\nA GeoSeries has attributes like any other Series, but also includes some spatially-specifc ones:\n\narea — if a polygon\nbounds — for each feature\ntotal_bounds — for each GeoSeries\ngeom_type — if you don’t already know\nis_valid — if you need to test"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#methods",
    "href": "lectures/2.4-Geodata.html#methods",
    "title": "Geopandas",
    "section": "Methods",
    "text": "Methods\nAdditional GeoSeries methods icnlude:\n\ndistance() — returns Series measuring distances to some other feature (called as: &lt;GeoSeries&gt;.distance(&lt;feature&gt;))\ncentroid — returns GeoSeries of strict centroids (called as: &lt;GeoSeries&gt;.centroid)\nrepresentative_point() — returns GeoSeries of points within features\nto_crs() and plot(), which you’ve already seen.\n\n\nNote that centroid is not called with parentheses. Technically it’s more like an attribute than a method."
  },
  {
    "objectID": "lectures/2.4-Geodata.html#relationship-tests",
    "href": "lectures/2.4-Geodata.html#relationship-tests",
    "title": "Geopandas",
    "section": "Relationship Tests",
    "text": "Relationship Tests\nSimple geographical tests:\n\ngeom_almost_equals() — tries to deal with rounding issues when comparing two features.\ncontains() — is shape contained within some other features.\nintersects() — does shape intersect some other features."
  },
  {
    "objectID": "lectures/2.4-Geodata.html#converting-non-spatial-data-1",
    "href": "lectures/2.4-Geodata.html#converting-non-spatial-data-1",
    "title": "Geopandas",
    "section": "Converting Non-Spatial Data 1",
    "text": "Converting Non-Spatial Data 1\nLat/Long and Northing/Easting benefit from a helper function gpd.points_from_xy():\n\nurl = 'https://bit.ly/3I0XDrq'\ndf  = pd.read_csv(url)\n\ngdf = gpd.GeoDataFrame(df, \n            geometry=gpd.points_from_xy(\n                        df['longitude'], \n                        df['latitude'], \n                        crs='epsg:4326'\n            )\n      )\n\n\nYou can also use list comprehensions ([x for x in list]) and zip to combine two lists but then need to specify the CRS as a separate step!"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#csv-to-points-in-3-lines",
    "href": "lectures/2.4-Geodata.html#csv-to-points-in-3-lines",
    "title": "Geopandas",
    "section": "CSV to Points in 3 Lines!",
    "text": "CSV to Points in 3 Lines!\n\n\n\n\n\n\n\n\n\n\nNotice that the default plot from a GeoDataFrame is… a map!"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#converting-non-spatial-data-2",
    "href": "lectures/2.4-Geodata.html#converting-non-spatial-data-2",
    "title": "Geopandas",
    "section": "Converting Non-Spatial Data 2",
    "text": "Converting Non-Spatial Data 2\nOther feature types need to be in some kind of regular format such as Well-Known Text (WKT), GeoJSON, or something readable as a Shapely geometry.\n\nfrom shapely import wkt\n\n# Notice coordinate pairs and last point is same as first one\nbbox = 'POLYGON((5000000.0 2500000.0, 5000000.0 -2500000.0, -5000000.0 -2500000.0, -5000000.0 2500000.0, 5000000.0 2500000.0))'\n\n# Create GeoPandas from dict just like Pandas\nbgdf = gpd.GeoDataFrame({'id':[0], 'coordinates':bbox})\n\n# Turn it into a geometry\nbgdf['geometry'] = bgdf.coordinates.apply(wkt.loads)\nbgdf = bgdf.set_crs('ESRI:54030')\nbgdf.plot() # Not very interesting but...\n\n\n\n\n\n\n\n\n\nThese are more rarely used for our purposes but knowing that they exist is useful."
  },
  {
    "objectID": "lectures/2.4-Geodata.html#from-text-to-bounding-box",
    "href": "lectures/2.4-Geodata.html#from-text-to-bounding-box",
    "title": "Geopandas",
    "section": "From Text to Bounding Box",
    "text": "From Text to Bounding Box\n\nscale = int(float('1e7'))\nf,ax=plt.subplots(figsize=(8,4))\nworld2.plot(ax=ax)\nbgdf.plot(ax=ax, color='none', edgecolor='r')\nax.set_xlim([-0.75*scale, +0.75*scale])\nax.set_ylim([-3*scale/10, +3*scale/10])"
  },
  {
    "objectID": "lectures/2.4-Geodata.html#resources",
    "href": "lectures/2.4-Geodata.html#resources",
    "title": "Geopandas",
    "section": "Resources",
    "text": "Resources\n\nI Hate Coordinate Systems\nGeoPandas on ReadTheDocs\nDani’s GDS Course\nDani’s Web Mapping Course"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#which-of-these-is-data",
    "href": "lectures/2.2-Think_Data.html#which-of-these-is-data",
    "title": "Think Data",
    "section": "Which of These is Data?",
    "text": "Which of These is Data?\n\n\n\n\ncity,famous_for,sequence\nJaipur,Amber Fort,4\nDelhi,Taj Mahal,1\nAgra,Agra Fort,2\nRanthambore,Tigers!,3\n\n\n\n\n\n\n\n\n\n\n\n\ncity\nfamous_for\nsequence\n\n\n\n\n0\nJaipur\nAmber Fort\n4\n\n\n1\nDelhi\nTaj Mahal\n1\n\n\n2\nAgra\nAgra Fort\n2\n\n\n3\nRanthambore\nTigers!\n3"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#why-this-isnt-easy",
    "href": "lectures/2.2-Think_Data.html#why-this-isnt-easy",
    "title": "Think Data",
    "section": "Why This Isn’t Easy",
    "text": "Why This Isn’t Easy\n\n\nHere’s raw Excel data.\nWhat would we say the row and column names currently are?"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#with-labels",
    "href": "lectures/2.2-Think_Data.html#with-labels",
    "title": "Think Data",
    "section": "With Labels",
    "text": "With Labels\n\n\nMetadata is relevant to our understanding of the data and so is important, but it’s not relevant to treating the data as data so we need to be able to skip it.\nColumn names are going to be how we access a given attribute for each observation.\nRow names are not normally data themselves, but are basically labels or identifiers for observations. Another term for this would be the data index.\nIf we store row and column names/indices separately from the data then we don’t have to treat them as ‘special’ or factor them into, for example, the calculation of summary stats.\nAlso have to consider trade-offs around mapping the full column names on to something a little faster and easier to type!"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#how-about-in-india",
    "href": "lectures/2.2-Think_Data.html#how-about-in-india",
    "title": "Think Data",
    "section": "How About in India?",
    "text": "How About in India?"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#from-files-to-data",
    "href": "lectures/2.2-Think_Data.html#from-files-to-data",
    "title": "Think Data",
    "section": "From Files to Data",
    "text": "From Files to Data\nIn order to read a file you need to know a few things:\n\nWhat distinguishes one record from another?\nWhat distinguishes one field from another?\nWhat ensures that a field or record is valid?\nDoes the data have row or column names?\nIs there metadata?"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#structure-of-a-tabular-data-file",
    "href": "lectures/2.2-Think_Data.html#structure-of-a-tabular-data-file",
    "title": "Think Data",
    "section": "Structure of a Tabular Data File",
    "text": "Structure of a Tabular Data File\nRow and column names (indexes) make it a lot easier to find and refer to data but they are not data and don’t belong in the data set itself.\nOften, one record (a.k.a. observation) finishes and the next one starts with a ‘newline’ (\\n) or ‘carriage return’ (\\r) or both (\\r\\n) but it could be anything (e.g. EOR).\nOften, one field (a.k.a. attribute or value) finishes and the next one starts with a comma (,), but it could be anything (e.g. ; or | or EOF).\n\nHow would we choose a good field separator?\nPro tip: if we store column and row names separately from the data then we can access everything easily without having to factor in any ‘special’ values!\nNoice also the nd here. This is the escape sequence again that you also encountered when dealing with the Shell as well. Remember that \\ is necessary if you have a space in your file name or path."
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#some-common-formats",
    "href": "lectures/2.2-Think_Data.html#some-common-formats",
    "title": "Think Data",
    "section": "Some Common Formats",
    "text": "Some Common Formats\n\n\n\n\n\n\n\n\n\nExtension\nField Separator\nRecord Separator\nPython Package\n\n\n\n\n.csv\n, but separator can appear in fields enclosed by \".\n\\n but could be \\r or \\r\\n.\ncsv\n\n\n.tsv or .tab\n\\t and unlikely to appear in fields.\n\\n but could be \\r or \\r\\n.\ncsv (!)\n\n\n.xls or .xlsx\nBinary, you need a library to read.\nBinary, you need a library to read.\nxlrd/xlsxwriter\n\n\n.sav or .sas\nBinary, you need a library to read.\nBinary, you need a library to read.\npyreadstat\n\n\n.json, .geojson\nComplex (,, [], {}), but plain text.\nComplex (,, [], {}), but plain text\njson, geojson\n\n\n.shp\nBinary, you need a library to read. Need at least 3 parts (shp,dbf,shx)!\nBinary, you need a library to read.\ngeopandas, fiona\n\n\n.feather\nBinary, you need a library to read.\nBinary, you need a library to read.\npyarrow, geofeather\n\n\n.parquet\nBinary, you need a library to read.\nBinary, you need a library to read.\npyarrow\n\n\n\n\nOne of the reasons we like CSV and TSV files is that they can be opened and interacted with using the Command Line (as well as Excel/Numbers/etc.) directly. As soon as you get into binary file formats you either need the original tool (and then export) or you need a tool that can read those formats. So the complexity level rises very quickly.\nOf course, sometimes you can gain (e.g. SPSS or SAS) in terms of obtaining information about variable types, levels, etc. but usually you use these when that’s all that’s available or when you want to write a file for others to use.\nThe two formats at the bottom of the table are there because they are useful: the feather format was designed for fast reads and for data interachange with R, while Parquet is a highly-compressed, column-oriented storage format for large data. So for modest-sized data sets (a few hundred MB), or situations where you are working across R and Python, then Feather cannot be beat. For ‘big data’ where you need access to parts of the data set and want to do lazy loading, then parquet is the winner."
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#mapping-data-types",
    "href": "lectures/2.2-Think_Data.html#mapping-data-types",
    "title": "Think Data",
    "section": "‘Mapping’ Data Types",
    "text": "‘Mapping’ Data Types\nYou will often hear the term ‘mapping’ used in connection to data that is not spatial, what do they mean?\nHere’s a mapping:\n\n\n\n\n\n\n\nInput (e.g. Excel)\nOutput (e.g. Python)\n\n\n\n\nNULL, N/A, “”\nNone or np.nan\n\n\n0..n\nint\n\n\n0.00…n\nfloat\n\n\nTrue/False, Y/N, 1/0\nbool\n\n\nR, G, B (etc.)\nint or str (technically a set, but hard to use with data sets)\n\n\n‘Jon Reades’, ‘Huanfa Chen’, etc.\nstr\n\n\n‘3-FEB-2020’, ‘10/25/20’, etc.\ndatetime module (date, datetime or time)\n\n\n\n\nThese would be a mapping of variables between two formats. We talk of mapping any time we are taking inputs from one data set/format/data structure as a lookup for use with another data set/format/data structure.\nHave a think about how you can use an int to represent nominal data. There are two ways: one of which will be familiar to students who have taken a stats class (with regression) and one of which is more intuitive to ‘normal’ users…"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#testing-testing",
    "href": "lectures/2.2-Think_Data.html#testing-testing",
    "title": "Think Data",
    "section": "Testing, Testing",
    "text": "Testing, Testing\n\nYou should never assume that the data matches the spec."
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#things-that-can-go-wrong",
    "href": "lectures/2.2-Think_Data.html#things-that-can-go-wrong",
    "title": "Think Data",
    "section": "Things That Can Go Wrong…",
    "text": "Things That Can Go Wrong…\nA selection of real issues I’ve seen in my life:\n\nTruncation: server ran out of diskspace or memory, or a file transfer was interrupted.\nTranslation: headers don’t line up with data.\nSwapping: column order differs from spec.\nIncompleteness: range of real values differs from spec.\nCorruption: field delimitters included in field values.\nErrors: data entry errors resulted in incorrect values or the spec is downright wrong.\nIrrelevance: fields that simply aren’t relevant to your analysis.\n\n\nThese will generally require you to engage with columns and rows (via sampling) on an individual level."
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#geo-data-tables",
    "href": "lectures/2.2-Think_Data.html#geo-data-tables",
    "title": "Think Data",
    "section": "Geo-Data Tables",
    "text": "Geo-Data Tables\n\nimport geopandas as gpd\ngdf = gpd.read_parquet('../data/clean/Jaipur_Wards.geoparquet')\ngdf.head(3)\n\n\n\n\n\n\n\n\nId\nAREA\nWard_No\nPOP\nDENS_PPH\nNAME\ngeometry\nArea\nWard_Numbe\n\n\n\n\n0\n0\n781.0\n99.0\n12356\n16\nADARSH NAGAR\nPOLYGON ((588147.873 2977077.51, 588066.155 29...\nNaN\nNaN\n\n\n1\n0\n234.0\n76.0\n14120\n60\nADARSH NAGAR\nMULTIPOLYGON (((585516.609 2980880.352, 585516...\nNaN\nNaN\n\n\n2\n0\n18.0\n77.0\n13879\n771\nADARSH NAGAR\nPOLYGON ((583885.577 2978737.637, 583942.867 2...\nNaN\nNaN"
  },
  {
    "objectID": "lectures/2.2-Think_Data.html#resources",
    "href": "lectures/2.2-Think_Data.html#resources",
    "title": "Think Data",
    "section": "Resources",
    "text": "Resources\n\n\n\nUnderstanding Directories and Subdirectories\nReading and writing files\nWorking with OS path utilities\nFiles and file writing\nUsing file system shell methods\nOpening files\n\n\n\nText vs. binary mode\nText files\npetl\npandas 2.0 and the Arrow revolution (Part 1)\nWhat parquet files are my preferred API for bulk open data\nDuckDB Documentation"
  },
  {
    "objectID": "lectures/1.4-tools.html#literate-programming",
    "href": "lectures/1.4-tools.html#literate-programming",
    "title": "Our Tools",
    "section": "Literate Programming",
    "text": "Literate Programming\nIdeally, we want to ‘do’ data science in ways that are ‘literate’.\n\nThe best programs are written so that computing machines can perform them quickly and so that human beings can understand them clearly. A programmer is ideally an essayist who works with traditional aesthetic and literary forms as well as mathematical concepts, to communicate the way that an algorithm works and to convince a reader that the results will be correct. ~ Knuth (1996)"
  },
  {
    "objectID": "lectures/1.4-tools.html#key-tenets",
    "href": "lectures/1.4-tools.html#key-tenets",
    "title": "Our Tools",
    "section": "Key Tenets",
    "text": "Key Tenets\nWhat we want:\n\nWeaving: the code and its documentation are together.\nTangling: the code can be run directly.\n\nIn an ideal world, these are the same file…"
  },
  {
    "objectID": "lectures/1.4-tools.html#section",
    "href": "lectures/1.4-tools.html#section",
    "title": "Our Tools",
    "section": "",
    "text": "But why would we want this?"
  },
  {
    "objectID": "lectures/1.4-tools.html#and-how-do-we-do-this",
    "href": "lectures/1.4-tools.html#and-how-do-we-do-this",
    "title": "Our Tools",
    "section": "And how do we do this?",
    "text": "And how do we do this?\nHint: it’s more than just one thing…\n\n\nJupyterLab: how we do ‘data science’.\nVirtualisation: separate your computer from your coding environment.\nVersion Control: manage your code, your data, and even your reports.\nMarkup: focus on the structure while you write!\nRender: creating documents and web pages from code and markup."
  },
  {
    "objectID": "lectures/1.4-tools.html#why-use-jupyterlab",
    "href": "lectures/1.4-tools.html#why-use-jupyterlab",
    "title": "Our Tools",
    "section": "Why Use JupyterLab?",
    "text": "Why Use JupyterLab?\nCoding in JupyterLab has a number of advantages over ‘point-and-click’:\n\n\nCoding requires our instructions to be unambiguous and logical.1\nComputers are infinitely patient so we can re-run as many times as necessary to get it ‘right’.\nThere is nothing to install (runs in your web browser).\nYou can run code from anywhere (runs in your web browser).\n\n\nThis does not guarantee that they’ll be correct."
  },
  {
    "objectID": "lectures/1.4-tools.html#change-of-view",
    "href": "lectures/1.4-tools.html#change-of-view",
    "title": "Our Tools",
    "section": "Change of View",
    "text": "Change of View\n\nIf we can’t explain it simply enough that a computer can do it, perhaps we don’t actually understand it?\n\n\n\nTogether with the other tools in this talk, you can largely stop worrying about where code is running.\nIt’s easy to forget how you obtained a particular result when you are clicking around inside software like ArcGIS; this is much harder when using code.\nIn analysing the problem so that we can submit it to the computer we often develop a better understanding of the problem ourselves!\nWhy spend your time doing the boring stuff???\n\n\n\nConversely, perhaps the real value of humans over AI lies in what cannot be explained to the computer."
  },
  {
    "objectID": "lectures/1.4-tools.html#jupyterlab-python",
    "href": "lectures/1.4-tools.html#jupyterlab-python",
    "title": "Our Tools",
    "section": "JupyterLab + Python",
    "text": "JupyterLab + Python"
  },
  {
    "objectID": "lectures/1.4-tools.html#two-basic-flavours",
    "href": "lectures/1.4-tools.html#two-basic-flavours",
    "title": "Our Tools",
    "section": "Two Basic ‘Flavours’",
    "text": "Two Basic ‘Flavours’\nBoth do the same thing: separate the platform from the hardware, but they do this in defferent ways for different reasons.\n\nA ‘full’ Virtual Machine (VM) includes the Operating System and behaves like a separate computer even though it may share hardware with other VMs.\nA ‘container’ is a ‘lightweight’ VM running only the application and its dependencies; everything else is managed by the host Operating System so the resulting ‘image’ is small and easy to distribute.\n\nShort version: if you have to install an Operating System you are using a full VM; otherwise you are probably using a containerisation tool/\nMany things, including storage, networks, CPUs, GPUs, etc. can be virtualised."
  },
  {
    "objectID": "lectures/1.4-tools.html#why-use-containers",
    "href": "lectures/1.4-tools.html#why-use-containers",
    "title": "Our Tools",
    "section": "Why Use Containers?",
    "text": "Why Use Containers?\nWe gain quite a few benefits:\n\nEasier installation and ‘everyone’ has the same versions of the code.\nEach container is isolated and read-only.\nEasy to tidy up when you’re done.\nEasy to scale up and scale down, or to link them together via ‘microservices’.\nUsed in the ‘real world’ by many companies (JP Morgan Chase, GSK, PayPal, Twitter, Spotify, Uber…)."
  },
  {
    "objectID": "lectures/1.4-tools.html#change-of-view-1",
    "href": "lectures/1.4-tools.html#change-of-view-1",
    "title": "Our Tools",
    "section": "Change of View",
    "text": "Change of View\n\nRather than having one environment for every project, we have one environment for each project.\n\n\n‘Computing contexts’ are disposable, while data and code are persistent when I need them.\nI don’t care where my code and data are, so long as they’re accessible when I need them.\nI don’t care if containers are created or destroyed, so long as they’re available when I need them.\nI rebuild or update the computing context when I am ready to do so."
  },
  {
    "objectID": "lectures/1.4-tools.html#podman",
    "href": "lectures/1.4-tools.html#podman",
    "title": "Our Tools",
    "section": "Podman",
    "text": "Podman\n\n\nPodman is an open source container and image management engine. Podman makes it easy to find, run, build, and share containers."
  },
  {
    "objectID": "lectures/1.4-tools.html#using-podman",
    "href": "lectures/1.4-tools.html#using-podman",
    "title": "Our Tools",
    "section": "Using Podman",
    "text": "Using Podman\nPodman makes configuring a development environment (fairly) simple. If a Podman image works for us then we know1 it works for you.\nUse either:\n\njreades/sparc:2025-amd (Windows and Older Macs)\njreades/sparc:2025-arm (Newer Macs)\n\nUsually, but not always, true."
  },
  {
    "objectID": "lectures/1.4-tools.html#why-use-version-control",
    "href": "lectures/1.4-tools.html#why-use-version-control",
    "title": "Our Tools",
    "section": "Why use Version Control?",
    "text": "Why use Version Control?\n\n… If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.\nSource: Altassian\n\nIn addition:\n\n\nWe can share code with others (directly) as source code or (indirectly) as the product of compiling that source code.\nWe can rewind, fast forward, and combine changes by different people working on different features.\nWe gain detailed, incremental backups that help us tro track down the changes that introduced a bug when something goes wrong.\n\n\n\nDiscuss comparison with Dropbox or OneDrive. How are they similar, how are they different? File level vs. row-level views."
  },
  {
    "objectID": "lectures/1.4-tools.html#change-of-view-2",
    "href": "lectures/1.4-tools.html#change-of-view-2",
    "title": "Our Tools",
    "section": "Change of View",
    "text": "Change of View\n\nIn open source projects there may be no one view of what the ‘right’ solution/version of a project is, so differences need to be negotiated.\n\n\nEvery computer with version control might have the ‘right’ version of the code for a given user, so there is no ‘master’ view of a project.\nWe need to be able to choose whether to merge other people’s changes with our changes, rather than having everything forced on us.\nWe still want to be able to share our version of the code / outputs of the code with other people, and a web site is a good way to do that."
  },
  {
    "objectID": "lectures/1.4-tools.html#git",
    "href": "lectures/1.4-tools.html#git",
    "title": "Our Tools",
    "section": "Git",
    "text": "Git\n\n\n\n\nVersion control allows us to:\n\nTrack changes to files with a high level of detail using commit.\npush these changes out to others.\npull down changes made by others.\nmerge and resolve conflicting changes.\nCreate a tag when a ‘milestones’ is reached.\nCreate a branch to add a feature.\nRetrieve specific versions or branches with a checkout."
  },
  {
    "objectID": "lectures/1.4-tools.html#github",
    "href": "lectures/1.4-tools.html#github",
    "title": "Our Tools",
    "section": "GitHub",
    "text": "GitHub\n\n\n\n\nGit is distributed, meaning that every computer is a potential server and a potential authority. Result: commits on a plane!\nBut how do people find and access your code if your ‘server’ is a home machine that goes to sleep at night? Result: GitHub.\nGitHub is ‘just’ a very large Git server with a lot of nice web-friendly features tacked on: create a web site, issue/bug tracking, promote your project…"
  },
  {
    "objectID": "lectures/1.4-tools.html#gitgithub-is-for-anything",
    "href": "lectures/1.4-tools.html#gitgithub-is-for-anything",
    "title": "Our Tools",
    "section": "Git+GitHub is for… anything!",
    "text": "Git+GitHub is for… anything!\n\n\nThis whole course is on GitHub."
  },
  {
    "objectID": "lectures/1.4-tools.html#oh-my-git",
    "href": "lectures/1.4-tools.html#oh-my-git",
    "title": "Our Tools",
    "section": "Oh My Git!",
    "text": "Oh My Git!\n\n\nSource: OhMyGit"
  },
  {
    "objectID": "lectures/1.4-tools.html#why-use-markup",
    "href": "lectures/1.4-tools.html#why-use-markup",
    "title": "Our Tools",
    "section": "Why use Markup?",
    "text": "Why use Markup?\n\n\nQuickly sketch out the structure of a document.\nWorks well with version control (line-by-line changes + GitHub.io web site).\nWorks well with JupyterLab and other coding environments."
  },
  {
    "objectID": "lectures/1.4-tools.html#change-of-view-3",
    "href": "lectures/1.4-tools.html#change-of-view-3",
    "title": "Our Tools",
    "section": "Change of View",
    "text": "Change of View\n\nI spend a lot less time ‘faffing’ writing in Markdown than I used to. Spend more time on what you want to say and worry about the how later.\n\n\n\n### A Subtitle\n\nSome text in **bold** and *italics* with a [link](https://jreades.github.io/).\n\n&gt; A blockquote\n\nA Subtitle\nSome text in bold and italics with a link.\n\nA blockquote"
  },
  {
    "objectID": "lectures/1.4-tools.html#markdown-examples",
    "href": "lectures/1.4-tools.html#markdown-examples",
    "title": "Our Tools",
    "section": "Markdown Examples",
    "text": "Markdown Examples\nSee CommonMark and the Markdown Guide for more:\n\n\n\n\n\n\n\nFormat\nOutput\n\n\nPlain text...\nPlain text\n\n\n## A Large Heading\nA Large Heading\n\n\n### A Medium Heading\nA Medium Heading\n\n\n- A list\n- More list\n\nA list\nMore list\n\n\n\n1. An ordered list\n2. More ordered list\n\nAn ordered list\nMore ordered list\n\n\n\n[A link](http://casa.ucl.ac.uk)\nA link\n\n\n\n\nThis guide is good for HTML entities, though Google will also give you them pretty easily if you type HTML entity code for copyright…"
  },
  {
    "objectID": "lectures/1.4-tools.html#section-1",
    "href": "lectures/1.4-tools.html#section-1",
    "title": "Our Tools",
    "section": "",
    "text": "Format\n\n\nOutput\n\n\n\n\n![Alt Text](casa_logo.jpg)\n\n\n\n\n\n\n\n`A code snippet`\n\n\nA code snippet\n\n\n\n\n```{python} A block of Python code ```\n\n\nA block of Python code\n\n\n\n\n$$\nf(a) = \\frac{1}{2\\pi i}     \\oint_{\\gamma} \\frac{f(z)}{z-a} dz\n$$\n\n\n\\[\nf(a) = \\frac{1}{2\\pi i} \\oint_{\\gamma} \\frac{f(z)}{z-a} dz\n\\]"
  },
  {
    "objectID": "lectures/1.4-tools.html#why-render",
    "href": "lectures/1.4-tools.html#why-render",
    "title": "Our Tools",
    "section": "Why Render?",
    "text": "Why Render?\n\n\nOutputs can be: web pages, Jupyter notebooks, Word documents, PDFs, presentations…\nIt can be really useful to have a single input and multiple outputs because requirements and needs always change.\nIt teaches you to focus on the process, not the minutiae."
  },
  {
    "objectID": "lectures/1.4-tools.html#change-of-view-4",
    "href": "lectures/1.4-tools.html#change-of-view-4",
    "title": "Our Tools",
    "section": "Change of View",
    "text": "Change of View\n\nEverything this week was created using these basic tools and techniques. It has transformed the way I teach, do research, and write! It embodies the potential of ‘literate programming’ (Knuth 1984)."
  },
  {
    "objectID": "lectures/1.4-tools.html#additional-resources",
    "href": "lectures/1.4-tools.html#additional-resources",
    "title": "Our Tools",
    "section": "Additional Resources",
    "text": "Additional Resources\nMarkdown:\n\nGetting Started\nAn online interactive tutorial\nCheatsheet\n\nAnd once you’re ready to get ‘serious’, check out this tutorial on Sustainable Authorship in Plain Text using Pandoc and Markdown from The Programming Historian! That’s what actually underpins Quarto, but you can do so much more…"
  },
  {
    "objectID": "lectures/1.4-tools.html#references",
    "href": "lectures/1.4-tools.html#references",
    "title": "Our Tools",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\nKnuth, D. E. 1984. “Literate Programming.” The Computer Journal 27 (2). Oxford University Press:97–111.\n\n\n———. 1996. Selected Papers on Computer Science. Cambridge University Press.\n\n\nSusnjara, S., and I. Smalley. 2025. “What Is Virtualization?” 2025. https://www.ibm.com/think/topics/virtualization."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#the-pipeline",
    "href": "lectures/1.2-what-do-we-do.html#the-pipeline",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "The ‘Pipeline’",
    "text": "The ‘Pipeline’\n\nCode\nAnalyse\nUnderstand\nCommunicate\nReport\n\n\nHere are five things that we might imagine any data scientists, spatial or otherwise, does.\nDo we think they’re in the right order?\nI can tell you right now that this sequence of steps is how to get a mark of between 45 and 63 in your dissertation."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#the-pipeline-1",
    "href": "lectures/1.2-what-do-we-do.html#the-pipeline-1",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "The ‘Pipeline’",
    "text": "The ‘Pipeline’\n\nUnderstand\nCode\nReport\nAnalyse\nCommunicate\n\n\nHere’s a slightly better order, here’s why:\n\nYou can’t answer a question – from your boss, from an academic, from your friends even – if you don’t understand it. So before you run off and start writing some code, the first thing you need to do is understand the problem you’re trying to solve. That problem should not be technical, it should be practical.\nOnce you understand the problem you can start trying to code a solution.\nThe code will allow you to produce reports. These reports might be to do with data quality, they might be diagnostics from a Random Forest Machine Learning algorithm. At each stage in the development of your results you should be generating reports that help you to better-understand your problem and work out if your code is working.\nOnce the reports have given you confidence in your findings now you can actually write the analysis. Your analysis might lead you to realise that you need to go back and write more code and produce more reports, but that’s normal.\nFinally, you need to work out how to communicate your analysis. If you understand the problem then you’ll find this process rewarding. If you don’t then you’ll find it frustrating and want to brush it off quickly.\n\nSo the fact these are in a list is still rather misleading because at each point you get feedback effects, and it’s also a loop."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-understand",
    "href": "lectures/1.2-what-do-we-do.html#how-to-understand",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Understand?",
    "text": "How to Understand?\n\nHow should we do this?"
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-understand-1",
    "href": "lectures/1.2-what-do-we-do.html#how-to-understand-1",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Understand?",
    "text": "How to Understand?\n\nHow should we do this?\n\n\nWhy are we doing this?"
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-report",
    "href": "lectures/1.2-what-do-we-do.html#how-to-report",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Report?",
    "text": "How to Report?\n\nThis is the number."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-report-1",
    "href": "lectures/1.2-what-do-we-do.html#how-to-report-1",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Report?",
    "text": "How to Report?\n\nThis is the number.\n\n\nThese are the takeaways."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-analyse",
    "href": "lectures/1.2-what-do-we-do.html#how-to-analyse",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Analyse?",
    "text": "How to Analyse?\n\nThese are the methods we can use."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-analyse-1",
    "href": "lectures/1.2-what-do-we-do.html#how-to-analyse-1",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Analyse?",
    "text": "How to Analyse?\n\nThese are the methods I can use.\n\n\nThis is the method that matches the need."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-communicate",
    "href": "lectures/1.2-what-do-we-do.html#how-to-communicate",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Communicate?",
    "text": "How to Communicate?\n\nWhat do I need to say?"
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#how-to-communicate-1",
    "href": "lectures/1.2-what-do-we-do.html#how-to-communicate-1",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "How to Communicate?",
    "text": "How to Communicate?\n\nWhat do I need to say?\n\n\nWho needs to know?"
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#writing-coding-thinking",
    "href": "lectures/1.2-what-do-we-do.html#writing-coding-thinking",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "Writing & Coding == Thinking",
    "text": "Writing & Coding == Thinking\n\nIf writing down your ideas always makes them more precise and more complete, then no one who hasn’t written about a topic has fully formed ideas about it. And someone who never writes has no fully formed ideas about anything nontrivial. ~ Graham (2022)"
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#clarity-understanding",
    "href": "lectures/1.2-what-do-we-do.html#clarity-understanding",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "Clarity == Understanding",
    "text": "Clarity == Understanding\n\nWriting is thinking. To write well is to think clearly. That’s why it’s so hard. ~ McCullough (2002)"
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#tell-me-a-story",
    "href": "lectures/1.2-what-do-we-do.html#tell-me-a-story",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "Tell Me a Story",
    "text": "Tell Me a Story\n\nAll data science is, ultimately, a story.\n\n\nA story of struggle. Frustration. Discovery. Learning. But you need to tell that story the right way.\nMany of you will have learned some ‘system’ for writing in school. The inverted pyramid or something like that. In university, in my literary theory class I picked up the pyramid approach: taking a single sentence and unpacking that into the themes of the entire book.\nThere are mystery novels. Romance novels. Economist articles. Teen Vogue articles. They are all telling stories. They all do this in different ways."
  },
  {
    "objectID": "lectures/1.2-what-do-we-do.html#references",
    "href": "lectures/1.2-what-do-we-do.html#references",
    "title": "What Does a (Spatial) Data Scientist Do?",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\nGraham, P. 2022. “Putting Ideas into Words.” 2022. https://paulgraham.com/words.html.\n\n\nMcCullough, D. 2002. “Interview with NEH chairman Bruce Cole.” Humanities Magazine.\n\n\nXie, Tessa. 2024. “The Most Undervalued Skill for Data Scientists.” 2024. https://towardsdatascience.com/the-most-undervalued-skill-for-data-scientists-e0e0d7709321/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Over the course of the week we will be exploring a little bit of what is possible using code (Python, in this case) to process and analyse spatial data. Along the way we’ll touch both on the practical benefits of coding (instead of using only point-and-click software like ArcGIS or QGIS) as well as the more subtle philosophical advantages of using open source software and code.\nEach day we will have about 90 minutes of lecture and discussion, then a short break, and then about 90 minutes of an ‘applied’ workshop using the techniques and principles discussed earlier. Because we only have a week, we will be focussing on understanding the why we do something in a particular way, and a general understanding of what is happening, rather than digging into how to code.\nThese days, AI can help you a lot with the basics of coding, but it is important to recognise that AI is only as good as the problems it was trained on, and you’ll likely find that it knows a lot less about Indian geo-data than it does British or American data. Treat the AI as a personal tutor that is endlessly patient and can offer you 1:1 time, but it cannot answer questions of ethics or purpose.\nNow,in order to get you started on your spatial and data science ‘journey’, you will need to follow the guidance provided on the pages we’ve linked to below to check that you’re able to run the programming environment and get everything (or as much as you can!) set up and ready to go on Day 1.."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Welcome",
    "section": "Requirements",
    "text": "Requirements\nBefore trying to install the software, please complete the basic health check to ensure that your computer is up-to-date and able to run the software we use."
  },
  {
    "objectID": "index.html#updates",
    "href": "index.html#updates",
    "title": "Welcome",
    "section": "Updates",
    "text": "Updates\nOnce you know that your machine and operating system are up-to-date, you should install the basic utilities that will enable you to complete installation of the programming environment."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Welcome",
    "section": "Installation",
    "text": "Installation\nThe Installation Guide section will help you to get your computer ready for the workshop sessions."
  },
  {
    "objectID": "index.html#sessions",
    "href": "index.html#sessions",
    "title": "Welcome",
    "section": "Sessions",
    "text": "Sessions\nThere are four sessions planned for the week (see Sessions drop-down menu!). The sessions will make use of the tools installed above, so please try to install Podman on your laptop before the start of the first session as this will save quite a bit of time and also allow us to help you more quickly if there are any issues."
  },
  {
    "objectID": "index.html#citing",
    "href": "index.html#citing",
    "title": "Welcome",
    "section": "Citing",
    "text": "Citing\n@software{jaipur:2025,\n  author = {Reades, Jon},\n  title = {\\texttt{jaipur_env}: A containerised platform for Urban Spatial Science},\n  url = {https://github.com/jreades/jaipur/},\n  version = {2025},\n  date = {2025-08-11},\n}"
  },
  {
    "objectID": "bib/Bibliography.html",
    "href": "bib/Bibliography.html",
    "title": "Bibliography",
    "section": "",
    "text": "Bibliography\n\n\nAlsudais, Abdulkareem. 2021. “Incorrect Data in the Widely Used Inside Airbnb Dataset.” Decision Support Systems 141:113453. https://doi.org/10.1016/j.dss.2020.113453.\n\n\nAmoore, L. 2019. “Doubt and the Algorithm: On the Partial Accounts of Machine Learning.” Theory, Culture, Society 36 (6):147–69. https://doi.org/10.1177/0263276419851846.\n\n\nAnderson, C. 2008. “The End of Theory: The Data Deluge Makes the Scientific Method Obsolete.” Wired. https://www.wired.com/2008/06/pb-theory/.\n\n\nArribas-Bel, Daniel. 2014. “Accidental, Open and Everywhere: Emerging Data Sources for the Understanding of Cities.” Applied Geography 49. Elsevier:45–53. https://doi.org/10.1016/j.apgeog.2013.09.012.\n\n\nArribas-Bel, D., and J. Reades. 2018. “Geography and Computers: Past, Present, and Future.” Geography Compass 12 (e12403). https://doi.org/10.1111/gec3.12403.\n\n\nBadger, E., Q. Bui, and R. Gebeloff. 2019. “Neighborhood Is Mostly Black. The Home Buyers Are Mostly White. New York Times.” New York Times. https://www.nytimes.com/interactive/2019/04/27/upshot/diversity-housing-maps-raleigh-gentrification.html.\n\n\nBarron, K., E. Kung, and D. Proserpio. 2018. “The Sharing Economy and Housing Affordability: Evidence from Airbnb.” https://static1.squarespace.com/static/5bb2d447a9ab951efbf6d10a/t/5bea6881562fa7934045a3f0/1542088837594/The+Sharing+Economy+and+Housing+Affordability.pdf.\n\n\nBemt, V. van den, J. Doornbos, L. Meijering, M. Plegt, and N. Theunissen. 2018. “Teaching Ethics When Working with Geocoded Data: A Novel Experiential Learning Approach.” Journal of Geography in Higher Education 42 (2):293–310. https://doi.org/10.1080/03098265.2018.1436534.\n\n\nBrockes, E. 2023. “Airbnb was wild, disruptive and cheap: we loved it. But it wasn’t a love strong enough to last.” The Guardian. https://www.theguardian.com/commentisfree/2023/mar/08/airbnb-wild-disruptive-cheap-lettings-agency.\n\n\nBunday, B. D. n.d. “A Final Tale or You Can Prove Anything with Figures.” https://www.ucl.ac.uk/~ucahhwi/AFinalTale.pdf.\n\n\nBurton, I. 1963. “The Quantitative Revolution and Theoretical Geography.” The Canadian Geographer/Le Géographe Canadien 7 (4):151–62. https://doi.org/10.1111/j.1541-0064.1963.tb00796.x.\n\n\nCheng, M., and C. Foley. 2018. “The Sharing Economy and Digital Discrimination: The Case of Airbnb.” International Journal of Hospitality Management 70:95–98. https://doi.org/10.1016/j.ijhm.2017.11.002.\n\n\nCheng, M., and X. Jin. 2018. “What Do Airbnb Users Care about? An Analysis of Online Review Comment.” International Journal of Hospitality Management, 76 (A):58–70. https://doi.org/10.1016/j.ijhm.2018.04.004.\n\n\nChiang, T. 2023. “ChatGPT Is a Blurry JPEG of the Web.” The New Yorker. https://www.newyorker.com/tech/annals-of-technology/chatgpt-is-a-blurry-jpeg-of-the-web.\n\n\nCima, R. n.d. “The Most and Least Diverse Cities in America.” Priceonomics. https://priceonomics.com/the-most-and-least-diverse-cities-in-america/.\n\n\nClark, J. 2023. “Bidding wars: inside the super-charged fight for rental properties.” The Guardian. https://www.theguardian.com/money/2023/apr/08/bidding-wars-inside-the-super-charged-fight-for-rental-properties.\n\n\nCocola-Gant, A., and A. Gago. 2019. “Airbnb, Buy-to-Let Investment and Tourism-Driven Displacement: A Case Study in Lisbon.” Environment and Planning A: Economy and Space 0 (0):1–18. https://doi.org/10.1177/0308518X19869012.\n\n\nCox, M., and T. Slee. 2016. “How Airbnb’s Data Hid the Facts in New York City.” Inside Airbnb. http://insideairbnb.com/reports/how-airbnbs-data-hid-the-facts-in-new-york-city.pdf.\n\n\nCrawford, K., and M. Finn. 2015. “The Limits of Crisis Data: Analytical and Ethical Challenges of Using Social and Mobile Data to Understand Disasters.” GeoJournal 80 (4):491–502. https://doi.org/10.1007/s10708-014-9597-z.\n\n\nD’Ignazio, Catherine, and Lauren F. Klein. 2020d. “Data Feminism.” In. MIT Press. https://data-feminism.mitpress.mit.edu/.\n\n\n———. 2020c. “Data Feminism.” In. MIT Press. https://data-feminism.mitpress.mit.edu/.\n\n\n———. 2020e. “Data Feminism.” In. MIT Press. https://data-feminism.mitpress.mit.edu/.\n\n\n———. 2020b. “Data Feminism.” In. MIT Press. https://data-feminism.mitpress.mit.edu/.\n\n\n———. 2020a. Data Feminism. MIT Press. https://data-feminism.mitpress.mit.edu/.\n\n\nDark Matter Labs. 2019. “A Smart Commons: A New Model for INvesting in the Commons.” Medium. https://provocations.darkmatterlabs.org/a-smart-commons-528f4e53cec2.\n\n\nDelmelle, Elizabeth C, and Isabelle Nilsson. 2021. “The Language of Neighborhoods: A Predictive-Analytical Framework Based on Property Advertisement Text and Mortgage Lending Data.” Computers, Environment and Urban Systems 88. Elsevier:101658. https://doi.org/10.1016/j.compenvurbsys.2021.101658.\n\n\nDonoho, D. 2017. “50 Years of Data Science.” Journal of Computational and Graphical Statistics 26 (4):745–66. https://doi.org/10.1007/978-3-642-23430-9_71.\n\n\nElwood, S., and A. Leszczynski. 2018. “Feminist Digital Geographies.” Gender, Place and Culture 25 (5):629–44. https://doi.org/10.1080/0966369X.2018.1465396.\n\n\nElwood, S., and M. Wilson. 2017. “Critical GIS Pedagogies Beyond ‘Week 10: Ethics‘.” International Journal of Geographical Information Science 31 (10):2098–2116. https://doi.org/10.1080/13658816.2017.1334892.\n\n\nErt, E., A. Fleischer, and N. Magen. 2016. “Trust and Reputation in the Sharing Economy: The Role of Personal Photos in Airbnb.” Tourism Management, 55:62–63. https://doi.org/10.1016/j.tourman.2016.01.013.\n\n\nEtherington, Thomas R. 2016. “Teaching introductory GIS programming to geographers using an open source Python approach.” Journal of Geography in Higher Education 40 (1). Taylor & Francis:117–30. https://doi.org/10.1080/03098265.2015.1086981.\n\n\nEugenio-Martin, J. L., J. M. Cazorla-Artiles, and C. Gonzàlez-Martel. 2019. “On the Determinants of Airbnb Location and Its Spatial Distribution.” Tourism Economics 25 (8):1224–24. https://doi.org/10.1177/1354816618825415.\n\n\nFerreri, Mara, and Romola Sanyal. 2018. “Platform Economies and Urban Planning: Airbnb and Regulated Deregulation in London.” Urban Studies 55 (15):3353–68. https://doi.org/10.1177/0042098017751982.\n\n\nFitzpatrick, B., and B. Collins-Sussman. n.d. “The Myth of the ’Genius Programmer’.” Google. https://www.youtube.com/watch?v=0SARbwvhupQ.\n\n\nFranklin, Rachel. 2024. “Quantitative methods III: Strength in numbers?” Progress in Human Geography 48 (2). SAGE Publications Sage UK: London, England:236–44. https://doi.org/10.1177/03091325231210512.\n\n\nGibbs, C., D. Guttentag, U. Gretzel, J. Morton, and A. Goodwill. 2017. “Pricing in the Sharing Economy: A Hedonic Pricing Model Applied to Airbnb Listings.” Journal of Travel & Tourism Marketing 35 (1):46–56. https://doi.org/10.1080/10548408.2017.1308292.\n\n\nGraham, P. 2022. “Putting Ideas into Words.” 2022. https://paulgraham.com/words.html.\n\n\nGurran, N., and P. Phibbs. 2017. “When Tourists Move in: How Should Urban Planners Respond to Airbnb?” Journal of the American Planning Association 83 (1):80–92. https://doi.org/10.1080/01944363.2016.1249011.\n\n\nGutiérrez, J., J. C. Garcı́a-Palomares, G. Romanillos, and M. H. Salas-Olmedo. 2017. “The Eruption of Airbnb in Tourist Cities: Comparing Spatial Patterns of Hotels and Peer-to-Peer Accommodation in Barcelona.” Tourism Management 62:278–91. https://doi.org/10.1016/j.tourman.2017.05.003.\n\n\nGuttentag, Daniel A., and Stephen L. J. Smith. 2017. “Assessing Airbnb as a Disruptive Innovation Relative to Hotels: Substitution and Comparative Performance Expectations.” International Journal of Hospitality Management 64:1–10. https://doi.org/10.1016/j.ijhm.2017.02.003.\n\n\nHarris, J. 2018. “Profiteers Make a Killing on Airbnb - and Erode Communities.” The Guardian. https://www.theguardian.com/commentisfree/2018/feb/12/profiteers-killing-airbnb-erode-communities.\n\n\nHarris, R. n.d. “The Certain Uncertainty of University Rankings.” RPubs. https://rpubs.com/profrichharris/uni-rankings.\n\n\nHeaven, W. D. 2022. “Why Meta’s Latest Large Language Model Survived Only Three Days Online.” MIT Technology Review. https://www.technologyreview.com/2022/11/18/1063487/meta-large-language-model-ai-only-survived-three-days-gpt-3-science/.\n\n\nHorn, K., and M. Merante. 2017. “Is Home Sharing Driving up Rents? Evidence from Airbnb in Boston.” Journal of Housing Economics 38:14–24. https://doi.org/10.1016/j.jhe.2017.08.002.\n\n\nIqbal, N., and A. Chakrabortty. 2023. “Why are London’s inner-city schools disappearing?” Edited by A. Bransbury. The Guardian. 2023. https://www.theguardian.com/news/audio/2023/apr/26/why-are-london-schools-disappearing-podcast.\n\n\nJolly, J. 2023. “Owners of 100,000 properties held by foreign shell companies unknown despite new UK laws.” The Guardian. https://www.theguardian.com/business/2023/sep/03/owners-of-100000-properties-held-by-foreign-shell-companies-unknown-despite-new-uk-laws.\n\n\nKitchin, R., T. P. Lauriault, and G. McArdie. 2016. “Smart Cities and the Politics of Urban Data.” In Smart Urbanism, edited by McFarlane Marvin Luque-Ayala.\n\n\nKnuth, D. E. 1984. “Literate Programming.” The Computer Journal 27 (2). Oxford University Press:97–111.\n\n\n———. 1996. Selected Papers on Computer Science. Cambridge University Press.\n\n\nLadd, John R. 2020. “Understanding and Using Common Similarity Measures for Text Analysis.” The Programming Historian, no. 9. https://doi.org/10.46430/phen0089.\n\n\nLansley, Guy. 2016. “Cars and Socio-Economics: Understanding Neighbourhood Variations in Car Characteristics from Administrative Data.” Regional Studies, Regional Science 3 (1). Taylor & Francis:264–85. https://doi.org/10.1080/21681376.2016.1177466.\n\n\nLavin, Matthew J. 2019. “Analyzing Documents with TF-IDF.” The Programming Historian, no. 8. https://doi.org/10.46430/phen0082.\n\n\nLee, D. 2016. “How Airbnb Short-Term Rentals Exacerbate Los Angeles’s Affordable Housing Crisis: Analysis and Policy Recommendations.” Harvard Law & Policy Review 10 (1):229–54. https://doi.org/https://heinonline.org/HOL/Page?handle=hein.journals/harlpolrv10&div=13&g_sent=1.\n\n\nLu, Yonggang, and Kevin SS Henning. 2013. “Are statisticians cold-blooded bosses? a new perspective on the ’old’ concept of statistical population.” Teaching Statistics 35 (1). Wiley Online Library:66–71. https://doi.org/10.1111/j.1467-9639.2012.00524.x.\n\n\nLutz, C., and G. Newlands. 2018. “Consumer Segmentation Within the Sharing Economy: The Case of Airbnb.” Journal of Business Research 88:187–96. https://doi.org/10.1016/j.jbusres.2018.03.019.\n\n\nMa, X., J. T. Hancock, K. L. Mingjie, and M. Naaman. 2017. “Self-Disclosure and Perceived Trustworthiness of Airbnb Host Profiles.” CSCW’17: Proceedings of the 2017 ACM Conference on Computer Supported Cooperative Work and Social Computation, 2397–2409. https://doi.org/10.1145/2998181.2998269.\n\n\nMassey, Doreen. 1996. “Politicising Space and Place.” Scottish Geographical Magazine 112 (2). Routledge:117–23. https://doi.org/10.1080/14702549608554458.\n\n\nMattern, Shannon. 2015. “Mission control: A history of the urban dashboard.” Places Journal. https://doi.org/10.22269/150309.\n\n\n———. 2017. “A City Is Not a Computer.” Places Journal. https://doi.org/10.22269/170207.\n\n\nMcCullough, D. 2002. “Interview with NEH chairman Bruce Cole.” Humanities Magazine.\n\n\nMiller, Harvey J, and Michael F Goodchild. 2015. “Data-Driven Geography.” GeoJournal 80. Springer:449–61. https://doi.org/10.1007/s10708-014-9602-6.\n\n\nMinton, A. 2023. “New York is breaking free of Airbnb’s clutches. This is how the rest of the world can follow suit.” The Guardian. https://www.theguardian.com/commentisfree/2023/sep/27/new-york-airbnb-renters-cities-law-ban-properties.\n\n\nMuller, C. L., and C. Kidd. 2014. “Debugging Geographers: Teaching Programming to Non-Computer Scientists.” Journal of Geography in Higher Education 38 (2). Taylor & Francis:175–92. https://doi.org/10.1080/03098265.2014.908275.\n\n\nNeate, R. 2023. “‘This is where people with staggering wealth end up’: who will buy Britain’s most expensive house?” The Guardian. https://www.theguardian.com/money/2023/apr/08/britain-most-expensive-house-rutland-gate-mansion-london-super-rich-buyer.\n\n\nO’Sullivan, David, and Steven M Manson. 2015. “Do physicists have geography envy? And what can geographers learn from it?” Annals of the Association of American Geographers 105 (4). Taylor & Francis:704–22. https://doi.org/10.1080/00045608.2015.1039105.\n\n\nOpen Data Institute. n.d. “SOD0009 - Evidence on Statistics and Open Data.” https://committees.parliament.uk/writtenevidence/45220/pdf/.\n\n\nPrat, Chantel S, Tara M Madhyastha, Malayka J Mottarella, and Chu-Hsuan Kuo. 2020. “Relating Natural Language Aptitude to Individual Differences in Learning Programming Languages.” Scientific Reports 10 (1). Nature Publishing Group UK London:3817. https://www.nature.com/articles/s41598-020-60661-8.\n\n\nQuattrone, G., A. Greatorex, D. Quercia, L. Capra, and M. Musolesi. 2018. “Analyzing and Predicting the Spatial Penetration of Airbnb in u.s. Cities.” EPJ Data Science 7 (31). https://doi.org/10.1140/epjds/s13688-018-0156-6.\n\n\nQuattrone, Giovanni, Davide Proserpio, Daniele Quercia, Licia Capra, and Mirco Musolesi. 2016. “Who Benefits from the ‘Sharing’ Economy of Airbnb?” In Proceedings of the 25th International Conference on World Wide Web, 1385–94. WWW ’16. Republic; Canton of Geneva, CHE: International World Wide Web Conferences Steering Committee. https://doi.org/10.1145/2872427.2874815.\n\n\nReades, Jonathan, and Jennie Williams. 2023. “Clustering and Visualising Documents Using Word Embeddings.” Programming Historian. https://doi.org/10.46430/phen0111.\n\n\nReades, J., H. Yingjie, Emmanouil Tranos, and E. Delmelle. in review. “The City as Text: Understanding and Modeling Cities through the Lens of Text.” NA, in review.\n\n\nRose, Gillian. 1997. “Situating Knowledges: Positionality, Reflexivities and Other Tactics.” Progress in Human Geography 21 (3):305–20. https://doi.org/10.1191/030913297673302122.\n\n\nScheider, Simon, Enkhbold Nyamsuren, Han Kruiger, and Haiqi Xu. 2020. “Why Geographic Data Science Is Not a Science.” Geography Compass 14 (11). Wiley Online Library:e12537.\n\n\nShabrina, Z., E. Arcaute, and M. Batty. 2019. “Airbnb’s Disruption of the Housing Structure in London.” ArXiv Prepring. University College London. https://arxiv.org/pdf/1903.11205.pdf.\n\n\nShabrina, Z., Y. Zhang, E. Arcaute, and M. Batty. 2017. “Beyond Informality: The Rise of Peer-to-Peer (P2P) Renting.” CASA Working Paper 209. University College London. https://www.ucl.ac.uk/bartlett/casa/case-studies/2017/mar/casa-working-paper-209.\n\n\nShapiro, W., and M. Yavuz. 2017. “Rethinking ’distance’ in New York City.” Medium. https://medium.com/topos-ai/rethinking-distance-in-new-york-city-d17212d24919.\n\n\nSingleton, Alex, and Daniel Arribas-Bel. 2021. “Geographic Data Science.” Geographical Analysis 53 (1):61–75. https://doi.org/10.1111/gean.12194.\n\n\nSmith, D. 2010. “Valuing housing and green spaces: Understanding local amenities, the built environment and house prices in London.” GLA Economics. https://www.centreforlondon.org/wp-content/uploads/2016/08/CFLJ4292-London-Inequality-04_16_WEB_V4.pdf.\n\n\nSthapit, Erose, and Peter Björk. 2019. “Sources of Distrust: Airbnb Guests’ Perspectives.” Tourism Management Perspectives 31:245–53. https://doi.org/10.1016/j.tmp.2019.05.009.\n\n\nStrauß, Stefan. 2015. “Datafication and the Seductive Power of Uncertainty–a Critical Exploration of Big Data Enthusiasm.” Information 6 (4). MDPI:836–47.\n\n\nSusnjara, S., and I. Smalley. 2025. “What Is Virtualization?” 2025. https://www.ibm.com/think/topics/virtualization.\n\n\nTravers, Tony, Sam Sims, and Nicolas Bosetti. 2016. “Housing and Inequality in London.” Centre for London. https://www.centreforlondon.org/wp-content/uploads/2016/08/CFLJ4292-London-Inequality-04_16_WEB_V4.pdf.\n\n\nUnwin, David. 1980. “Make Your Practicals Open-Ended.” Journal of Geography in Higher Education 4 (2). Taylor & Francis:39–42. https://doi.org/10.1080/03098268008708772.\n\n\nVanderPlas, Jake. 2014. “Is Seattle Really Seeing an Uptick in Cycling?” http://jakevdp.github.io/blog/2014/06/10/is-seattle-really-seeing-an-uptick-in-cycling/.\n\n\nWachsmuth, D., D. Chaney, D. Kerrigan, A. Shillolo, and R. Basalaev-Binder. 2018. “The High Cost of Short-Term Rentals in New York City.” McGill University. https://www.mcgill.ca/newsroom/files/newsroom/channels/attach/airbnb-report.pdf.\n\n\nWachsmuth, D., and A. Weisler. 2018. “Airbnb and the Rent Gap: Gentrification Through the Sharing Economy.” Environment and Planning A: Economy and Space 50 (6):1147–70. https://doi.org/10.1177/0308518X18778038.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (1):160018. https://doi.org/10.1038/sdata.2016.18.\n\n\nWolf, Levi John, Sean Fox, Rich Harris, Ron Johnston, Kelvyn Jones, David Manley, Emmanouil Tranos, and Wenfei Winnie Wang. 2021. “Quantitative Geography III: Future Challenges and Challenging Futures.” Progress in Human Geography 45 (3). SAGE Publications Sage UK: London, England:596–608. https://doi.org/10.1177/0309132520924722.\n\n\nWolfe, C. R. 2023b. “Program-Aided Language Models.” https://cameronrwolfe.substack.com/p/chain-of-thought-prompting-for-llms.\n\n\n———. 2023a. “Program-Aided Language Models.” https://medium.com/data-science/program-aided-language-models-93d226c7d9a0.\n\n\nXiao, Ningchuan. 2016. GIS Algorithms: Theory and Applications for Geographic Information Science & Technology. Research Methods. SAGE. https://doi.org/https://dx.doi.org/10.4135/9781473921498.\n\n\nXie, Tessa. 2024a. “How to Better Communicate as a Data Scientist.” Towards Data Science. https://www.divingintodata.com/p/how-to-better-communicate-as-a-data-scientist-6fc5428d3143.\n\n\n———. 2024c. “The Most Undervalued Skill for Data Scientists.” 2024. https://towardsdatascience.com/the-most-undervalued-skill-for-data-scientists-e0e0d7709321/.\n\n\n———. 2024b. “The Most Undervalued Skill for Data Scientists.” Towards Data Science. https://towardsdatascience.com/the-most-undervalued-skill-for-data-scientists-e0e0d7709321.\n\n\nZemanek, H. 1983. “Algorithmic Perfection.” Annals of the History of Computing. AMER FED INFORM PROCESSING SOC.\n\n\nZervas, Georgios, Davide Proserpio, and John W Byers. 2021. “A First Look at Online Reputation on Airbnb, Where Every Stay Is Above Average.” Marketing Letters 32. Springer:1–16.\n\n\nZervas, G., D. Proserpio, and J. Byers. 2015. “A First Look at Online Reputation on Airbnb, Where Every Stay Is Above Average.” SSRN. https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2554500."
  },
  {
    "objectID": "bib/Template.html",
    "href": "bib/Template.html",
    "title": "Summary of Reading",
    "section": "",
    "text": "Is it an academic paper, technical report, blogpost, etc.? And what kind of contribution is trying to make? Conceptual, theoretical, empirical or something else?"
  },
  {
    "objectID": "bib/Template.html#what-kind-of-reading-is-it",
    "href": "bib/Template.html#what-kind-of-reading-is-it",
    "title": "Summary of Reading",
    "section": "",
    "text": "Is it an academic paper, technical report, blogpost, etc.? And what kind of contribution is trying to make? Conceptual, theoretical, empirical or something else?"
  },
  {
    "objectID": "bib/Template.html#who-is-the-intended-audience",
    "href": "bib/Template.html#who-is-the-intended-audience",
    "title": "Summary of Reading",
    "section": "2 Who is the intended audience?",
    "text": "2 Who is the intended audience?\n\nIs it intended for academics, field experts, the general public? etc.? For example, if you think this is intended for someone who needs to learn new skills or someone who is in a policy-making position how do you know this?"
  },
  {
    "objectID": "bib/Template.html#how-is-the-piece-structured",
    "href": "bib/Template.html#how-is-the-piece-structured",
    "title": "Summary of Reading",
    "section": "3 How is the piece structured?",
    "text": "3 How is the piece structured?\n\nBriefly, how is it organised in terms of headings, sub-headings, sections, etc.? Can you explain this structure responds to the kind of reading and type of audience?"
  },
  {
    "objectID": "bib/Template.html#what-are-the-key-ideas-concepts-or-theories-discussed",
    "href": "bib/Template.html#what-are-the-key-ideas-concepts-or-theories-discussed",
    "title": "Summary of Reading",
    "section": "4 What are the key ideas, concepts, or theories discussed?",
    "text": "4 What are the key ideas, concepts, or theories discussed?\n\nBriefly identify the specific areas that the contribution engages with. How do you know this?"
  },
  {
    "objectID": "bib/Template.html#what-is-the-overall-contribution",
    "href": "bib/Template.html#what-is-the-overall-contribution",
    "title": "Summary of Reading",
    "section": "5 What is the overall contribution?",
    "text": "5 What is the overall contribution?\n\nWhat does it build on or what gap does it respond to? What are the key findings or conclusions?"
  },
  {
    "objectID": "bib/Template.html#what-issues-or-gaps-remain",
    "href": "bib/Template.html#what-issues-or-gaps-remain",
    "title": "Summary of Reading",
    "section": "6 What issues or gaps remain?",
    "text": "6 What issues or gaps remain?\n\nIf relevant, are there assumptions that might not hold in other contexts? Can you think of other case studies or contexts where the reading would apply and explain why? If you think the contribution is generally valid can you explain why? Are there areas for future work identified?"
  },
  {
    "objectID": "lectures/1.1-the_week.html#useful-information",
    "href": "lectures/1.1-the_week.html#useful-information",
    "title": "The Week Ahead",
    "section": "Useful Information",
    "text": "Useful Information\nAll of the content will remain available to you after our workshop:\n\nThe main micro-site: jreades.github.io/jaipur/ – talks, applied sessions, and some suggested readings.\nA quick introduction to Python: jreades.github.io/code-camp/ – 12 self-paced sessions focussing on the basics of Python.\n\nThere are plenty of other resources online (Khan Academy, MIT Open Courseware, etc, etc) if you want to go further. And, of course, our Urban Spatial Science MSc and Connected Environments MSc."
  },
  {
    "objectID": "lectures/1.1-the_week.html#what-are-we-trying-to-do",
    "href": "lectures/1.1-the_week.html#what-are-we-trying-to-do",
    "title": "The Week Ahead",
    "section": "What Are We Trying to Do?",
    "text": "What Are We Trying to Do?\nThis workshop hopes to achieve four things:\n\nTo expose you to the power of spatial analysis in Python.\nTo expose you to a set of tools that support reproducible analysis.\nTo (hopefully) convince you that going further with this is worth your time.\nTo signpost resources that will support further learning.\n\nThis knowledge is intended to be transferrable."
  },
  {
    "objectID": "lectures/1.1-the_week.html#the-challenges",
    "href": "lectures/1.1-the_week.html#the-challenges",
    "title": "The Week Ahead",
    "section": "The Challenges",
    "text": "The Challenges\n\nTo learn a bit of programming and to connect it to the bigger picture.\nTo be ok with learning to walk before you run.\nTo learn not to rely (too much) on ChatGPT.\nTo communicate your thoughts through code and text.\n\n\nThis is a new one for us too. We don’t want to pretend that ChatGPT doesn’t exist. It’s how you will do your work. Unquestionably. But it is also a trap. This year we’re hoping to show you that."
  },
  {
    "objectID": "lectures/1.1-the_week.html#the-rewards",
    "href": "lectures/1.1-the_week.html#the-rewards",
    "title": "The Week Ahead",
    "section": "The Rewards",
    "text": "The Rewards\n\nSkills that are highly transferrable and highly sought-after professionally.\nProblem-solving and practical skills that are valued by the private and public sectors.\nA whole new way of seeing the world and interacting with it.\nLots of support along the way… if you remember to ask for it!"
  },
  {
    "objectID": "lectures/1.1-the_week.html#study-aids",
    "href": "lectures/1.1-the_week.html#study-aids",
    "title": "The Week Ahead",
    "section": "Study Aids",
    "text": "Study Aids\nWhen you need an answer right now:\n\nGoogle\nStack Overflow\nSlack\n\nWhen you want to learn more:\n\nMedium\nPocket\n\n\nGoogle will become more useful as you learn more and this is definitely one class in which “I Googled it” is a good answer.\nAs of early September 2020, Stack Overflow contains over 1.5 million Python questions alone! Chances are someone else has had your question before.\nWhere’s ChatGPT in this? We’ll get to that!"
  },
  {
    "objectID": "lectures/1.1-the_week.html#before-you-ask-for-help",
    "href": "lectures/1.1-the_week.html#before-you-ask-for-help",
    "title": "The Week Ahead",
    "section": "Before You Ask for Help",
    "text": "Before You Ask for Help\nFrom the Computer Science Wiki:\n\nDraw a picture of the problem\nExplain the problem to a toy or inanimate object (really!)\nForget about a computer; how would you solve this with a pencil and paper?\nTalk it through out loud\nExplain the problem to a friend\n\nTo which we would add:\n\nUse print(variable) statements liberally in your code!\n\n\nWe’ll cover this last bit as we get more used to coding!"
  },
  {
    "objectID": "lectures/1.1-the_week.html#when-to-ask-for-help",
    "href": "lectures/1.1-the_week.html#when-to-ask-for-help",
    "title": "The Week Ahead",
    "section": "When to Ask for Help",
    "text": "When to Ask for Help\n\nWhen you get warning messages from your computer’s Operating System.\nWhen you cannot get the coding environment to run at all.\nWhen even simple commands return line after line of error code.\nWhen you have no clue what is going on or why.\nWhen you have been wrestling with a coding question for more than 20 minutes (but see: How to Ask for Help!)\n\n\nIn order to learn you do need to struggle, but only up to a point! So we don’t think that giving you the answer to a coding question as soon as you get stuck is a good way for you to learn. At the same time, I remain sad to this day that one of the most insightful students I’ve ever taught in a lecture context dropped out of our module because they were having trouble with their computer and thought it was their fault nothing was working right. By we had realised what was going on it was too late: they were so far behind that they didn’t feel able to catch up. We’d rather that you asked and we said “Close, but try it again” than you didn’t ask and checked out thinking that you couldn’t ‘do’ programming."
  },
  {
    "objectID": "lectures/1.1-the_week.html#how-to-ask-for-help",
    "href": "lectures/1.1-the_week.html#how-to-ask-for-help",
    "title": "The Week Ahead",
    "section": "How to Ask for Help",
    "text": "How to Ask for Help\nIn addition to what we have provided, we like the “How to ask programming questions” page provided by ProPublica:\n\nDo some research first.\nBe specific.\nRepeat.\nDocument and share.\n\nIf you find yourself wanting to ask a question on Stack Exchange then they also have a guide, and there are plenty of checklists.\n\nThere’s also useful ideas on how to get help that covers things like ‘how to get a reply from your Prof’ and ‘where to look for help’."
  },
  {
    "objectID": "lectures/1.1-the_week.html#why-use-them",
    "href": "lectures/1.1-the_week.html#why-use-them",
    "title": "The Week Ahead",
    "section": "Why Use Them?",
    "text": "Why Use Them?\nMany programmers use LLMs as part of their coding for three reasons:\n\nThey can help to spot bugs, redundancy, and other issues that impact the performance of large applications (i.e. feedback).\nThey can provide information about different libraries and strategies the developer can use, as well as completing code begun by the developer (i.e. guidance or training).\nThey can help to ‘translate’ code and design patterns between languages (i.e. re-use).\n\nThis is very much a ‘brave new world’ and we are all trying to figure it out on the fly."
  },
  {
    "objectID": "lectures/1.1-the_week.html#how-to-use-them",
    "href": "lectures/1.1-the_week.html#how-to-use-them",
    "title": "The Week Ahead",
    "section": "How to Use THem",
    "text": "How to Use THem\nLLMs like ChatGPT can help you to learn to be a better coder by providing guidance and feedback:\n\nUse AI like a patient, but scatty tutor.\nAsk it to explain. Then ask it again.\nAlways test its suggestions against reality and logic.\n\n\n\n\n\n\n\nLLMs as co-authors\n\n\nUsing ChatGPT as your co-pilot is not the same as using ChatGPT as your co-author."
  },
  {
    "objectID": "lectures/1.1-the_week.html#how-not-to-use-them",
    "href": "lectures/1.1-the_week.html#how-not-to-use-them",
    "title": "The Week Ahead",
    "section": "How (Not) to Use Them",
    "text": "How (Not) to Use Them\nHere’s what we’ve noticed so far:\n\nDon’t delegate learning to the LLM, it doesn’t work.\nDon’t let it write paragraphs for you because LLMs like flowery language (e.g. ‘intricate methodologies’, ‘exhaustive reviews’, …).\nDon’t expect LLMs to come up with an argument for you because they strugle with structure/coherence.\nDon’t expect LLMs to get the details right (they don’t ‘like’ referencing!)."
  },
  {
    "objectID": "lectures/1.1-the_week.html#read-the-fine-print",
    "href": "lectures/1.1-the_week.html#read-the-fine-print",
    "title": "The Week Ahead",
    "section": "Read the Fine Print",
    "text": "Read the Fine Print"
  },
  {
    "objectID": "lectures/1.1-the_week.html#own-your-mistakes",
    "href": "lectures/1.1-the_week.html#own-your-mistakes",
    "title": "The Week Ahead",
    "section": "Own Your Mistakes",
    "text": "Own Your Mistakes"
  },
  {
    "objectID": "lectures/1.1-the_week.html#so-study-like-youre-learning-a-new-language.-recognise-you-are-all-starting-at-different-levels.-talk-to-other-students.-ask-for-help-when-you-need-it",
    "href": "lectures/1.1-the_week.html#so-study-like-youre-learning-a-new-language.-recognise-you-are-all-starting-at-different-levels.-talk-to-other-students.-ask-for-help-when-you-need-it",
    "title": "The Week Ahead",
    "section": "So… Study like you’re learning a new language. Recognise you are all starting at different levels. Talk to other students. Ask for help when you need it!1",
    "text": "So… Study like you’re learning a new language. Recognise you are all starting at different levels. Talk to other students. Ask for help when you need it!1\n\nSo… we do hope to convince you that:\n\nAnyone—and this includes you—can code.\nLearning to code does not require mathematical ability.\nLearning to code does not require linguistic ability.\nLearning to code does require practice. And more practice. And more again.\n\n\nDon’t take my word for it, Prat et al. (2020) in Nature link language learning to programming language learning!"
  },
  {
    "objectID": "lectures/1.1-the_week.html#one-more-thing",
    "href": "lectures/1.1-the_week.html#one-more-thing",
    "title": "The Week Ahead",
    "section": "One More Thing…",
    "text": "One More Thing…\n\n\nYou will get things wrong.\nWe will get things wrong.\nWe will assume that you are trying your best.\nPlease assume the same about us!\nIt’s going to be messy, but we’re really excited about it!"
  },
  {
    "objectID": "lectures/1.1-the_week.html#references",
    "href": "lectures/1.1-the_week.html#references",
    "title": "The Week Ahead",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\nChiang, T. 2023. “ChatGPT Is a Blurry JPEG of the Web.” The New Yorker. https://www.newyorker.com/tech/annals-of-technology/chatgpt-is-a-blurry-jpeg-of-the-web.\n\n\nHeaven, W. D. 2022. “Why Meta’s Latest Large Language Model Survived Only Three Days Online.” MIT Technology Review. https://www.technologyreview.com/2022/11/18/1063487/meta-large-language-model-ai-only-survived-three-days-gpt-3-science/.\n\n\nPrat, Chantel S, Tara M Madhyastha, Malayka J Mottarella, and Chu-Hsuan Kuo. 2020. “Relating Natural Language Aptitude to Individual Differences in Learning Programming Languages.” Scientific Reports 10 (1). Nature Publishing Group UK London:3817. https://www.nature.com/articles/s41598-020-60661-8.\n\n\nWolfe, C. R. 2023b. “Program-Aided Language Models.” https://cameronrwolfe.substack.com/p/chain-of-thought-prompting-for-llms.\n\n\n———. 2023a. “Program-Aided Language Models.” https://medium.com/data-science/program-aided-language-models-93d226c7d9a0."
  },
  {
    "objectID": "lectures/1.3-principles.html#how-is-open-source-helpful",
    "href": "lectures/1.3-principles.html#how-is-open-source-helpful",
    "title": "Our Principles",
    "section": "How is Open Source Helpful?",
    "text": "How is Open Source Helpful?\n\n\nIf you can think of it, someone has probably built it.\nGiven enough eyeballs all bugs are shallow.1\n‘Free as in speech’ (always).\n‘Free as in beer’ (often).2\n\n\n\nAll of the tools used this week are open source and free.\n\n\nBy this I mean that, if you use Microsoft to do everything then you are dependent on their tools, even when they aren’t appropriate. There are many small, open source applications that do really useful but narrow things.\nWhen you have many people involved and they are working in an open environment then issues are often spotted spotted and solved more quickly. While this claim is open to some debate, there’s certainly no evidence that closed source code is any better than open source.\nA more interesting claim has to do with the potential for interested people to get involved in making code better – for instance, for some languages there may be very few translators available, leading private companies to simply ignore localisation; whereas for open source you can contribute the translation yourself! Or if you really think something isn’t working the way it should then you can offer up a solution that will make it better and, if the people running the project don’t agree, you can still do it and launch your own, competing project.\nFinally, many (though by no means all) open source projects are also free as free food, beer, or rides. If you have been taught to use ESRI’s ArcGIS or Microsoft Excel this seems crazy: how can you have free competition to those? Well, why not give QGIS and LibreOffice a try!\n\n\n\nAlso known as Linus’ law via Eric Raymond’s The Cathedral and the Bazaar.Or chai, thalis, etc."
  },
  {
    "objectID": "lectures/1.3-principles.html#fair-play",
    "href": "lectures/1.3-principles.html#fair-play",
    "title": "Our Principles",
    "section": "FAIR Play",
    "text": "FAIR Play\nWilkinson et al. (2016) set out the following principles:\n\n\nFindable: data and metadata should be easy to find for computers and humans.\nAccessible: it should be clear how the data found can be accessed.\nInteroperable: data should work for range of analyses, storage, and processing needs.1\nReusable: metadata and data should be well-described so they can be used/combined easily.\n\n\n\nThere are strict and loose versions of these principles. Many governments truggle with the ‘R’ part because of licensing restrictions.\n\nShape files fail this test."
  },
  {
    "objectID": "lectures/1.3-principles.html#how-is-open-data-helpful",
    "href": "lectures/1.3-principles.html#how-is-open-data-helpful",
    "title": "Our Principles",
    "section": "How is Open Data Helpful?",
    "text": "How is Open Data Helpful?\nAccording to Open Data Institute (n.d.) (amongst others):\n\n\nPromotes transparency and accountability in government and services.\nPromotes efficiency and service delivery.\nPromotes innovation and economic growth.\nEmpowers citizens.\nReduces costs.\n\n\n\nOpen data is valuable!\n\n\nThis can be scary for many, especially those in government; however, making data open can help to debunk conspiracies and demonstrate that government is not corrupt! It can also help government to spot where there are problems.\nWe get increased efficiency and better service delivery if governments can look across departments or states to compare performance or enable others to turn up opportunities for improvement.\nCompanies can innovate off of government data: Land Registry and EPC data in the UK, for instance, give companies certainty that they won’t have to pay for this data and can build commercial products using it. The biggest gain here is in making government mapping data available.\nThere’s a strong assumption here that citizens are data literate, which I think doesn’t always hold; however, crime mapping, bus route mapping, and so on can help citizens to advocate for resources and support.\nGovernments can also save by not having to constantly respond to FOI requests or rebut other access requests from citizens and companies."
  },
  {
    "objectID": "lectures/1.3-principles.html#how-is-open-code-helpful",
    "href": "lectures/1.3-principles.html#how-is-open-code-helpful",
    "title": "Our Principles",
    "section": "How is Open Code Helpful?",
    "text": "How is Open Code Helpful?\n\n\nAllow others to build on your work (reuse, collaboration).\nAllow others to learn from your work (speed, bug detection).\nA way to attract contributors to your project (visibility, collaboration).\nA mechanism for perpetuating a potlatch ecosystem (community building, recognition, visibility).1\n\n\n\nThere are many ways to share code, including contributing questions and answers to public fora like Stack Overflow,\n\nWhere ‘knowledge is power’, not ‘power is right’."
  },
  {
    "objectID": "lectures/1.3-principles.html#references",
    "href": "lectures/1.3-principles.html#references",
    "title": "Our Principles",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\nOpen Data Institute. n.d. “SOD0009 - Evidence on Statistics and Open Data.” https://committees.parliament.uk/writtenevidence/45220/pdf/.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (1):160018. https://doi.org/10.1038/sdata.2016.18."
  },
  {
    "objectID": "lectures/2.1-Mapping.html#two-cultures-of-mapping",
    "href": "lectures/2.1-Mapping.html#two-cultures-of-mapping",
    "title": "Think Maps",
    "section": "Two Cultures of Mapping",
    "text": "Two Cultures of Mapping\n\n\nPurely Computational\nBoth analysis and visualisation are accomplished via code:\n\nFully replicable (including random samples).\nFully documented (to extent commented by dev).\nFully portable (assuming no platform-specific code).\n\n\nMostly Computational\nOnly the analysis is accomplished via code, visualisation is via a GIS:\n\nWider variety of output formats (e.g. Atlases, 3D/web).\nBetter support for ‘finishing touches’ (e.g. scalebars, north arrows, rule-based labels, etc.).\nBetter-quality output for less effort (e.g. Model Builder + QGIS styles).\n\n\n\nWorth reflecting on pros and cons of these: when does one offer benefits over the other?"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#the-challenge",
    "href": "lectures/2.1-Mapping.html#the-challenge",
    "title": "Think Maps",
    "section": "The Challenge",
    "text": "The Challenge\nThe hardest part of purely computational approaches is the need to anticipate how maps will look according to variations in:\n\nThe density and type of data\nThe context of the data\nThe different scales involved\nThe number of maps involved\nThe need to annotate and label elements\n\nUltimately, the complexity of the choices here may require the use of a scriptable GIS over ggplot or matplotlib.\n\nDon’t forget that both QGIS and Arc offer a ‘Model Builder’ that is basically ‘visual programming’."
  },
  {
    "objectID": "lectures/2.1-Mapping.html#constituency-cards",
    "href": "lectures/2.1-Mapping.html#constituency-cards",
    "title": "Think Maps",
    "section": "Constituency Cards",
    "text": "Constituency Cards\nConstituency cards are ‘scripted’ in QGIS:\n  \nSource: github.com/alasdairrae/wpc"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#short-term-lets-in-scotland",
    "href": "lectures/2.1-Mapping.html#short-term-lets-in-scotland",
    "title": "Think Maps",
    "section": "Short-Term Lets in Scotland",
    "text": "Short-Term Lets in Scotland\nAnalysis of Airbnb and other short-term lets in Scotland feeding through into policy-making via Research into the impact of short-term lets on communities across Scotland"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#every-building-in-america",
    "href": "lectures/2.1-Mapping.html#every-building-in-america",
    "title": "Think Maps",
    "section": "Every Building in America",
    "text": "Every Building in America\nBuilding footprints collected by Microsoft, but presentation by New York Times highlights society-nature interactions."
  },
  {
    "objectID": "lectures/2.1-Mapping.html#a-deceptively-simple-problem",
    "href": "lectures/2.1-Mapping.html#a-deceptively-simple-problem",
    "title": "Think Maps",
    "section": "A Deceptively Simple Problem",
    "text": "A Deceptively Simple Problem\n\nWe want to show data on a map in a way that is both accurate and informative.\n\nWhy might this not be possible?"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#classification",
    "href": "lectures/2.1-Mapping.html#classification",
    "title": "Think Maps",
    "section": "Classification",
    "text": "Classification\nTrade-offs:\n\nThe greater the accuracy of a choropleth or other class-based map, the less it’s possible generalise from it.\nThere is no ‘right’ way to group data into an arbitrary number of discrete classes (a.k.a. to generalise).\n\nHumans can only take in so much data at once. Your choice of colour scheme, breaks, and classification can profoundly affect how people see the world."
  },
  {
    "objectID": "lectures/2.1-Mapping.html#six-views-of-employment",
    "href": "lectures/2.1-Mapping.html#six-views-of-employment",
    "title": "Think Maps",
    "section": "Six Views of Employment",
    "text": "Six Views of Employment\n\n\n\n\n\nNo Class Breaks\n\n\n\n\n\n\n3 Quantiles"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#six-views-of-employment-1",
    "href": "lectures/2.1-Mapping.html#six-views-of-employment-1",
    "title": "Think Maps",
    "section": "Six Views of Employment",
    "text": "Six Views of Employment\n\n\n\n\n\n7 Quantiles\n\n\n\n\n\n\n7 Equal Interval"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#six-views-of-employment-2",
    "href": "lectures/2.1-Mapping.html#six-views-of-employment-2",
    "title": "Think Maps",
    "section": "Six Views of Employment",
    "text": "Six Views of Employment\n\n\n\n\n\n7 Pretty Breaks\n\n\n\n\n\n\n7 Natural Breaks"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#consider",
    "href": "lectures/2.1-Mapping.html#consider",
    "title": "Think Maps",
    "section": "Consider",
    "text": "Consider\nWe want to:\n\nGroup features with similar values together.\nShow these in a way that doesn’t mislead the viewer.\n\nBut we have the following problems:\n\nToo many classes confuse the viewer.\nToo few classes hides structure/pattern."
  },
  {
    "objectID": "lectures/2.1-Mapping.html#choices-choices",
    "href": "lectures/2.1-Mapping.html#choices-choices",
    "title": "Think Maps",
    "section": "Choices, Choices",
    "text": "Choices, Choices\nAt the very least we have the following options:\n\nAssign classes manually.\nSplit range evenly (i.e. equal intervals).\nSplit data evenly (i.e. quantiles).\nSplit data according to distribution (i.e. SD).\nSplit data so that members of each group are more similar to each other than to members of another group (i.e. natural breaks/Jencks)."
  },
  {
    "objectID": "lectures/2.1-Mapping.html#takeaway-maps-have-a-rhetoric",
    "href": "lectures/2.1-Mapping.html#takeaway-maps-have-a-rhetoric",
    "title": "Think Maps",
    "section": "Takeaway: Maps have a ‘Rhetoric’",
    "text": "Takeaway: Maps have a ‘Rhetoric’"
  },
  {
    "objectID": "lectures/2.1-Mapping.html#resources",
    "href": "lectures/2.1-Mapping.html#resources",
    "title": "Think Maps",
    "section": "Resources",
    "text": "Resources\n\nQGIS Styles to Share\nQGIS and 3D Visualisation\nModelling your data processing flow in QGIS\nQGIS Documentation\nWorking with Spatial Data in Python\nWeb Mapping Notes"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#why-pandas",
    "href": "lectures/2.3-Numeric_Data.html#why-pandas",
    "title": "Pandas",
    "section": "Why Pandas?",
    "text": "Why Pandas?\nPandas is probably (together with scipy, numpy, and sklearn) the main reason that Python has become popular for data science. According to ‘Learn Data Sci’ it accounts for 1% of all Stack Overflow question views!\nYou will want to bookmark these:\n\npandas.pydata.org\nPandas Docs\npandas tutorial for beginners"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#pandas-terminology-data-frame",
    "href": "lectures/2.3-Numeric_Data.html#pandas-terminology-data-frame",
    "title": "Pandas",
    "section": "Pandas Terminology (Data Frame)",
    "text": "Pandas Terminology (Data Frame)"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#pandas-terminology-index",
    "href": "lectures/2.3-Numeric_Data.html#pandas-terminology-index",
    "title": "Pandas",
    "section": "Pandas Terminology (Index)",
    "text": "Pandas Terminology (Index)"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#pandas-terminology-series",
    "href": "lectures/2.3-Numeric_Data.html#pandas-terminology-series",
    "title": "Pandas",
    "section": "Pandas Terminology (Series)",
    "text": "Pandas Terminology (Series)"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#pandas-terminology-slice",
    "href": "lectures/2.3-Numeric_Data.html#pandas-terminology-slice",
    "title": "Pandas",
    "section": "Pandas Terminology (Slice)",
    "text": "Pandas Terminology (Slice)"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#using-pandas",
    "href": "lectures/2.3-Numeric_Data.html#using-pandas",
    "title": "Pandas",
    "section": "Using Pandas",
    "text": "Using Pandas\nHere’s code to read a (remote) CSV file:\nimport pandas as pd         # import package\nurl='https://orca.casa.ucl.ac.uk/~jreades/jaipur/population.csv.gz'\ndf = pd.read_csv(url)       # load a (remote) CSV\nprint(type(df))             # not a 'simple' data type\nprint(df.columns.to_list()) # column names\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\n['State', 'District', 'Subdistt', 'Town/Village', 'Ward', 'EB', 'Level', 'Name', 'TRU', 'No_HH', 'TOT_P', 'TOT_M', 'TOT_F', 'P_06', 'M_06', 'F_06', 'P_SC', 'M_SC', 'F_SC', 'P_ST', 'M_ST', 'F_ST', 'P_LIT', 'M_LIT', 'F_LIT', 'P_ILL', 'M_ILL', 'F_ILL', 'TOT_WORK_P', 'TOT_WORK_M', 'TOT_WORK_F', 'MAINWORK_P', 'MAINWORK_M', 'MAINWORK_F', 'MAIN_CL_P', 'MAIN_CL_M', 'MAIN_CL_F', 'MAIN_AL_P', 'MAIN_AL_M', 'MAIN_AL_F', 'MAIN_HH_P', 'MAIN_HH_M', 'MAIN_HH_F', 'MAIN_OT_P', 'MAIN_OT_M', 'MAIN_OT_F', 'MARGWORK_P', 'MARGWORK_M', 'MARGWORK_F', 'MARG_CL_P', 'MARG_CL_M', 'MARG_CL_F', 'MARG_AL_P', 'MARG_AL_M', 'MARG_AL_F', 'MARG_HH_P', 'MARG_HH_M', 'MARG_HH_F', 'MARG_OT_P', 'MARG_OT_M', 'MARG_OT_F', 'MARGWORK_3_6_P', 'MARGWORK_3_6_M', 'MARGWORK_3_6_F', 'MARG_CL_3_6_P', 'MARG_CL_3_6_M', 'MARG_CL_3_6_F', 'MARG_AL_3_6_P', 'MARG_AL_3_6_M', 'MARG_AL_3_6_F', 'MARG_HH_3_6_P', 'MARG_HH_3_6_M', 'MARG_HH_3_6_F', 'MARG_OT_3_6_P', 'MARG_OT_3_6_M', 'MARG_OT_3_6_F', 'MARGWORK_0_3_P', 'MARGWORK_0_3_M', 'MARGWORK_0_3_F', 'MARG_CL_0_3_P', 'MARG_CL_0_3_M', 'MARG_CL_0_3_F', 'MARG_AL_0_3_P', 'MARG_AL_0_3_M', 'MARG_AL_0_3_F', 'MARG_HH_0_3_P', 'MARG_HH_0_3_M', 'MARG_HH_0_3_F', 'MARG_OT_0_3_P', 'MARG_OT_0_3_M', 'MARG_OT_0_3_F', 'NON_WORK_P', 'NON_WORK_M', 'NON_WORK_F']"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#summarise-a-data-frame",
    "href": "lectures/2.3-Numeric_Data.html#summarise-a-data-frame",
    "title": "Pandas",
    "section": "Summarise a Data Frame",
    "text": "Summarise a Data Frame\n\n\nStatistical summarisation.\n\ndf.describe()\n\n\n\n\n\n\n\n\nState\nDistrict\nSubdistt\nTown/Village\nWard\nEB\nNo_HH\nTOT_P\nTOT_M\nTOT_F\n...\nMARG_AL_0_3_F\nMARG_HH_0_3_P\nMARG_HH_0_3_M\nMARG_HH_0_3_F\nMARG_OT_0_3_P\nMARG_OT_0_3_M\nMARG_OT_0_3_F\nNON_WORK_P\nNON_WORK_M\nNON_WORK_F\n\n\n\n\ncount\n2561.0\n2561.0\n2561.000000\n2561.000000\n2561.000000\n2561.0\n2.561000e+03\n2.561000e+03\n2.561000e+03\n2.561000e+03\n...\n2561.000000\n2561.000000\n2561.000000\n2561.000000\n2561.000000\n2561.000000\n2561.000000\n2.561000e+03\n2.561000e+03\n2.561000e+03\n\n\nmean\n8.0\n110.0\n543.976962\n169642.691527\n2.311207\n0.0\n2.561084e+03\n1.430145e+04\n7.489366e+03\n6.812087e+03\n...\n13.509567\n8.444748\n3.001171\n5.443577\n66.545881\n27.736431\n38.809449\n9.049970e+03\n3.776792e+03\n5.273178e+03\n\n\nstd\n0.0\n0.0\n19.015389\n239933.613990\n8.628916\n0.0\n3.293322e+04\n1.815688e+05\n9.511259e+04\n8.645723e+04\n...\n189.164285\n106.745661\n38.197017\n69.027967\n851.119683\n350.089056\n516.492442\n1.158499e+05\n4.771246e+04\n6.835303e+04\n\n\nmin\n8.0\n110.0\n0.000000\n0.000000\n0.000000\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000e+00\n0.000000e+00\n0.000000e+00\n\n\n25%\n8.0\n110.0\n542.000000\n79596.000000\n0.000000\n0.0\n9.500000e+01\n6.010000e+02\n3.100000e+02\n2.870000e+02\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n3.120000e+02\n1.570000e+02\n1.520000e+02\n\n\n50%\n8.0\n110.0\n545.000000\n80236.000000\n0.000000\n0.0\n1.700000e+02\n1.064000e+03\n5.530000e+02\n5.120000e+02\n...\n0.000000\n0.000000\n0.000000\n0.000000\n2.000000\n1.000000\n1.000000\n6.050000e+02\n2.870000e+02\n3.110000e+02\n\n\n75%\n8.0\n110.0\n548.000000\n80873.000000\n0.000000\n0.0\n3.170000e+02\n1.934000e+03\n1.010000e+03\n9.200000e+02\n...\n2.000000\n1.000000\n0.000000\n0.000000\n11.000000\n4.000000\n6.000000\n1.148000e+03\n5.280000e+02\n6.230000e+02\n\n\nmax\n8.0\n110.0\n550.000000\n800523.000000\n77.000000\n0.0\n1.177096e+06\n6.626178e+06\n3.468507e+06\n3.157671e+06\n...\n6775.000000\n4002.000000\n1405.000000\n2597.000000\n32114.000000\n13016.000000\n19098.000000\n4.161285e+06\n1.753560e+06\n2.407725e+06\n\n\n\n\n8 rows × 91 columns\n\n\n\n\nData types and memory usage.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 2561 entries, 0 to 2560\nData columns (total 94 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   State           2561 non-null   int64 \n 1   District        2561 non-null   int64 \n 2   Subdistt        2561 non-null   int64 \n 3   Town/Village    2561 non-null   int64 \n 4   Ward            2561 non-null   int64 \n 5   EB              2561 non-null   int64 \n 6   Level           2561 non-null   object\n 7   Name            2561 non-null   object\n 8   TRU             2561 non-null   object\n 9   No_HH           2561 non-null   int64 \n 10  TOT_P           2561 non-null   int64 \n 11  TOT_M           2561 non-null   int64 \n 12  TOT_F           2561 non-null   int64 \n 13  P_06            2561 non-null   int64 \n 14  M_06            2561 non-null   int64 \n 15  F_06            2561 non-null   int64 \n 16  P_SC            2561 non-null   int64 \n 17  M_SC            2561 non-null   int64 \n 18  F_SC            2561 non-null   int64 \n 19  P_ST            2561 non-null   int64 \n 20  M_ST            2561 non-null   int64 \n 21  F_ST            2561 non-null   int64 \n 22  P_LIT           2561 non-null   int64 \n 23  M_LIT           2561 non-null   int64 \n 24  F_LIT           2561 non-null   int64 \n 25  P_ILL           2561 non-null   int64 \n 26  M_ILL           2561 non-null   int64 \n 27  F_ILL           2561 non-null   int64 \n 28  TOT_WORK_P      2561 non-null   int64 \n 29  TOT_WORK_M      2561 non-null   int64 \n 30  TOT_WORK_F      2561 non-null   int64 \n 31  MAINWORK_P      2561 non-null   int64 \n 32  MAINWORK_M      2561 non-null   int64 \n 33  MAINWORK_F      2561 non-null   int64 \n 34  MAIN_CL_P       2561 non-null   int64 \n 35  MAIN_CL_M       2561 non-null   int64 \n 36  MAIN_CL_F       2561 non-null   int64 \n 37  MAIN_AL_P       2561 non-null   int64 \n 38  MAIN_AL_M       2561 non-null   int64 \n 39  MAIN_AL_F       2561 non-null   int64 \n 40  MAIN_HH_P       2561 non-null   int64 \n 41  MAIN_HH_M       2561 non-null   int64 \n 42  MAIN_HH_F       2561 non-null   int64 \n 43  MAIN_OT_P       2561 non-null   int64 \n 44  MAIN_OT_M       2561 non-null   int64 \n 45  MAIN_OT_F       2561 non-null   int64 \n 46  MARGWORK_P      2561 non-null   int64 \n 47  MARGWORK_M      2561 non-null   int64 \n 48  MARGWORK_F      2561 non-null   int64 \n 49  MARG_CL_P       2561 non-null   int64 \n 50  MARG_CL_M       2561 non-null   int64 \n 51  MARG_CL_F       2561 non-null   int64 \n 52  MARG_AL_P       2561 non-null   int64 \n 53  MARG_AL_M       2561 non-null   int64 \n 54  MARG_AL_F       2561 non-null   int64 \n 55  MARG_HH_P       2561 non-null   int64 \n 56  MARG_HH_M       2561 non-null   int64 \n 57  MARG_HH_F       2561 non-null   int64 \n 58  MARG_OT_P       2561 non-null   int64 \n 59  MARG_OT_M       2561 non-null   int64 \n 60  MARG_OT_F       2561 non-null   int64 \n 61  MARGWORK_3_6_P  2561 non-null   int64 \n 62  MARGWORK_3_6_M  2561 non-null   int64 \n 63  MARGWORK_3_6_F  2561 non-null   int64 \n 64  MARG_CL_3_6_P   2561 non-null   int64 \n 65  MARG_CL_3_6_M   2561 non-null   int64 \n 66  MARG_CL_3_6_F   2561 non-null   int64 \n 67  MARG_AL_3_6_P   2561 non-null   int64 \n 68  MARG_AL_3_6_M   2561 non-null   int64 \n 69  MARG_AL_3_6_F   2561 non-null   int64 \n 70  MARG_HH_3_6_P   2561 non-null   int64 \n 71  MARG_HH_3_6_M   2561 non-null   int64 \n 72  MARG_HH_3_6_F   2561 non-null   int64 \n 73  MARG_OT_3_6_P   2561 non-null   int64 \n 74  MARG_OT_3_6_M   2561 non-null   int64 \n 75  MARG_OT_3_6_F   2561 non-null   int64 \n 76  MARGWORK_0_3_P  2561 non-null   int64 \n 77  MARGWORK_0_3_M  2561 non-null   int64 \n 78  MARGWORK_0_3_F  2561 non-null   int64 \n 79  MARG_CL_0_3_P   2561 non-null   int64 \n 80  MARG_CL_0_3_M   2561 non-null   int64 \n 81  MARG_CL_0_3_F   2561 non-null   int64 \n 82  MARG_AL_0_3_P   2561 non-null   int64 \n 83  MARG_AL_0_3_M   2561 non-null   int64 \n 84  MARG_AL_0_3_F   2561 non-null   int64 \n 85  MARG_HH_0_3_P   2561 non-null   int64 \n 86  MARG_HH_0_3_M   2561 non-null   int64 \n 87  MARG_HH_0_3_F   2561 non-null   int64 \n 88  MARG_OT_0_3_P   2561 non-null   int64 \n 89  MARG_OT_0_3_M   2561 non-null   int64 \n 90  MARG_OT_0_3_F   2561 non-null   int64 \n 91  NON_WORK_P      2561 non-null   int64 \n 92  NON_WORK_M      2561 non-null   int64 \n 93  NON_WORK_F      2561 non-null   int64 \ndtypes: int64(91), object(3)\nmemory usage: 1.8+ MB"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#accessing-a-series",
    "href": "lectures/2.3-Numeric_Data.html#accessing-a-series",
    "title": "Pandas",
    "section": "Accessing a Series",
    "text": "Accessing a Series\n\nprint(type(df['State']))            # data type for a column\nprint(f\"1: {df['TOT_P'].mean()}\")   # summarise a series/column\nprint(f\"2: {df.TOT_P.mean():0.2f}\") # if no spaces in name\n\n&lt;class 'pandas.core.series.Series'&gt;\n1: 14301.45294806716\n2: 14301.45\n\n\n\nNotice that we’ve got two ways of accessing a pandas Series:\n\nThe dictionary-like way: df['Latitude']; this works for all columns, always.\nThe method-like way: df.Latitude; this works for ‘reading’ columns without spaces in their names."
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#jupyter-formatting",
    "href": "lectures/2.3-Numeric_Data.html#jupyter-formatting",
    "title": "Pandas",
    "section": "Jupyter Formatting",
    "text": "Jupyter Formatting\nPandas is also ‘Jupyter-aware’, meaning that output can displayed directly in Jupyter and Quarto in ‘fancy’ ways:\n\ndf[['District','TOT_F','F_SC','NON_WORK_M']].sample(5)\n\n\n\n\n\n\n\n\nDistrict\nTOT_F\nF_SC\nNON_WORK_M\n\n\n\n\n2191\n110\n285\n135\n157\n\n\n1829\n110\n252\n4\n134\n\n\n566\n110\n740\n18\n439\n\n\n2393\n110\n885\n196\n454\n\n\n1092\n110\n371\n0\n221"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#nosing-around",
    "href": "lectures/2.3-Numeric_Data.html#nosing-around",
    "title": "Pandas",
    "section": "Nosing Around",
    "text": "Nosing Around\ndf.head(3)                       # First 3 rows of df\ndf[['TOT_F','F_SC']].tail(3)     # Last 3 rows of selected columns\ndf.sample(frac=0.3)              # A random 30% sample\ndf.sample(3, random_state=42)    # A random sample of 3 with a seed\ndf.sample(3, random_state=42)    # Same sample!\n\nHead and tail are used on the Command Line. Random sampling with seeds is covered in my talk on Randomness. We’ve even got Lists of Lists, which is a really basic data structure!"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#data-frames-vs-series",
    "href": "lectures/2.3-Numeric_Data.html#data-frames-vs-series",
    "title": "Pandas",
    "section": "Data Frames vs Series",
    "text": "Data Frames vs Series\nPandas operates on two principles:\n\nAny operation on a Data Frame returns a Data Frame.\nAny operation on a Series returns a Series.\n\n\nWe’ll see in a moment why this is useful!"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#putting-these-ideas-together",
    "href": "lectures/2.3-Numeric_Data.html#putting-these-ideas-together",
    "title": "Pandas",
    "section": "Putting These Ideas Together",
    "text": "Putting These Ideas Together\n\n# Returns a series\nprint(type(df.TOT_F - 1))\n# Saves returned series as a new column\ndf['smaller'] = df.TOT_F - 1\nprint(df[['TOT_F','smaller']].head(3))\n# Returns a new data frame w/o the dropped column \nprint(type(df.drop(columns=['smaller'])))\n\n&lt;class 'pandas.core.series.Series'&gt;\n     TOT_F  smaller\n0  3157671  3157670\n1  1511407  1511406\n2  1646264  1646263\n&lt;class 'pandas.core.frame.DataFrame'&gt;"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#chaining",
    "href": "lectures/2.3-Numeric_Data.html#chaining",
    "title": "Pandas",
    "section": "Chaining",
    "text": "Chaining\nOperations on a Data Frame return a DataFrame and operations on a Series return a Series, allowing us to ‘chain’ steps together:\n\ndf.sort_values(by=['TOT_P','TOT_M'], ascending=False).head(20).sample(frac=0.5).median(numeric_only=True)\n\nState                 8.0\nDistrict            110.0\nSubdistt            545.5\nTown/Village          0.0\nWard                  0.0\n                   ...   \nMARG_OT_0_3_F      1140.5\nNON_WORK_P       268462.0\nNON_WORK_M       121100.0\nNON_WORK_F       147362.0\nsmaller          205513.0\nLength: 92, dtype: float64"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#selection",
    "href": "lectures/2.3-Numeric_Data.html#selection",
    "title": "Pandas",
    "section": "Selection",
    "text": "Selection\n# Returns a selection (Boolean series)\ndf['TOT_P']&gt;5000\n# Data frame of records matching selection\ndf[ df['TOT_P']&gt;5000 ]\n\n# Calculations on a slice (returns mean centroid!)\ndf[df['TOT_P']&gt;5000][['TOT_M','TOT_F']].mean()\nYou can link several conditions using & (and) and | (or).\n# Two conditions with a bit-wise AND\ndf[\n  (df['TOT_P']&gt;5000) & (df['TOT_F']&gt;5000)\n]"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#dealing-with-types",
    "href": "lectures/2.3-Numeric_Data.html#dealing-with-types",
    "title": "Pandas",
    "section": "Dealing with Types",
    "text": "Dealing with Types\nA Data Series can only be of one type:\n\n\n\n\n\n\n\n\nPandas Dtype\nPython Type\nUsage\n\n\n\n\nobject\nstr or mixed\nText or mixed columns (including arrays)\n\n\nint64\nint\nInteger columns\n\n\nfloat64\nfloat\nFloating point columns\n\n\nbool\nbool\nTrue/False columns\n\n\ndatetime64\nN/A (datetime)\nDate and time columns\n\n\ntimedelta[ns]\nN/A (datetime)\nDatetime difference columns\n\n\ncategory\nN/A (set)\nCategorical columns"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#changing-the-type",
    "href": "lectures/2.3-Numeric_Data.html#changing-the-type",
    "title": "Pandas",
    "section": "Changing the Type",
    "text": "Changing the Type\n\nprint(f\"Unique values: {df['TRU'].unique()}\")   # Find unique values\nprint(f\"Data type is: {df['TRU'].dtype.name}\")  # Confirm is 'object'\ndf['TRU'] = df['TRU'].astype('category')\nprint(f\"Data type now: {df['TRU'].dtype.name}\") # Confirm is 'category'\nprint(df['TRU'].describe()) # Category column info\n\nUnique values: ['Total' 'Rural' 'Urban']\nData type is: object\nData type now: category\ncount      2561\nunique        3\ntop       Rural\nfreq       2194\nName: TRU, dtype: object"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#tidying-up",
    "href": "lectures/2.3-Numeric_Data.html#tidying-up",
    "title": "Pandas",
    "section": "Tidying Up",
    "text": "Tidying Up\nThis is one way, there are many options and subtleties…\n\n# Fix categories\nmapping = {}\n\n# df['Primary Type'].unique().to_list() also works\nfor x in df['TRU'].cat.categories.to_list():\n  mapping[x]=x.lower()\n\n# And update\ndf['TRU'] = df['TRU'].cat.rename_categories(mapping)\n\nHow would you work out what this code does? 1\nThere are at least two ways: 1) print out mapping; 2) before running the code comment out the ‘update’ line and print out x and x.title(); 3) search for title python."
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#dealing-with-money",
    "href": "lectures/2.3-Numeric_Data.html#dealing-with-money",
    "title": "Pandas",
    "section": "Dealing with Money",
    "text": "Dealing with Money\nYou may encounter currency treated as a string, instead of a number. Normally, this is because of the way that the data is formatted (e.g. ‘₹1.5 lakh’) To deal with pricing information treated as a string:\n# You would need a function to deal with lakh and crore\ndf['price'].str.replace('₹','').str.\\\n            replace(',','').astype(float)\nMany more examples accessible via Google!\n\nAnother thing you might notice here: adding .cat allows us to access category methods for the Series; adding .str allows us to access string methods for the Series."
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#dropping-rows-and-columns",
    "href": "lectures/2.3-Numeric_Data.html#dropping-rows-and-columns",
    "title": "Pandas",
    "section": "Dropping Rows and Columns",
    "text": "Dropping Rows and Columns\nThere are multiple ways to drop ‘stuff’:\n\ndf2 = df.copy()\nprint(f\"The data frame has {df2.shape[0]:,} rows and {df2.shape[1]:,} cols.\")\ndf2.drop(index=range(5,1000), inplace=True) # Row 'numbers' or index values\nprint(f\"The data frame has {df2.shape[0]:,} rows and {df2.shape[1]:,} cols.\")\ndf2.drop(columns=['TOT_P'], inplace=True)   # Column name(s)\nprint(f\"The data frame has {df2.shape[0]:,} rows and {df2.shape[1]:,} cols.\")\n\nThe data frame has 2,561 rows and 95 cols.\nThe data frame has 1,566 rows and 95 cols.\nThe data frame has 1,566 rows and 94 cols.\n\n\n\nWhy might you want the default to not be in_place?\nThere is also df.dropna() which can apply to rows or columns with NULL or np.nan values."
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#accessing-data-by-location",
    "href": "lectures/2.3-Numeric_Data.html#accessing-data-by-location",
    "title": "Pandas",
    "section": "Accessing Data by Location",
    "text": "Accessing Data by Location\nWe can interact with rows and columns by position or name:\n\ndf.iloc[0:2,0:4] # Position\n\n\n\n\n\n\n\n\nState\nDistrict\nSubdistt\nTown/Village\n\n\n\n\n0\n8\n110\n0\n0\n\n\n1\n8\n110\n0\n0\n\n\n\n\n\n\n\n\ndf.loc[0:2,'State':'Town/Village'] # Dict selection\n\n\n\n\n\n\n\n\nState\nDistrict\nSubdistt\nTown/Village\n\n\n\n\n0\n8\n110\n0\n0\n\n\n1\n8\n110\n0\n0\n\n\n2\n8\n110\n0\n0\n\n\n\n\n\n\n\nThese actually return different results because of the index:\n\ndf.loc returns rows and columns by label\ndf.iloc returns rows and columns by location"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#indexes",
    "href": "lectures/2.3-Numeric_Data.html#indexes",
    "title": "Pandas",
    "section": "Indexes",
    "text": "Indexes\nSo by default, pandas creates a row index index whose values are 0..n and column index whose values are the column names. You will see this if you select a sample:\n\ndf.sample(2, random_state=42)[['State','District','Subdistt','Town/Village']]\n\n\n\n\n\n\n\n\nState\nDistrict\nSubdistt\nTown/Village\n\n\n\n\n2157\n8\n110\n549\n80816\n\n\n1738\n8\n110\n547\n80408\n\n\n\n\n\n\n\nThe left-most column is the index. So Name is now the index and is no longer a column: notice that the number of columns has changed.\n\ndf.set_index('Name', inplace=True)\ndf.sample(2, random_state=42)[['State','District','Subdistt','Town/Village']]\n\n\n\n\n\n\n\n\nState\nDistrict\nSubdistt\nTown/Village\n\n\nName\n\n\n\n\n\n\n\n\nKishanpura\n8\n110\n549\n80816\n\n\nDaulatpura\n8\n110\n547\n80408"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#indexes-contd-1",
    "href": "lectures/2.3-Numeric_Data.html#indexes-contd-1",
    "title": "Pandas",
    "section": "Indexes (cont’d 1)",
    "text": "Indexes (cont’d 1)\nSo now we can pull the data for a single ward like this:\n\ndf.loc['Jaipur (M Corp.) (Part) WARD NO.-0002',:]\n\nState                 8\nDistrict            110\nSubdistt            546\nTown/Village     800522\nWard                  2\n                  ...  \nMARG_OT_0_3_F        59\nNON_WORK_P        45438\nNON_WORK_M        17962\nNON_WORK_F        27476\nsmaller           30317\nName: Jaipur (M Corp.) (Part) WARD NO.-0002, Length: 94, dtype: object"
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#indexes-contd-2",
    "href": "lectures/2.3-Numeric_Data.html#indexes-contd-2",
    "title": "Pandas",
    "section": "Indexes (cont’d 2)",
    "text": "Indexes (cont’d 2)\nAnd we can pull data for a range of wards like this:\n\ndf.loc['Jaipur (M Corp.) (Part) WARD NO.-0002':'Jaipur (M Corp.) (Part) WARD NO.-0004',\n  'TOT_P':'F_06']\n\n\n\n\n\n\n\n\nTOT_P\nTOT_M\nTOT_F\nP_06\nM_06\nF_06\n\n\nName\n\n\n\n\n\n\n\n\n\n\nJaipur (M Corp.) (Part) WARD NO.-0002\n65260\n34942\n30318\n8296\n4597\n3699\n\n\nJaipur (M Corp.) (Part) WARD NO.-0003\n39281\n21036\n18245\n4944\n2661\n2283\n\n\nJaipur (M Corp.) (Part) WARD NO.-0004\n40485\n21147\n19338\n5086\n2771\n2315\n\n\n\n\n\n\n\nMnemonic: we used iloc to select rows/cols based on integer location and we use loc to select rows/cols based on name location.\nP.S. You can reset the data frame using df.reset_index(inplace=True)."
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#saving",
    "href": "lectures/2.3-Numeric_Data.html#saving",
    "title": "Pandas",
    "section": "Saving",
    "text": "Saving\nPandas can write to a wide range of file types, including:\n\n\n\nCommand\nSaved As…\n\n\n\n\ndf.to_csv(&lt;path&gt;)\nCSV file. But note the options to change sep (default is ',') and to suppress index output (index=False).\n\n\ndf.to_excel(&lt;path&gt;)\nXLSX file. But note the options to specify a sheet_name, na_rep, and so on, as well as to suppress the index (index=False).\n\n\ndf.to_parquet(&lt;path&gt;)\nDirectly usable by many languages. Requires pyarrow to be installed to access the options.\n\n\ndf.to_latex(&lt;path&gt;))\nWrite a LaTeX-formatted table to a file. Display requires booktabs. Could do copy+paste with print(df.to_latex()).\n\n\ndf.to_markdown(&lt;path&gt;)\nWrite a Markdown-formatted table to a file. Requires tabulate. Could do copy+paste with print(df.to_markdown()).\n\n\n\nIn most cases compression is detected automatically (e.g. df.to_csv('file.csv.gz')) but you can also specify it (e.g. df.to_csv('file.csv.gz', compression='gzip')).1\nFor instance, a bit.ly link to a Gzipped file requires compression='gzip' because there’s nothing in the link itself to tell Pandas what to expect."
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#shallow-copies",
    "href": "lectures/2.3-Numeric_Data.html#shallow-copies",
    "title": "Pandas",
    "section": "‘Shallow’ Copies",
    "text": "‘Shallow’ Copies\nMore subtly, operations on a Series or Data Frame return a shallow copy, which is like a ‘view’ in a database…\n\nThe original is unchanged unless you specify inplace=True (where supported).\nAttempts to change a subset of the data frame will often trigger a SettingWithCopyWarning warning.\n\nIf you need a full copy then use the copy() method (e.g. df.copy() or df.Series.copy()).\n\n\nDataQuest has a nice overview of how SettingWithCopyWarning is triggered and what to do about it."
  },
  {
    "objectID": "lectures/2.3-Numeric_Data.html#resources",
    "href": "lectures/2.3-Numeric_Data.html#resources",
    "title": "Pandas",
    "section": "Resources",
    "text": "Resources\n\nData Cleaning with Numpy and Pandas\nPandas dtypes\nThe Index Explained\nUsing Pandas iloc\nA Clear Explanation of the Pandas Index\nUfuncs and Apply"
  },
  {
    "objectID": "lectures/3.1-Lists.html#whats-in-a-list",
    "href": "lectures/3.1-Lists.html#whats-in-a-list",
    "title": "Lists",
    "section": "What’s in a List?",
    "text": "What’s in a List?\nIn the same way that a paper shopping list holds many ‘types’ of shopping in one place, a Python list holds many ‘types’ of data in one place.\nmyList = [1, 3, 5, 7]     # homogenous list\nmyList = [1, \"dog\", 7.01] # heterogenous list \nmyList = []               # empty list\nPython lists are always recognisable by their “square brackets”: [...]"
  },
  {
    "objectID": "lectures/3.1-Lists.html#whats-in-a-list-part-2",
    "href": "lectures/3.1-Lists.html#whats-in-a-list-part-2",
    "title": "Lists",
    "section": "What’s in a List? (Part 2)",
    "text": "What’s in a List? (Part 2)\nIn fact, when I say lists can hold many types of data, I should have said that they can hold any type of data:\nx = 3\ny = \"Foo\"\nz = [\"A\", \"list\", 42]\n\na = [x, y, z] # Holds x, y, *and* list z\nThe output of print(a) is:\n[3, 'Foo', ['A', 'list', 42]]\n\nWe’re going to come back to this a lot later, but for now notice that a list can hold lists!"
  },
  {
    "objectID": "lectures/3.1-Lists.html#using-list-indexes",
    "href": "lectures/3.1-Lists.html#using-list-indexes",
    "title": "Lists",
    "section": "Using List Indexes",
    "text": "Using List Indexes\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\nLists are ‘indexed’ numerically from the zero-th element:\n\n\n\n\n\n\n\n\n\n\ngeographers [\n0\n1\n2\n]\n\n\n\n\n\nMassey 1\nHarvey 2\nRose 3\n\n\n\n\nprint(geographers[1]) # Harvey\nprint(geographers[2]) # Rose\nprint(geographers[3]) # Error: List index out of range\n\nAnd notice this error: Python tells you waht the problem is. The issue is understanding what the message means if you don’t know the vocabulary.\n\nhttps://en.wikipedia.org/wiki/Doreen_Massey_(geographer)https://en.wikipedia.org/wiki/David_Harveyhttps://en.wikipedia.org/wiki/Gillian_Rose_(geographer)"
  },
  {
    "objectID": "lectures/3.1-Lists.html#interpolation",
    "href": "lectures/3.1-Lists.html#interpolation",
    "title": "Lists",
    "section": "Interpolation",
    "text": "Interpolation\nWe can also use variables as list indexes:\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\ni = 0\nprint(geographers[i]) # Massey\nAnything that evaluates (i.e. resolves) to a number can be used as an index:\ni = 1\nprint(geographers[i+1]) # Rose\nprint(geographers[ (i-2+1)*2 ]) # Massey"
  },
  {
    "objectID": "lectures/3.1-Lists.html#countdown",
    "href": "lectures/3.1-Lists.html#countdown",
    "title": "Lists",
    "section": "Countdown!",
    "text": "Countdown!\nWe can ‘count’ backwards from the end of the list using negative numbers:\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\nprint( geographers[-1] ) # Rose\nprint( geographers[-2] ) # Harvey"
  },
  {
    "objectID": "lectures/3.1-Lists.html#does-not-compute",
    "href": "lectures/3.1-Lists.html#does-not-compute",
    "title": "Lists",
    "section": "Does Not Compute!",
    "text": "Does Not Compute!\nErrors can be scary… but informative!\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\nprint( geographers[4] )\n\nIndexError: list index out of range\n\nAnd then try:\nprint( geographers[1.25] )\n\nTypeError: list indices must be integers or slices, not float\n\nNotice that Python gives us important hints about the source of the problem!"
  },
  {
    "objectID": "lectures/3.1-Lists.html#slicing-dicing-lists",
    "href": "lectures/3.1-Lists.html#slicing-dicing-lists",
    "title": "Lists",
    "section": "Slicing & Dicing Lists",
    "text": "Slicing & Dicing Lists\nYou can access more than one element at a time using a slice:\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\nprint( geographers[0:2] ) # ['Massey','Harvey']\nprint( geographers[1:] )  # ['Harvey', 'Rose']\nprint( geographers[-2:] ) # ['Harvey', 'Rose']\nThe syntax for a slice is: list[ &lt;start_idx&gt;, &lt;end_idx&gt; ], but end_idx is not included in the slice. And notice:\nprint( geographers[1:2] ) # ['Harvey']\nprint( geographers[1] )   #   Harvey\n\nIt’s really subtle, but notice that a slice always returns a list, even if it’s just a list containing one thing. So geographers[1]=='Harvey' but geographers[1:2]==['Harvey']. Not the same thing!"
  },
  {
    "objectID": "lectures/3.1-Lists.html#test-yourself",
    "href": "lectures/3.1-Lists.html#test-yourself",
    "title": "Lists",
    "section": "Test Yourself",
    "text": "Test Yourself\nWhat do you think this will produce?\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\ni = 2\nprint( geographers[ (i-3)**2-4:-1 ] )\nSee if you can work out in your head before typing it!"
  },
  {
    "objectID": "lectures/3.1-Lists.html#wheres-wally",
    "href": "lectures/3.1-Lists.html#wheres-wally",
    "title": "Lists",
    "section": "Where’s Wally?",
    "text": "Where’s Wally?\nlist.index(...) tells you where something can be found in a list:\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\ngeographers.index(\"Harvey\") # 1\ngeographers.index(\"Massey\") # 0\nCombining ideas that will become very useful later:\nprint(geographers[ geographers.index(\"Massey\") ])\nWhat do you think this prints? Why does it work at all?\n\nThis last example looks a little strange, but what if I had a separate list with first names, or Wikipedia links, or other information about these geographers? Because list.index(x) returns an integer we can use it as an index for accessing another list."
  },
  {
    "objectID": "lectures/3.1-Lists.html#wheres-wally-part-2",
    "href": "lectures/3.1-Lists.html#wheres-wally-part-2",
    "title": "Lists",
    "section": "Where’s Wally (Part 2)",
    "text": "Where’s Wally (Part 2)\nlist.index(...) has one flaw:\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\ngeographers.index('Batty')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: 'Batty' is not in list\nIf ‘throwing an error’ is overkill, then here’s another way:\nif 'Batty' in geographers:\n    print(\"Found Mike!\")\nelse:\n    print(\"Not a geographer!\")"
  },
  {
    "objectID": "lectures/3.1-Lists.html#sorting",
    "href": "lectures/3.1-Lists.html#sorting",
    "title": "Lists",
    "section": "Sorting",
    "text": "Sorting\nWe can sort lists in alpha-numerical order:\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\ngeographers.sort()\nprint(geographers) # ['Harvey', 'Massey', 'Rose']\nAnd we can reverse-sort too:\ngeographers.sort(reverse=True)\nprint(geographers) # ['Rose', 'Massey', 'Harvey']"
  },
  {
    "objectID": "lectures/3.1-Lists.html#lists-are-mutable",
    "href": "lectures/3.1-Lists.html#lists-are-mutable",
    "title": "Lists",
    "section": "Lists are Mutable",
    "text": "Lists are Mutable\nMutable == “liable or subject to change or alteration”\nLet’s replace Rose with Jefferson1 in the list.\ngeographers = [\"Massey\", \"Harvey\", \"Rose\"]\ngeographers[2] = \"Jefferson\"\nprint(geographers) # ['Massey','Harvey','Jefferson']\nthe-women-cartographers-who-mapped-art-and-science-in-the-20th-century"
  },
  {
    "objectID": "lectures/3.1-Lists.html#addingremoving-items",
    "href": "lectures/3.1-Lists.html#addingremoving-items",
    "title": "Lists",
    "section": "Adding/Removing Items",
    "text": "Adding/Removing Items\nWhen we insert() items into, or pop() items out of, a list we normally need to specify the index.\ngeographers = [\"Massey\", \"Harvey\", \"Jefferson\"]\ngeographers.insert(0,\"von Humboldt\")\nprint(geographers) \n# ['von Humboldt', 'Massey', 'Harvey', 'Jefferson']\ngeographers.insert(3,\"von Humboldt\")\nprint(geographers) \n# ['von Humboldt', 'Massey', 'Harvey', 'von Humboldt', 'Jefferson']\nAnd in ‘reverse’:\ngeographers.pop(3) # 'von Humboldt'\nprint(geographers) \n# ['von Humboldt', 'Massey', 'Harvey', 'Jefferson']\n\nNotice also that insert modifies the list and returns nothing, while pop modifies the list and returns the value that you ‘popped’."
  },
  {
    "objectID": "lectures/3.1-Lists.html#test-yourself-1",
    "href": "lectures/3.1-Lists.html#test-yourself-1",
    "title": "Lists",
    "section": "Test Yourself",
    "text": "Test Yourself\nThere are two ways to remove David Harvey from the list of geographers without writing this:\ngeographers = ['von Humboldt', 'Massey', 'Harvey', 'Jefferson']\ngeographers.pop(2) # Do not use this answer!\n\nYou can adapt an example we saw earlier in ‘Finding Things’.\nYou can use Google to see if there are list operations we’ve not covered.\n\n\nHints: remove and del are both options for 2."
  },
  {
    "objectID": "lectures/3.1-Lists.html#concatenating",
    "href": "lectures/3.1-Lists.html#concatenating",
    "title": "Lists",
    "section": "Concatenating",
    "text": "Concatenating\nWe combine lists using addition:\nfemale_geographers = ['Rose','Valentine','Massey','Jefferson']\nmale_geographers = ['Von Humboldt','Harvey','Hägerstrand']\nall_geographers = female_geographers + male_geographers\nprint(all_geographers)    # ['Rose', ..., 'Hägerstrand']\nprint(all_geographers[0]) # Rose"
  },
  {
    "objectID": "lectures/3.1-Lists.html#appending",
    "href": "lectures/3.1-Lists.html#appending",
    "title": "Lists",
    "section": "Appending",
    "text": "Appending\nNote that this is not the same!\nfemale_geographers = ['Rose','Valentine','Massey','Jefferson']\nmale_geographers   = ['Von Humboldt','Harvey','Hägerstrand']\nall_geographers = []\nall_geographers.append(female_geographers)\n all_geographers.append(male_geographers)\nprint(all_geographers) # [['Rose',...], [..., 'Hägerstrand']]\nprint(all_geographers[0]) # ['Rose', ..., 'Jefferson']\nWhat do you think has happened here?"
  },
  {
    "objectID": "lectures/3.1-Lists.html#test-yourself-2",
    "href": "lectures/3.1-Lists.html#test-yourself-2",
    "title": "Lists",
    "section": "Test Yourself",
    "text": "Test Yourself\nmale_geographers = ['Von Humboldt','Harvey','Hägerstrand']\nmale_geographers.append('Batty')\nprint(male_geographers)\nWhat do you think this will produce? And why do you think that append appears to do something different in these two examples?"
  },
  {
    "objectID": "lectures/3.1-Lists.html#how-many-geographers-do-i-know",
    "href": "lectures/3.1-Lists.html#how-many-geographers-do-i-know",
    "title": "Lists",
    "section": "How many geographers do I know?",
    "text": "How many geographers do I know?\nlen(...) gives you the length of ‘countable’ things:\ngeographers = [\"Massey\",\"Harvey\",\"Rose\"]\nlen(geographers) # 3\nBut…\nfemale_geographers = ['Rose','Valentine','Massey','Jefferson']\nmale_geographers = ['Von Humboldt','Harvey','Hägerstrand']\nall_geographers = []\nall_geographers.append(female_geographers)\nall_geographers.append(male_geographers)\nprint( len(all_geographers) ) # 2"
  },
  {
    "objectID": "lectures/3.1-Lists.html#whos-on-the-list",
    "href": "lectures/3.1-Lists.html#whos-on-the-list",
    "title": "Lists",
    "section": "Who’s on the List?",
    "text": "Who’s on the List?\ngeographers = [\"Massey\",\"Harvey\",\"Rose\"]\nprint(\"Massey\" in geographers) # True\nprint(\"Batty\" in geographers)  # False\nBut…\ngeographers.index('Batty')\nis a ValueError that causes your Python code to fail.\n\nWhy might you choose one of these over the other?"
  },
  {
    "objectID": "lectures/3.1-Lists.html#test-yourself-3",
    "href": "lectures/3.1-Lists.html#test-yourself-3",
    "title": "Lists",
    "section": "Test Yourself",
    "text": "Test Yourself\nHow would you change this code:\ngeographers = [\"Massey\",\"Harvey\",\"Rose\"]\nprint(\"Massey\" in geographers)\nprint(\"Batty\" in geographers)\nSo that it prints:\nFalse\nTrue\nYou will have seen the answer to this in Code Camp, but you can also Google it†!\n\n\n† I’d suggest looking first at Stack Overflow answers in most cases."
  },
  {
    "objectID": "lectures/3.1-Lists.html#tuples-not-actually-a-list",
    "href": "lectures/3.1-Lists.html#tuples-not-actually-a-list",
    "title": "Lists",
    "section": "Tuples: Not Actually a List",
    "text": "Tuples: Not Actually a List\nBecause they come up a lot in geo-data, it’s worth knowing about tuples, which are basically immutable lists:\nt = (52.124021, -0.0012012)\nprint(type(t)) # &lt;class 'tuple'&gt;\nprint(t)       # (52.124021, -0.0012012)\nprint(t[0])    # 52.124021\nBut this…\nt[0] = 25.1203210\nwill throw an error:\n\nTypeError: ‘tuple’ object does not support item assignment"
  },
  {
    "objectID": "lectures/3.1-Lists.html#resources",
    "href": "lectures/3.1-Lists.html#resources",
    "title": "Lists",
    "section": "Resources",
    "text": "Resources\n\nLists in Python\nTuples in Python\nRange and lists\nSequence types\nThe Complete Guide to Lists (by a CASA alum!)"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#so-key---value",
    "href": "lectures/3.3-Dictionaries.html#so-key---value",
    "title": "Dictionaries",
    "section": "So: Key -> Value",
    "text": "So: Key -&gt; Value\nThe key can be almost anything that is immutable (aka. hashable). So these are all ‘legit’:\nlookup[1]             # Int\nlookup(52.1)          # Float\nlookup['1']           # String\nlookup['Jon Reades']  # String\nk = 'Jon Reades'\nlookup[k]             # String variable\nlookup[(52.1, -0.04)] # Tuple\nBut this is not:\nlookup[['Jon','Reades']] # Error, unhashable type\nThat’s because a list is not immutable.\n\nAgain, just like a real dictionary: you don’t have multiple entries for ‘dog’, otherwise the dictionary wouldn’t work. You might have multiple definitions: which is to say, the key might return multiple values."
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#deliberately-similar",
    "href": "lectures/3.3-Dictionaries.html#deliberately-similar",
    "title": "Dictionaries",
    "section": "Deliberately Similar",
    "text": "Deliberately Similar\nNotice the differences when creating them, and the absence of difference when accessing them.\n\n\nList\ncities = [\n  'San Francisco',\n  'London',\n  'Paris',\n  'Beijing']\n  \n# Prints London\nprint(cities[2]) \n\nDict\ncities = {\n  'San Francisco': 837442,\n  'London': 8673713,\n  'Paris': 837442,\n  'Beijing': '0.17'00000}\n\n# Prints pop of London\nprint(cities['London'])\n\n\nSo why might we prefer the dictionary?\n\nDicts are created using: d = { key: value, key: value }\nDicts are accessed using: d[key]\n\nSo the only difference between lists and dicts is: [...] and {...} when they are created.\nOver the next couple of weeks we’ll see ways that you can store more information in a list and also why lists are sometimes more powerful than you realise… if you can think about your data in an entirely new way. But for simple key/value stuff it’s hard to beat a dictionary!"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#its-all-about-access",
    "href": "lectures/3.3-Dictionaries.html#its-all-about-access",
    "title": "Dictionaries",
    "section": "It’s All About Access",
    "text": "It’s All About Access\nSpecifically: do we need sequential or random access?\n\n\nList\n\n\n\nindex\nvalue\n\n\n\n\n0\nSan Francisco\n\n\n1\nLondon\n\n\n2\nParis\n\n\n3\nBeijing\n\n\n\n\nDict\n\n\n\nkey\nvalue\n\n\n\n\nSan Francisco\n837442\n\n\nLondon\n8673713\n\n\nParis\n2229621\n\n\nBeijing\n21700000"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#getting-values",
    "href": "lectures/3.3-Dictionaries.html#getting-values",
    "title": "Dictionaries",
    "section": "Getting Values",
    "text": "Getting Values\nThere are two ways to retrieve values from a dictionary:\n\ncities['Beijing']\ncities.get('Beijing')\n\nWhy have two? Consider:\ncities = {\n  'San Francisco': 837442,\n  'London': 8673713,\n  'Paris': 837442,\n  'Beijing': '0.17'00000}\n\nprint(cities['Sao Paulo'])     # Throws KeyError\nprint(cities.get('Sao Paulo')) # Returns None\nprint(cities.get('Sao Paulo','No Data')) # Returns 'No Data'\n\nThe first triggers an error, the second returns None. Errors can be unfriendly: do you want your entire Python program to fail because a single city is missing, or would you rather than it did something a little more sensible such as… skipping the row or returning a sensible default?"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#getting-values-contd",
    "href": "lectures/3.3-Dictionaries.html#getting-values-contd",
    "title": "Dictionaries",
    "section": "Getting Values (cont’d)",
    "text": "Getting Values (cont’d)\nIf we want to think about whether a value is in the dictionary (as opposed to just retrieving it) then notice these options:\nc = cities.get('Sao Paulo')\nif not c:\n  print(\"Sorry, no city by that name.\")\n\nif 'Beijing' in cities:\n  print(\"Found Beijing!\")\n\nThe first example works because cities.get returns None, which is the same as ‘undefined’ for Python. So we can use ‘not’ to imply ‘if c is not defined then do something…’\nThe second example works because we are implicitly treating the keys in the cities dictionary as a list and looking to see if Beijing is one of the values in that list.\nPython often benefits and suffers from TMTOWTDI (There’s More Than One Way To Do It): think of these as being different ways to say the same thing, but depending on where you want to put the emphasis you would choose one or the other."
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#setting-values",
    "href": "lectures/3.3-Dictionaries.html#setting-values",
    "title": "Dictionaries",
    "section": "Setting Values",
    "text": "Setting Values\nIt’s the same process to update an existing value or create a new one:\ncities = {}  # Empty dictionary\ncities['Beijing'] = 21716620    # Sets key-&gt;value\ncities['Toronto'] = 2930000     # Sets key-&gt;value\n\nprint(cities['Toronto'])        # Prints 2930000\ndel cities['Toronto']           # Deletes Toronto key (and value)\ncities.pop('Toronto','Default') # Prints 'Default' b/c key not found\nprint(cities)\nThis last command outputs:\n{'Beijing': '0.17'16620}"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#iterating",
    "href": "lectures/3.3-Dictionaries.html#iterating",
    "title": "Dictionaries",
    "section": "Iterating",
    "text": "Iterating\nSimilar to iterating over lists but…\ncities = {\n  'San Francisco': 837442,\n  'London': 8673713,\n  'Paris': 837442,\n  'Beijing': '0.17'00000}\n\nfor c in cities:\n  print(c)\nPrints:\n'San Francisco'\n'London'\n'Paris'\n'Beijing'\n\nOne really important point to note: here, the cities are printed out in the same order that they were added to the dictionary, but that is not guaranteed! Unlike lists, dictionaries are unordered.\nAlso, how would we print out the population of each city?"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#section",
    "href": "lectures/3.3-Dictionaries.html#section",
    "title": "Dictionaries",
    "section": "",
    "text": "Keys\nfor k in cities.keys():\n  print(k)\nPrints:\n'San Francisco'\n'London'\n'Paris'\n'Beijing'\n\nValues\nfor v in cities.values():\n  print(v)\nPrints:\n837442\n8673713\n2229621\n21716620\n\nBoth\nfor k,v in cities.items():\n  print(f\"{k} -&gt; {v}\")\nPrints:\nSan Francisco -&gt; 837442\nLondon -&gt; 8673713\nParis -&gt; 837442\nBeijing -&gt; 21700000"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#a-final-note",
    "href": "lectures/3.3-Dictionaries.html#a-final-note",
    "title": "Dictionaries",
    "section": "A Final Note!",
    "text": "A Final Note!\nValues can be almost anything, including a dictionary or list! This opens up some interesting possibilities:\n\n\ncities = {\n  'San Francisco': \n    [37.77, -122.43, 'SFO']\n}\n\ncities = {\n  'San Francisco': {\n    'lat': 37.77,\n    'lon': -122.43,\n    'airport':'SFO'}\n}\nprint(cities['San Francisco']['lat'])\n\nSpoiler: you’re going to encounter this kind of thing a lot.\n\nWhat is this starting to look like? This is basically what JSON is."
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#danger-will-robinson",
    "href": "lectures/3.3-Dictionaries.html#danger-will-robinson",
    "title": "Dictionaries",
    "section": "Danger, Will Robinson!",
    "text": "Danger, Will Robinson!\n\nRemember: in most programming languages dictionaries/hashes are unordered and there is no guarantee that things come out in the same order they went in! They complement ordered lists, they don’t replace them!"
  },
  {
    "objectID": "lectures/3.3-Dictionaries.html#resources",
    "href": "lectures/3.3-Dictionaries.html#resources",
    "title": "Dictionaries",
    "section": "Resources",
    "text": "Resources\n\nDictionaries and sets\nComprehensions\nThe Complete Guide to Dictionaries (by a CASA alum)"
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#as-in",
    "href": "lectures/3.5-The_Command_Line.html#as-in",
    "title": "The Command Line",
    "section": "As in…",
    "text": "As in…\n\nWhy are you torturing me with this arcane knowledge?\nWhy do I need to do this when we have slick IDEs now?"
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#the-answer",
    "href": "lectures/3.5-The_Command_Line.html#the-answer",
    "title": "The Command Line",
    "section": "The Answer?",
    "text": "The Answer?\nNo matter how long you try to avoid it, eventually you’ll find things that can only be solved (or that can be much more quickly solved) using the Command Line Interface (CLI).\nThings like:\n\nInteracting with git is actually easier on the Command Line.\nMaking the most of developer-oriented tools (e.g. docker, GDAL, proj4/6).\nPeeking and poking at (large) files efficiently…\nAutomating things that would be hard/annoying to do manually…\n\nA lot of this ties back to data and servers.\n\nTrue story: 25 years ago I used to process more than 40GB of compressed plain-text data every day from my Titanium PowerBook. But that’s because it was all running on a server in New Jersey while I was in Manhattan. Everything was done using the Command Line and SSH (secure shell).\nMore recently, processing OSM data for the entire UK was possible on my MacBook Air using GDAL and bash scripts but not possible using R/RStudio directly. Basically, the work took so long (&gt; 13 hours) that RStudio thought the script had died and tried to kill it."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#anatomy-of-a-command",
    "href": "lectures/3.5-The_Command_Line.html#anatomy-of-a-command",
    "title": "The Command Line",
    "section": "Anatomy of a Command",
    "text": "Anatomy of a Command\ncurl -L http://bit.ly/2vrUFKi | \n  head -3 |  \n  awk -F\",\" '{ print $2, $4, $6; }' &gt; results.txt\nThis command does four things in one ‘line’ on the CLI:\n\ncurl downloads the file and passes the contents to…\nhead which takes the first three rows and passes those to…\nawk which splits the rows on \",\" and takes the 2nd, 4th, and 6th fields and directs them into…\nA file called results.txt\n\n\nNote that results.txt is created if it doesn’t already exist, or overwritten if it does.\nIf you wanted to append to an existing file you would use &gt;&gt; instead of &gt;."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#interacting-with-files",
    "href": "lectures/3.5-The_Command_Line.html#interacting-with-files",
    "title": "The Command Line",
    "section": "Interacting with Files",
    "text": "Interacting with Files\n\n\n\nCommand\nDoes\nExample\n\n\n\n\nls\nList\nls .\n\n\ncd\nChange Directory\ncd $HOME or cd ~\n\n\npwd\nPrint Working Directory\npwd\n\n\nmv\nRename/Move file a to b\nmv a.txt b.txt\n\n\nfind\nFind files matching some criteria\nfind . -name \"*.md\"\n\n\n\n\nNotice that most commands on the Command Line involve typing mnemonics (the shortest possible combination of letters that is unique memorable)."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#common-shortcuts",
    "href": "lectures/3.5-The_Command_Line.html#common-shortcuts",
    "title": "The Command Line",
    "section": "Common Shortcuts",
    "text": "Common Shortcuts\n\n\n\n\n\n\n\n\nShortcut\nMeans\nExample\n\n\n\n\n.\nThe current working directory\nls .\n\n\n..\nThe directory above the current working one\ncd ..\n\n\n~1\nThe current user’s home directory.\ncd ~\n\n\n/\nThe ‘root’ directory for the entire computer\nls /\n\n\n\"*\"\nA ‘wildcard’ meaning any number of characters in a filename\nfind . -name \"*.md\"\n\n\n\"?\"\nA ‘wildcard’ meaning one character in a filename\nfind . -name \"2.?-*.md\"\n\n\n\n\nThe main reason we care about all this is that all data is stored somewhere and all code executes somewhere. So we want a way to traverse the device efficiently when looking in directories, creating new files, writing different types of data to different places, and so forth. These shortcuts therefore crop up all over the place ‘in the wild’–if you don’t know what they’re telling you then you’ll wonder why your code doesn’t run or you can’t find the data you saved!\n\nThis may be easier to remember and write as cd $HOME, which does the same thing."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#a-simulated-walk-across-my-laptop",
    "href": "lectures/3.5-The_Command_Line.html#a-simulated-walk-across-my-laptop",
    "title": "The Command Line",
    "section": "A Simulated Walk Across My Laptop",
    "text": "A Simulated Walk Across My Laptop\ncd /\npwd\n&gt; /\nls\n&gt; Applications  Library  System  Users Volumes ...\ncd $HOME\npwd\n&gt; /Users/casa\nls\n&gt; Applications  Desktop  Dropbox  ...\ncd Dropbox\npwd\n&gt; /Users/casa/Dropbox\nls\n&gt; CASA  Lectures  Practicals ...\n\nModern computers (especially if you’ve grown up around iPhones and Android phones/tablets) are really good at hiding this fact, but that’s because people using phones or tablets really don’t want to be thinking about where their data is being stored, they just want to click save. But when you start coding then you need to start caring a lot more about where something is happening."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#finding-things-in-files",
    "href": "lectures/3.5-The_Command_Line.html#finding-things-in-files",
    "title": "The Command Line",
    "section": "Finding Things in Files",
    "text": "Finding Things in Files\n\n\n\n\n\n\n\n\nCommand\nDoes\nExample\n\n\n\n\nless\nPeek at contents of a text file\nless file.txt\n\n\ngrep\nFind lines matching a ‘pattern’ in a file\ngrep 'pattern' file.txt\n\n\nhead\nPeek at first x rows of a text file\nhead -n 10 file.txt\n\n\ntail\nPeek at last x rows of a text file\ntail -n 10 file.txt\n\n\nwc\nCount things (rows, words, etc.)\nwc -l file.txt\n\n\nsed/awk\nComplicated, but powerful, things\nawk -F\",\" '{ print $1, $3; }' file.csv\n\n\n\n\nThe really crucial thing about all of these utilities is that they don’t load the entire file into memory. So you can ‘peek’ into a 15GB text file instantly without waiting four hours for it to load into memory (and then crash your machine). It’s kind of like the anti-Excel."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#time-to-escape",
    "href": "lectures/3.5-The_Command_Line.html#time-to-escape",
    "title": "The Command Line",
    "section": "Time to Escape!",
    "text": "Time to Escape!\nSome characters are ‘special’ and need to be escaped. You’ll encounter these both in the shell (a.k.a. command line) and in Python:\n\n\n\n\n\n\n\n\nEscape\nDoes\nExample\n\n\n\n\n\\\nAllows spaces in file names\nless My\\ File\\ with\\ Spaces.txt\n\n\n\\t\nCreates/matches a tab character\n\\tThe start of a paragraph...\n\n\n\\n\nCreates/matches a newline character\nThe end of a row/para...\\n\n\n\n\\r\nCreates/matches a carriage return\nThe end of a row/para...\\r\\n\n\n\n\\$\nLiteral dollar sign (since $ often marks a variable)\nIt costs \\$1,000,000\n\n\n\\!\nLiteral exclamation mark (since ! can mean a number of things)\nDon't forget me\\!\n\n\n\nThis also becomes relevant when you’re dealing with quotes:\n\"\"This is a problem,\" she said.\"\nvs. \n\"\\\"This is a problem,\\\" she said.\"\n\nThe carriage return is only ever encountered on files that have been opened on Windows machines."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#compressingdecompressing-files",
    "href": "lectures/3.5-The_Command_Line.html#compressingdecompressing-files",
    "title": "The Command Line",
    "section": "Compressing/Decompressing Files",
    "text": "Compressing/Decompressing Files\n\n\n\n\n\n\n\n\nCommand\nDoes\nExample\n\n\n\n\ngzip\nCompress/Decompress files\ngzip file.txt\n\n\ngunzip\nDecompress files\ngunzip file.txt.gz1\n\n\n\nThis can also be done using ‘switches’ passed to gzip: gzip -cd (where -d means ‘decompress’)."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#chaining-commands",
    "href": "lectures/3.5-The_Command_Line.html#chaining-commands",
    "title": "The Command Line",
    "section": "Chaining Commands",
    "text": "Chaining Commands\nThe CLI becomes much useful with command chaining:\ngzip -cd very_lg_file.txt.gz | \n  head -n 500 | \n  grep \"pattern\"\nThe ‘pipe’ (|) takes output from command and ‘pipes’ (aka. passes) it to another.\n\nThis will give you an ‘answer’ much, much, much faster than trying to open the whole file in, say, Excel, Numbers, or even Python."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#redirecting-output",
    "href": "lectures/3.5-The_Command_Line.html#redirecting-output",
    "title": "The Command Line",
    "section": "Redirecting Output",
    "text": "Redirecting Output\nWe can redirect outputs in to new files with &gt;, and inputs out of existing files using &lt;:\ngzip -cd very_lg_file.txt.gz | \n  head -n 500 | \n  grep \"pattern\" &gt; matches.txt\nSo the output from the previous commands goes into matches.txt as plain-text. The reverse &lt; is only used in very special circumstances so you probably won’t encounter it very often."
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#practical-applications",
    "href": "lectures/3.5-The_Command_Line.html#practical-applications",
    "title": "The Command Line",
    "section": "Practical Applications",
    "text": "Practical Applications\nMost developers will use one or more of these on a daily basis:"
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#a-complex-example",
    "href": "lectures/3.5-The_Command_Line.html#a-complex-example",
    "title": "The Command Line",
    "section": "A (Complex) Example",
    "text": "A (Complex) Example\nI do not expect you to understand this, but I do want you to understand why this is important:\ndocker run -v conda:/home/jovyan/work --rm ${DOCKER_NM} start.sh \\\n   conda env export -n ${ENV_NM} | sed '1d;$d' | sed '$d' \\\n   | perl -p -e 's/^([^=]+=)([^=]+)=.+$/$1$2/m' \\\n   | grep -Ev '\\- _|cpp|backports|\\- lib|\\- tk|\\- xorg' &gt; conda/environment_py.yml\n\nThis is how I generated the YAML file used by Anaconda Python installers: it is running a command on a virtual machine, collecting the output, filtering out lines by both row number and textual pattern, and directing this all in the environment_py.yml file. This can be run as part of my ‘build’ of the programming environment. It’s all automated!"
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#getting-help",
    "href": "lectures/3.5-The_Command_Line.html#getting-help",
    "title": "The Command Line",
    "section": "Getting Help",
    "text": "Getting Help\nThe Software Carpentry people have a whole set of lessons around working with ‘the shell’ (a.k.a. Command Line) that might help you.\n\nThe UNIX Shell.\nMIT’s ‘Missing Semester’ on Vim\n\nIndeed all of MIT’s Missing Semester content could be useful!"
  },
  {
    "objectID": "lectures/3.5-The_Command_Line.html#useful-videos",
    "href": "lectures/3.5-The_Command_Line.html#useful-videos",
    "title": "The Command Line",
    "section": "Useful Videos",
    "text": "Useful Videos\n\n\nThe Shell/Terminal in general:\n\nAbsolute BEGINNER Guide to the Mac OS Terminal\nLinux Bash Shell for Beginners: Tutorial 1\nBeginner’s Guide to the Bash Terminal\nShell Novice\nHow to use the Command Line\n\n\nSome specific commands:\n\nCat\nGzip/Tar (also a good point about spaces in a file name!)\nGrep\nFind\n\n\nAnd lots more here on using the file system and shell commands"
  },
  {
    "objectID": "sessions/day1.html",
    "href": "sessions/day1.html",
    "title": "Day 1: Getting Started",
    "section": "",
    "text": "Goal\n\n\n\nA basic understanding of core concepts in reproducible analysis and the advantages of moving to open data and open source code.\n\n\n\nPoll: how many people have used GIS? If so, which one?\nPoll: how many people have learned a programming language? If so, which one?\n\nIntroductory session:\n\n1.1 Getting Started\n1.2 What Do (Spatial) Data Scientists Do\n1.3 Our Principles\n1.4 Our Tools\n\nApplied session:\nWe are trying to do three things:\n\nInstall required utilities: WSL for Windows or Xcode for Mac\n\n\nSetting up Podman\nRunning Podman",
    "crumbs": [
      "Day 1: Getting Started"
    ]
  },
  {
    "objectID": "sessions/day3.html",
    "href": "sessions/day3.html",
    "title": "Day 3: Working with Data",
    "section": "",
    "text": "Goal\n\n\n\nHow tools like Quarto and Python can make report-writing ‘easy’.\n\n\nIntroductory session:\n\nThink Maps\nThink Data\nReading Tables with Pandas\nReading Geographies with GeoPandas\n\nApplied session:\n\nPandas (Right+Click to download file)\nGeopandas (Right+Click to download file)\nLinking data (Right+Click to download file)\n\nAdvanced topic:\nIf you’d like to dig into something that really stretches your understanding, then here are relevant links to some work that we did with using machine learning to predict neighbourhood change.\n\nThe published article which presents our rationale and findings.\nThe GitHub repository which shows how we obtained our results.\nBecause we had made that work public, this allowed other researchers to take it further. And they also made their code open as well.",
    "crumbs": [
      "Day 3: Working with Data"
    ]
  },
  {
    "objectID": "setup/base.html",
    "href": "setup/base.html",
    "title": "Updates",
    "section": "",
    "text": "In order to get the machine ready to do virtualisation you need to install a few updates to the Operating System as well as some tools that help to interact with the programming platform. Things are a lot more complicated for Windows users here than for Mac (or Linux) users."
  },
  {
    "objectID": "setup/base.html#system-updates",
    "href": "setup/base.html#system-updates",
    "title": "Updates",
    "section": "System Updates",
    "text": "System Updates\nBefore going any further, please ensure that your computer is fully up-to-date with all Operating System and application updates before following any of the other steps in this brief guide to getting started."
  },
  {
    "objectID": "setup/base.html#base-utilities",
    "href": "setup/base.html#base-utilities",
    "title": "Updates",
    "section": "Base Utilities",
    "text": "Base Utilities\nIn order to access the majority of the features that this module uses, you will need to install several ‘base’ utilities:\n\nMacOSWindows\n\n\nYou need the Xcode Command Line Tools installed on your Mac. In some cases this may have already been installed, but it’s the same process to check as to install:\n\nOpen the Terminal application (which can be found under Utilities in your Applications folder).\nType the following: xcode-select --install and then hit Enter (⏎)\n\nUnless you get an outright error you can proceed to the next step:\n\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal.\n\n\n\nYou first need to check that virtualisation is enabled on your computer. This is under Windows Features where you need to make sure that the following options are ticked:\n\nVirtual Machine Platform\nWindows Hypervstor Platform\nIf you have to change these settings then you then need to restart your machine.\n\nYou then need to install WSL2 but, strangely, you do not actually need to install a full Linux O/S, so as far as we can tell this means you only need to run the following commands in the Windows PowerShell:\n\nwsl --install should quickly install the subsystem that we need.\n\nThat should be it: Podman (and Docker) should now run without complaint.\n\n\n\n\n\n\nIf You Need More Help\n\n\n\n\nThere is good guidance from Microsoft for Windows 11 and more recent ‘builds’ of Windows 10.\nThere are also older instructions for Windows 10.\n\nCommon installation errors are covered here.\nFinally, if you are still being told that you can’t install WSL2 and Linux, then the most likely cause of this issue is a setting in the BIOS of the computer itself. There are a couple of settings that need changing at a very low level to enable Hyper-V virtualisation. I would start by following this MS guide and, if there is still a problem, check this blog post."
  },
  {
    "objectID": "setup/base.html#windows-only-optional",
    "href": "setup/base.html#windows-only-optional",
    "title": "Updates",
    "section": "Windows Only (Optional)",
    "text": "Windows Only (Optional)\n\n\n\n\n\n\nCompletely Optional}\n\n\n\nThis next part is completely optional for those who want to go further with Linux and WSL. You do not (normally) need to do all this to just get Podman or Docker running.\n\n\n\n\n\n\n\n\nCreating a Linux User\n\n\n\nIf you want to install a full Linux distribution (e.g. because you want to do more than just run Docker) then make sure you set up a new Linux user and do not end up running everything as root.\n\n\nTo make full use of WSL2 and Linux (if you want to do more than just use Docker) you will need to familiarise yourself with how having two operating systems that can talk to each other works. That is covered in the next section. This will actually be useful for understanding how Docker works, as it can be profoundly confusing.\nThe behaviour of the ‘shell’ (command line) is quite confusing because, with WSL2, you effectively end up with two ‘home’ directories: one for your Windows user, and one for your new Ubuntu user. Starting a Linux shell/command line puts you in your Linux home directory (the username may be completely different from your Windows username). Starting a Windows shell/command line puts you in your Windows home directory (again, the username may be completely different from your Linux username).\nSo the first, and perhaps most important, thing is understanding where ‘data’ is being stored:\n\nUnder Linux the user directory is apparently something like: \\\\wsl$\\&lt;DistroName&gt;\\home\\&lt;UserName&gt;\\ but you can usually get it by simply typing cd $HOME and then pwd when starting a new Linux shell.\nUnder Windows the user directory is: C:\\Users\\&lt;UserName&gt;\\ or /mnt/c/Users/&lt;UserName&gt;/, and you can often simply type pwd when opening a new Windows shell.\n\nSo these are different locations on your computer’s hard drive, and you will not see your Linux files in your Windows Home Directory and vice versa. To make it easy to switch between the two, I found this page on Microsoft’s web site that goes through some of the post-WSL2 installation steps, but see especially the additional page on Windows Terminal configuration.\nSlightly confusingly, you can run Linux commands directly from Windows, usually be adding wsl in front of the Linux command (e.g. wsl ls *.csv from Windows, where in Linux the command would be ls *.csv).\nTo make it easy to move from the Linux side of your machine to the Windows machine you can also do this:\n\nWork out where your CASA files are stored on the Windows side (see above: /mnt/c/Users/&lt;UserName&gt;/My\\ Documents/CASA/... where &lt;UserName&gt; is your Windows user name).\ncd to this location and type pwd to output the full path to the CASA directory.\nCopy this.\nNow start a Linux shell and run the following command once (you do not need to do it ever again): echo \"export WIN_HOME=\\\"/mnt/c/Users/.../CASA/\\\"\" &gt;&gt; $HOME/.bashrc. Replace the ... with the rest of the actual path! The \\\" is very important, don’t try to change those!\nNow run source .bashrc and you should see no errors.\n\nOnce you have done this you will have added a single line to your .bashrc file in Linux. This will create a ‘shortcut’ for bash in Linux. From here on out you should be able to type cd $WIN_HOME and move immediately over to the CASA directory on the Windows side. This will save having to remember (and type) the Windows path each time."
  },
  {
    "objectID": "setup/configuring.html",
    "href": "setup/configuring.html",
    "title": "Additional Configuration",
    "section": "",
    "text": "Podman requires you to create a virtual machine with user-specified characteristics before you can run an image. You can think of this as specifying the ‘hardware’ of the computer before you buy it (How much RAM? How big a hard drive? And so on.). In principle, this means that you can have more than one valid configuration at a time which would allow you to tune each virtual machine to your needs (one machine could have a lot of memory, another a lot of storage).\n\nConsiderations\nYou should create a virtual machine that has enough resources to do the job, but not so much that it affects your ability to do other work on the computer. Since every computer is unique, you need to look at your computer’s configuration and work it out from there but below is some basic guidance. You will find it easiest to configure this using Podman Desktop (next section) and clicking on the Settings and Create Podman machine.\n\n\n\nTable 1: Memory (RAM)\n\n\n\n\n\nIf your computer has\n8GB\n16GB\n32GB\n64GB\n\n\n\n\nWe’d recommend\n1-2GB\n2-3GB\n4–8GB\nLucky you!\n\n\n\n\n\n\n\n\n\nTable 2: Processing Power (CPUs)\n\n\n\n\n\nIf your computer has\n2CPUs\n8CPUs\n16CPU\n32CPUs\n\n\n\n\nWe’d recommend\n1CPU\n2-4CPUs\n4–8CPUs\nLucky you!\n\n\n\n\n\n\n\n\n\nTable 3: Free Disk Space (Disk size)\n\n\n\n\n\n\n\n\n\n\n\n\nIf your computer has\n10GB Free\n20GB Free\n100GB Free\n&gt; 150GB Free\n\n\n\n\nWe’d recommend\nTidying up\n10GB\n30GB\nLucky you!\n\n\n\n\n\n\nNote that some Windows machines come configured with two hard drives (usually called C and D); in those cases D is intended for data and often doesn’t have much on on it! In those cases, you can change the Image Path option in Podman desktop to store the image on the D drive and avoid problems with filling up your C drive.\n\n\nInitialising a Podman Machine\nThe easiest way to configure your Podman machine is to use Podman Desktop. When you launch the Desktop, at the lower-left you’ll see a Settings button. Click this and then (if it’s not already selected) choose the Resources tab.\n\n\n\nPodman Resources\n\n\nSelect Create new and Podman will pick some sensible defaults for you; however, you might want to fine-tune the settings in line with the options set out above in Tables Table 1 and Table 2 especially. Here’s one setup for a fairly recent Apple MacBookPro M2.\n\n\n\nPodman Machine Initalisation\n\n\nClick on Create and you are now ready to run your first container from an image!"
  },
  {
    "objectID": "setup/git.html",
    "href": "setup/git.html",
    "title": "Git & GitHub",
    "section": "",
    "text": "Git is a ‘version control system’, which is a fancy way of saying that it has the potential to store a complete, line-by-line history of your work… so long as it’s in a plain-text format like Markdown or Python/R code files. Git updates all of this history on your computer every time you ‘commit’ the changes you’ve told it about by ‘adding’ a file. With GitHub you can then synchronise these changes so that you have a full backup (code and content are no longer just on your computer), publish a web site (via github.io), or collaborate with other people (via public, shared ‘repositories’).\nWhile it is not necessary that you learn all about how GitHub works now, it will be really helpful if you can get yourself set up with a GitHub account and install Git locally so that you’re ready to get when we start the term."
  },
  {
    "objectID": "setup/git.html#get-a-github-account",
    "href": "setup/git.html#get-a-github-account",
    "title": "Git & GitHub",
    "section": "Get a GitHub Account",
    "text": "Get a GitHub Account\nYou will need to go to GitHub.com and then click the Sign up button at the top right. Follow the instructions for creating a new account from there.\n\n\n\n\n\n\nUse Your Personal Account\n\n\n\nAlthough you can always change it later (so if you’ve opened your GitHub account using your UCL email don’t panic!), you may find it easier to:\n\nOpen a GitHub account using a personal email address to which you expect to always have access.\nThen associate your UCL email address to this GitHub account so that you gain from any educational benefits offered by GitHub (there are some around private respositories and so on)."
  },
  {
    "objectID": "setup/git.html#install-git-locally",
    "href": "setup/git.html#install-git-locally",
    "title": "Git & GitHub",
    "section": "Install Git Locally",
    "text": "Install Git Locally\nYou can follow along with GitHub’s own instructions for installing Git on your own computer. In many cases (especially if you use a Mac) you may find that Git is already installed, you just didn’t know it."
  },
  {
    "objectID": "setup/installation.html",
    "href": "setup/installation.html",
    "title": "Installation",
    "section": "",
    "text": "Over the years, we have experimented with a range of approaches to setting you up with a programming environment, and we have come to the conclusion that Podman1 is the most robust way to ensure a consistent experience. This guarantees that all students end up with the same versions of each library, that difficult-to-diagnose hardware/OS issues are minimised, and that running/recovery is the most straightforward.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#what-kind-of-computer",
    "href": "setup/installation.html#what-kind-of-computer",
    "title": "Installation",
    "section": "What Kind of Computer?",
    "text": "What Kind of Computer?\n\nApple Intel or Silicon/M-chip?Windows 32- or 64-bit?\n\n\nApple has stopped using Intel computer chips and now uses its own ‘Silicon’ (aka ‘M’) chips instead. Confusingly, these are often also referred to by their technical specification as AMD64 (Intel) and ARM64 (Apple), respectively. To find out which you have, click on the Apple icon () and select About this Mac. Look at the Processor section and you should see which type of computer you have. If you see the word Intel then you have an Intel computer, if you see M1, M2, M3, etc. then you have an Apple Silicon computer.\n\n\nIt is highly unlikely that you have a 32-bit machine, so if in doubt download the 64-bit version. It is also unlikely that you have an ARM device if you have an off-the-shelf Windows computer.\nPlease download all of the Essential packages for your type of computer (Apple Intel, Apple Silicon, Windows). The rest are listed for your convenience and you can install them as you see fit.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#system-updates",
    "href": "setup/installation.html#system-updates",
    "title": "Installation",
    "section": "System Updates",
    "text": "System Updates\nBefore going any further, please ensure that your computer is fully up-to-date with all Operating System and application updates before following any of the other steps in this brief guide to getting started.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#base-utilities",
    "href": "setup/installation.html#base-utilities",
    "title": "Installation",
    "section": "Base Utilities",
    "text": "Base Utilities\nIn order to access the majority of the features that this module uses, you will need to install several ‘base’ utilities:\n\nMacOSWindows\n\n\nYou need the Xcode Command Line Tools installed on your Mac. In some cases this may have already been installed, but it’s the same process to check as to install:\n\nOpen the Terminal application (which can be found under Utilities in your Applications folder).\nType the following: xcode-select --install and then hit Enter (⏎)\n\nUnless you get an outright error you can proceed to the next step:\n\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal.\n\n\n\nYou first need to check that virtualisation is enabled on your computer. This is under Windows Features where you need to make sure that the following options are ticked:\n\nVirtual Machine Platform\nWindows Hypervstor Platform\nIf you have to change these settings then you then need to restart your machine.\n\nYou then need to install WSL2 but, strangely, you do not actually need to install a full Linux O/S, so as far as we can tell this means you only need to run the following commands in the Windows PowerShell:\n\nwsl --install should quickly install the subsystem that we need.\n\nThat should be it: Podman (and Docker) should now run without complaint.\n\n\n\n\n\n\nIf You Need More Help\n\n\n\n\nThere is good guidance from Microsoft for Windows 11 and more recent ‘builds’ of Windows 10.\nThere are also older instructions for Windows 10.\n\nCommon installation errors are covered here.\nFinally, if you are still being told that you can’t install WSL2 and Linux, then the most likely cause of this issue is a setting in the BIOS of the computer itself. There are a couple of settings that need changing at a very low level to enable Hyper-V virtualisation. I would start by following this MS guide and, if there is still a problem, check this blog post.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#software",
    "href": "setup/installation.html#software",
    "title": "Installation",
    "section": "Software",
    "text": "Software\n\nApple IntelApple Silicon (M-chips)Windows PCs\n\n\n\nEssential:\n\nPodman Desktop\niTerm2\n\nOptional:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\n\n\n\n\nEssential:\n\nPodman Desktop\niTerm2\n\nOptional:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\n\n\n\n\nEssential:\n\nWindows Terminal installed via either Windows Store or winget.\nPodman Desktop\n\nOptional:\n\nQGIS Long-Term Release (LTR)\nGit\nGitHub Desktop\n\n\n\n\n\n\n\n\n\n\n\nPodman v. Docker\n\n\n\nI you want to know more about the differences between Podman and Docker you can start_here.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#installing",
    "href": "setup/installation.html#installing",
    "title": "Installation",
    "section": "Installing",
    "text": "Installing\n\n\n\n\n\n\nHow They Work\n\n\n\nOne way to think of Podman is as a ‘library’ of ready-made virtual computers that you can copy and use free-of-charge. If you’d like to know more about what Podman are and how they work, you can read more in the Understanding Virtualisation section.\n\n\n\n\n\n\n\n\nWindows Users\n\n\n\nPlease ensure that you have installed WSL2 before installing or Podman! If you cannot install WSL2 then please have a look at the ‘dealing with errors’ section.\n\n\nAfter you’ve downloaded Podman:\n\nInstall it – usually this will mean opening the image and either dragging it your Application folder (Mac) or running the installer (Windows)\nStart it up – double-click the Podman icon in your Applications folder to start the application running.\n\n\n\n\nPodman Desktop\n\n\nIf you didn’t see this (or see lots of errors) then you will need to have a look at the ‘dealing with errors’ section.\n\n\n\n\n\n\nImportant\n\n\n\nInstallation on a Mac should be fairly straightforward (as evidenced by the dearth of documentation), but for Windows there is quite a bit more detail.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#configuration",
    "href": "setup/installation.html#configuration",
    "title": "Installation",
    "section": "Configuration",
    "text": "Configuration\nPodman requires you to create a virtual machine with user-specified characteristics before you can run an image. You can think of this as specifying the ‘hardware’ of the computer before you buy it (How much RAM? How big a hard drive? And so on.). In principle, this means that you can have more than one valid configuration at a time which would allow you to tune each virtual machine to your needs (one machine could have a lot of memory, another a lot of storage). You can read a more detailed explanation of how to configure a virtual machine, but below is the ‘quick start’ version.\n\nApple MacOSWindows\n\n\nIn the Terminal you simply:\npodman machine init\npodman machine start\n\n\nIn the PowerShell or Window Terminal you should be able to simply:\npodman machine init\npodman machine start\n\n\n\n\n\n\nUnable to Run\n\n\n\nIn a small number of cases we’ve need to create a new, named virtual machine (e.g. podman machine init myvm) and then change the default. Hopefully this isn’t going to be needed.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#testing",
    "href": "setup/installation.html#testing",
    "title": "Installation",
    "section": "Testing",
    "text": "Testing\nTo test if Podman is installed correctly, you will need either the Terminal (macOS) or the Windows Terminal (Windows).\n\n\n\n\n\n\nCopy Code to Clipboard\n\n\n\nWhenever you see a ‘code block’ below, you will also see a ‘clipboard’ icon () in the right. Click that, and the code will be copied to your computer’s ‘clipboard’ so that you can then paste it into the Terminal or Windows Terminal (see Base Utilities. That will save you a lot of time and effort.\n\n\nPodman has provided a simple way to test if your installation is working correctly. You can run the following command:",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#podman",
    "href": "setup/installation.html#podman",
    "title": "Installation",
    "section": "Podman",
    "text": "Podman\npodman run hello-world\nThis should output something like:\nResolved \"hello-world\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf)\nTrying to pull quay.io/podman/hello:latest...\nGetting image source signatures\nCopying blob sha256:1ff9adeff4443b503b304e7aa4c37bb90762947125f4a522b370162a7492ff47\nCopying config sha256:83fc7ce1224f5ed3885f6aaec0bb001c0bbb2a308e3250d7408804a720c72a32\nWriting manifest to image destination\n!... Hello Podman World ...!\n\n         .--\"--.\n       / -     - \\\n      / (O)   (O) \\\n   ~~~| -=(,Y,)=- |\n    .---. /`  \\   |~~\n ~/  o  o \\~~~~.----. ~~\n  | =(X)= |~  / (O (O) \\\n   ~~~~~~~  ~| =(Y_)=-  |\n  ~~~~    ~~~|   U      |~~\n\nProject:   https://github.com/containers/podman\nWebsite:   https://podman.io\nDesktop:   https://podman-desktop.io\nDocuments: https://docs.podman.io\nYouTube:   https://youtube.com/@Podman\nX/Twitter: @Podman_io\nMastodon:  @Podman_io@fosstodon.org\nIf you see these messages, then Podman is installed correctly and you can move on to the next step. If you see an error message, then you will need to have a look at the ‘dealing with errors’ section. Notice how there are several things happening:\n\nTrying to pull... or Pulling from library/hello-world – this is starting the process of downloading the hello-world image from the internet.\nPull complete or Writing manifest to image destination – this is telling you that it has finished downloading the image.\nHello from Docker! or Hello Podman World – this is the hello-world image running and telling you that the image now running as a container.\n\nThere’s obviously a lot more to that message, but that’s the basic idea.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#running",
    "href": "setup/installation.html#running",
    "title": "Installation",
    "section": "Running",
    "text": "Running\nWe now need to download and run the sparc image that we created for the workshop. The image is the ‘template’ for running containers (i.e. virtual computers) on our ‘host’ computer and it comes complete with all of the Python libraries and other tools that you’ll need to complete the module (and a good deal more besides!). Installing the image will take a while as it’s quite large (1-5GB) and so will depend on the speed of your internet connection.\nYou can use a single command to download and start the sparc container by copying the following command into the Terminal or Windows Terminal (this may work in Power Shell, but not in the Command Prompt*/cmd):\n\nFor Intel MacsFor M-Chip MacsFor Windows\n\n\npodman run --rm -d --name sparc -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sparc:2025-amd start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\n\n\n\n\nTip\n\n\n\nIf you were using Docker instead of Podman then the command is the same except that you need to replace podman with docker. This is on purpose: open source podman is intended to replace the proprietary docker.\n\n\n\n\npodman run --rm -d --name sparc -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sparc:2025-arm start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\n\n\n\n\nTip\n\n\n\nIf you were using Docker instead of Podman then the command is the same except that you need to replace podman with docker. This is on purpose: open source podman is intended to replace the proprietary docker.\n\n\n\n\npodman run --rm -d --name sparc -p 8888:8888 -v \"$(pwd):/home/jovyan/work\" jreades/sparc:2025-amd start.sh jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\n\n\n\n\nTip\n\n\n\nIf you were using Docker instead of Podman then the command is the same except that you need to replace podman with docker. This is on purpose: open source podman is intended to replace the proprietary docker.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#if-things-go-wrong",
    "href": "setup/installation.html#if-things-go-wrong",
    "title": "Installation",
    "section": "If Things Go Wrong",
    "text": "If Things Go Wrong\nIf you encounter any problems with the installation, please have a look at the Dealing with Problems page.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#success",
    "href": "setup/installation.html#success",
    "title": "Installation",
    "section": "Success!",
    "text": "Success!\nHowever, most of you should now be able to connect to the virtual machine by pointing your browser at: localhost:8888 where you should see something like this:\n\n\n\nJupyter Lab Success",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/installation.html#footnotes",
    "href": "setup/installation.html#footnotes",
    "title": "Installation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAnd Docker, which is basically the same thing.↩︎",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/moving_to_d.html",
    "href": "setup/moving_to_d.html",
    "title": "Moving Docker’s Storage Location on Windows 10 Pro",
    "section": "",
    "text": "To change the default location of Docker’s storage drive (which is typically on the C: drive) on Windows 10 Pro, you’ll need to adjust the configuration in Docker Desktop to move the virtual machine’s disk image. Here’s how to do it:\nSteps:\nSteps to Change Docker’s Storage Location on Windows 10 Pro:"
  },
  {
    "objectID": "setup/moving_to_d.html#last-steps",
    "href": "setup/moving_to_d.html#last-steps",
    "title": "Moving Docker’s Storage Location on Windows 10 Pro",
    "section": "Last Steps!",
    "text": "Last Steps!\nThe following should be done as the last migration steps to move Docker Disk Image Location:\n\nOpen Docker Desktop and go to Settings.\nNavigate to Resources &gt; Advanced.\nIn the Disk Image Location section, click Browse and select the new location, such as D:or another folder on the D: drive.\nAfter selecting the new location, apply the changes and restart Docker Desktop.\n\nThis should relocate Docker’s WSL2 disk image from C: to your D: drive. Screenshot is attached below for reference.\n\n\n\nDocker Disk Image Location"
  },
  {
    "objectID": "setup/virtualisation.html",
    "href": "setup/virtualisation.html",
    "title": "Understanding Virtualisation",
    "section": "",
    "text": "Podman and Docker are ‘virtualisation’ tools that allows you to run ‘virtual machines’ on your computer’s ‘host’ operating system. That’s a lot of new, probably meaningless words. If you’re one of those people who (understandably) likes to understand what’s going on then here’s how some people define it:\n\nGoogle on What is a virtual machine?\nVMWare on What is a virtual machine?\nMicrosoft on What is a virtual machine (VM)?\n\n\n\n\n\n\n\nDocker v. Podman\n\n\n\nYou can find out more about Podman and Docker here"
  },
  {
    "objectID": "setup/virtualisation.html#what-is-virtualisation",
    "href": "setup/virtualisation.html#what-is-virtualisation",
    "title": "Understanding Virtualisation",
    "section": "",
    "text": "Podman and Docker are ‘virtualisation’ tools that allows you to run ‘virtual machines’ on your computer’s ‘host’ operating system. That’s a lot of new, probably meaningless words. If you’re one of those people who (understandably) likes to understand what’s going on then here’s how some people define it:\n\nGoogle on What is a virtual machine?\nVMWare on What is a virtual machine?\nMicrosoft on What is a virtual machine (VM)?\n\n\n\n\n\n\n\nDocker v. Podman\n\n\n\nYou can find out more about Podman and Docker here"
  },
  {
    "objectID": "setup/virtualisation.html#podmandocker-in-a-nutshell",
    "href": "setup/virtualisation.html#podmandocker-in-a-nutshell",
    "title": "Understanding Virtualisation",
    "section": "Podman/Docker in a Nutshell",
    "text": "Podman/Docker in a Nutshell\nSo in order to make use of Podman/Docker (and understand what’s happening when you get errors), it’s helpful to have some sense of what’s going on behind the scenes. You can click on the image below to make it larger, or you can download and print out a PDF version.\n\n\n\nSketch of Podman/Docker Usage\n\n\nHere’s what’s happening:\n\nStep 1. podman pull/docker pull\nYou issue the podman pull jreades/sparc:2025 (or docker pull jreades/sparc:2025) command to your computer, which turns around and asks the Hub for a copy of this image. The Hub responds by transferring a copy of the jreades/sparc:2025 image to your computer. You now have a file containing all the instructions to set up and run a virtual machine on your computer.1\n\n\nStep 2, docker run\nYou will issue the podman run ... jreades/sparc:2025 ... command (or docker run ...) from the command line (or terminal) of your computer, and this tells Docker/Podman to use the jreades/sparc:2025 image as a template for creating a container called sparc2. sparc will do whatever it was told to do by its creator. This could be wait to run Python code, start up a database, serve web pages, the list is practically endless. But sparc is read-only, although you can make changes to the container while it’s running, as soon as you shut it down those changes are lost. So you cannot break an image, only a container. And if you do that, you delete the container and start a new one from the image… we can cover this if you ever do it.\nAs part of the run command, we also told Docker/Podman what resources the container could access. There are two main types of resources for our purposes:\n\nA mount point which is a part of your computer’s hard drive that we can use to write things down permanently. We use $(pwd), which is short-hand for print working directory and refers to the ‘place’ on your computer where we issued the docker run command. We tell the platform to connect this to a directory called work (which resides in /home/jovyan/) on the sparc container. This allows you to share data between the container and your computer, and for changes to be saved when you shut down.\nOne or more ports which are like channels on a radio where the container can talk to other computers (including yours). In this case, we connect port 8888 on sparc to port 8888 on your computer. And that is why you have to tell your browser to go to localhost:8888 to access Jupyter Lab.\n\n\n\nStep 3. Interacting with the Container\nNow when you type things into the browser and tell code to ‘run’, what’s actually happening is that your computer is forwarding the request to the container, which does its thing, updates the web page, and this change is then forwarded back to you via the browser.\n\n\nStep 4. Anatomy of run\nAt the bottom of the Figure above you can see a full run command, here we just want to focus on the most important options (each -X is an option) for most users:\n\n-v: this specified the point on your hard drive that the sparc can use. By default we use $(pwd) which means ‘use the location where the docker run command was executed. You can also ’hard code’ this to something like /Users/&lt;your username&gt;/Documents/casa/ if you always want to use the same location.\n-p: this specified the channel (or port) on which the web browser can talk to the sparc.\njreades/sparc:2025: this specified the image we wanted to use"
  },
  {
    "objectID": "setup/virtualisation.html#footnotes",
    "href": "setup/virtualisation.html#footnotes",
    "title": "Understanding Virtualisation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA virtual machine is just a computer that runs on your computer. So it ‘borrows’ resources like hard drive space, memory, and processor in order to behave like an independent computer that you can interact with in various ways.↩︎\nA container is the name Podman/Docker uses to refer to a running virtual machine. The image on its own does nothing until you tell docker to run it, at which point it becomes a container!↩︎"
  }
]