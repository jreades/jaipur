[
  {
    "objectID": "setup/virtualisation.html",
    "href": "setup/virtualisation.html",
    "title": "Understanding Virtualisation",
    "section": "",
    "text": "You’ll see below that we talk about both Podman and Docker interchangeably. You may have heard of one, but not the other. Is there a difference? In terms of what they do there is no difference that you need to care about at the moment: both allow you to build images of virtual machines, share them with other users, and run any image you find as a container. All of these words are explained below. The point being, they aim to do the same thing.\nHowever, how they do this is quite different. Docker is/was the market leader in this kind of image/container sharing system and is very stable and well-supported; however, to be installed and run Docker requires administrator access (also known as root).\nPodman is a more recent, open source tool: it is slightly less stable and widely supported than Docker, and to make the most of it you need to change quite a few things. However, the biggest benefit is that you can run it as a user: this makes installation and execution much easier.\nWe are trying to move over to Podman because it will make everyone’s life easier, but sometimes we run into issues that cause us to fall back to using Docker instead. Hope that makes sense!\n\n\n\n\n\n\nTL;DR\n\n\n\nChoose Podman unless you have a specific reason to choose Docker instead or you have been unable to successfully install and run Podman."
  },
  {
    "objectID": "setup/virtualisation.html#podman-or-docker",
    "href": "setup/virtualisation.html#podman-or-docker",
    "title": "Understanding Virtualisation",
    "section": "",
    "text": "You’ll see below that we talk about both Podman and Docker interchangeably. You may have heard of one, but not the other. Is there a difference? In terms of what they do there is no difference that you need to care about at the moment: both allow you to build images of virtual machines, share them with other users, and run any image you find as a container. All of these words are explained below. The point being, they aim to do the same thing.\nHowever, how they do this is quite different. Docker is/was the market leader in this kind of image/container sharing system and is very stable and well-supported; however, to be installed and run Docker requires administrator access (also known as root).\nPodman is a more recent, open source tool: it is slightly less stable and widely supported than Docker, and to make the most of it you need to change quite a few things. However, the biggest benefit is that you can run it as a user: this makes installation and execution much easier.\nWe are trying to move over to Podman because it will make everyone’s life easier, but sometimes we run into issues that cause us to fall back to using Docker instead. Hope that makes sense!\n\n\n\n\n\n\nTL;DR\n\n\n\nChoose Podman unless you have a specific reason to choose Docker instead or you have been unable to successfully install and run Podman."
  },
  {
    "objectID": "setup/virtualisation.html#what-is-virtualisation",
    "href": "setup/virtualisation.html#what-is-virtualisation",
    "title": "Understanding Virtualisation",
    "section": "What is Virtualisation?",
    "text": "What is Virtualisation?\nPodman and Docker are ‘virtualisation’ tools that allows you to run ‘virtual machines’ on your computer’s ‘host’ operating system. That’s a lot of new, probably meaningless words. If you’re one of those people who (understandably) likes to understand what’s going on then here’s how some people define it:\n\nGoogle on What is a virtual machine?\nVMWare on What is a virtual machine?\nMicrosoft on What is a virtual machine (VM)?"
  },
  {
    "objectID": "setup/virtualisation.html#podmandocker-in-a-nutshell",
    "href": "setup/virtualisation.html#podmandocker-in-a-nutshell",
    "title": "Understanding Virtualisation",
    "section": "Podman/Docker in a Nutshell",
    "text": "Podman/Docker in a Nutshell\nSo in order to make use of Podman/Docker (and understand what’s happening when you get errors), it’s helpful to have some sense of what’s going on behind the scenes. You can click on the image below to make it larger, or you can download and print out a PDF version.\n\n\n\nSketch of Podman/Docker Usage\n\n\nHere’s what’s happening:\n\nStep 1. podman pull/docker pull\nYou issue the podman pull jreades/sparc:2025 (or docker pull jreades/sparc:2025) command to your computer, which turns around and asks the Hub for a copy of this image. The Hub responds by transferring a copy of the jreades/sparc:2025 image to your computer. You now have a file containing all the instructions to set up and run a virtual machine on your computer.1\n\n\nStep 2, docker run\nYou will issue the podman run ... jreades/sparc:2025 ... command (or docker run ...) from the command line (or terminal) of your computer, and this tells Docker/Podman to use the jreades/sparc:2025 image as a template for creating a container called sparc2. sparc will do whatever it was told to do by its creator. This could be wait to run Python code, start up a database, serve web pages, the list is practically endless. But sparc is read-only, although you can make changes to the container while it’s running, as soon as you shut it down those changes are lost. So you cannot break an image, only a container. And if you do that, you delete the container and start a new one from the image… we can cover this if you ever do it.\nAs part of the run command, we also told Docker/Podman what resources the container could access. There are two main types of resources for our purposes:\n\nA mount point which is a part of your computer’s hard drive that we can use to write things down permanently. We use $(pwd), which is short-hand for print working directory and refers to the ‘place’ on your computer where we issued the docker run command. We tell the platform to connect this to a directory called work (which resides in /home/jovyan/) on the sparc container. This allows you to share data between the container and your computer, and for changes to be saved when you shut down.\nOne or more ports which are like channels on a radio where the container can talk to other computers (including yours). In this case, we connect port 8888 on sparc to port 8888 on your computer. And that is why you have to tell your browser to go to localhost:8888 to access Jupyter Lab.\n\n\n\nStep 3. Interacting with the Container\nNow when you type things into the browser and tell code to ‘run’, what’s actually happening is that your computer is forwarding the request to the container, which does its thing, updates the web page, and this change is then forwarded back to you via the browser.\n\n\nStep 4. Anatomy of run\nAt the bottom of the Figure above you can see a full run command, here we just want to focus on the most important options (each -X is an option) for most users:\n\n-v: this specified the point on your hard drive that the sparc can use. By default we use $(pwd) which means ‘use the location where the docker run command was executed. You can also ’hard code’ this to something like /Users/&lt;your username&gt;/Documents/casa/ if you always want to use the same location.\n-p: this specified the channel (or port) on which the web browser can talk to the sparc.\njreades/sparc:2025: this specified the image we wanted to use"
  },
  {
    "objectID": "setup/virtualisation.html#footnotes",
    "href": "setup/virtualisation.html#footnotes",
    "title": "Understanding Virtualisation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA virtual machine is just a computer that runs on your computer. So it ‘borrows’ resources like hard drive space, memory, and processor in order to behave like an independent computer that you can interact with in various ways.↩︎\nA container is the name Podman/Docker uses to refer to a running virtual machine. The image on its own does nothing until you tell docker to run it, at which point it becomes a container!↩︎"
  },
  {
    "objectID": "setup/moving_to_d.html",
    "href": "setup/moving_to_d.html",
    "title": "Moving Docker’s Storage Location on Windows 10 Pro",
    "section": "",
    "text": "To change the default location of Docker’s storage drive (which is typically on the C: drive) on Windows 10 Pro, you’ll need to adjust the configuration in Docker Desktop to move the virtual machine’s disk image. Here’s how to do it:\nSteps:\nSteps to Change Docker’s Storage Location on Windows 10 Pro:"
  },
  {
    "objectID": "setup/moving_to_d.html#last-steps",
    "href": "setup/moving_to_d.html#last-steps",
    "title": "Moving Docker’s Storage Location on Windows 10 Pro",
    "section": "Last Steps!",
    "text": "Last Steps!\nThe following should be done as the last migration steps to move Docker Disk Image Location:\n\nOpen Docker Desktop and go to Settings.\nNavigate to Resources &gt; Advanced.\nIn the Disk Image Location section, click Browse and select the new location, such as D:or another folder on the D: drive.\nAfter selecting the new location, apply the changes and restart Docker Desktop.\n\nThis should relocate Docker’s WSL2 disk image from C: to your D: drive. Screenshot is attached below for reference.\n\n\n\nDocker Disk Image Location"
  },
  {
    "objectID": "setup/health.html",
    "href": "setup/health.html",
    "title": "Requirements",
    "section": "",
    "text": "This guide will help you to perform a basic ‘health check’ on your computer to see if you’re likely to run into problems running the programming environment. When answering the questions below, ‘your computer’ is the machine on which you plan to do the programming.\nWe try to support as many different configurations as possible, but there is no programming environment that installs and runs seamlessly on all computers so if you run into issues please come back to this guide.",
    "crumbs": [
      "Requirements"
    ]
  },
  {
    "objectID": "setup/health.html#hardware-requirements",
    "href": "setup/health.html#hardware-requirements",
    "title": "Requirements",
    "section": "Hardware Requirements",
    "text": "Hardware Requirements\nIn our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer 8GB or less of RAM.\nYour computer has less than 20GB of free disk space remaining.\n\nRead on below to check what specification you have…\n\nMacOSWindowsLinux\n\n\nYou will need to look up:\n\nHow much RAM does your computer have? Help for Mac.\nHow much free disk space does your computer have? Help for Mac.\n\n\n\nYou will need to look up:\n\nHow much RAM does your computer have? Help for Windows.\nHow much free disk space does your computer have? Help for Windows.\n\n\n\nWe’re going to assume that you know what you’re doing. If you want a recommendation, we’d probably go with the latest Ubuntu desktop release.\n\n\n\nIf your computer has less than 8GB of RAM and/or less than 20GB of free disk space you are likely to have issues with virutalisation and (on Windows) WSL2. Your options are: 1) add more RAM (possible on Windows); 2) back up and remove unnecessary files (Movies, Photos, and Applications are particularly big ‘hogs’).",
    "crumbs": [
      "Requirements"
    ]
  },
  {
    "objectID": "setup/health.html#software-requirements",
    "href": "setup/health.html#software-requirements",
    "title": "Requirements",
    "section": "Software Requirements",
    "text": "Software Requirements\nIn our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer runs Windows 10 Home or older, or\nYour computer runs MacOS 10.13 (High Sierra) or older.\n\nAs long as your computer is running one of the last two major releases of the Operating System you should encounter few issues.\n\nMacOSWindows\n\n\nYou will need to look up:\n\nWhat Operating System and Version is your computer running? Help for Mac.\n\n\n\nYou will need to look up:\n\nWhat Operating System and Version is your computer running? Help for Windows.\n\n\n\n\n\nRecommendations\nIf you are using a Mac then your system should have the option to update to the latest version of the MacOS at no charge. If you are unable to update then it is likely that you have an older machine that is not fully supported by the most recent Operating System and, in all probability, you will also encounter issues running the programming environment.\nIf you are using a Windows PC then try to update to either Windows 11 or to Windows 10 Pro as this will ‘unlock’ additional features that are useful for supporting the programming environment. As a student you are likely to qualify for significantly cheaper/free updates, so make sure you do this when you have access to a discount.",
    "crumbs": [
      "Requirements"
    ]
  },
  {
    "objectID": "setup/env.html",
    "href": "setup/env.html",
    "title": "Installation",
    "section": "",
    "text": "Over the years, we have experimented with a range of approaches to setting you up with a programming environment, and we have come to the conclusion that Podman1 is the most robust way to ensure a consistent experience. This guarantees that all students end up with the same versions of each library, that difficult-to-diagnose hardware/OS issues are minimised, and that running/recovery is the most straightforward.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/env.html#what-kind-of-computer",
    "href": "setup/env.html#what-kind-of-computer",
    "title": "Installation",
    "section": "What Kind of Computer?",
    "text": "What Kind of Computer?\n\nApple Intel or Silicon/M-chip?\nApple has stopped using Intel computer chips and now uses its own ‘Silicon’ (aka ‘M’) chips instead. Confusingly, these are often also referred to by their technical specification as AMD64 (Intel) and ARM64 (Apple), respectively. To find out which you have, click on the Apple icon () and select About this Mac. Look at the Processor section and you should see which type of computer you have. If you see the word Intel then you have an Intel computer, if you see M1, M2, M3, etc. then you have an Apple Silicon computer.\n\n\nWindows 32- or 64-bit?\nIt is highly unlikely that you have a 32-bit machine, so if in doubt download the 64-bit version. It is also unlikely that you have an ARM device if you have an off-the-shelf Windows computer.\nPlease download all of the Essential packages for your type of computer (Apple Intel, Apple Silicon, Windows). The rest are listed for your convenience and you can install them as you see fit.\n\nApple IntelApple Silicon (M-chips)Windows PCs\n\n\n\nEssential:\n\nPodman for ARM64\n\nOptional:\n\niTerm2\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nOnly if Podman doesn’t work:\n\nDocker Desktop for Mac with Intel chip\n\n\n\n\n\nEssential:\n\nPodman for AMD64\n\nOptional:\n\niTerm2\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nOnly if Podman doesn’t work:\n\nDocker Desktop for Mac with Apple silicon\n\n\n\n\n\nEssential:\n\nPodman for AMD64 (it’s highly unlikely that you need the ARM64 installer)\n\nOptional:\n\nQGIS Long-Term Release (LTR)\nGit\nGitHub Desktop\n\nOnly if Podman doesn’t work:\n\nDocker Desktop for Windows",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/env.html#podman-or-docker",
    "href": "setup/env.html#podman-or-docker",
    "title": "Installation",
    "section": "Podman or Docker?",
    "text": "Podman or Docker?\nYou’ll see below that we talk about both Podman and Docker interchangeably. You may have heard of one, but not the other. Is there a difference? In terms of what they do there is no difference that you need to care about at the moment: both allow you to build images of virtual machines, share them with other users, and run any image you find as a container. All of these words are explained below. The point being, they aim to do the same thing.\nHowever, how they do this is quite different. Docker is/was the market leader in this kind of image/container sharing system and is very stable and well-supported; however, to be installed and run Docker requires administrator access (also known as root).\nPodman is a more recent, open source tool: it is slightly less stable and widely supported than Docker, and to make the most of it you need to change quite a few things. However, the biggest benefit is that you can run it as a user: this makes installation and execution much easier.\nWe are trying to move over to Podman because it will make everyone’s life easier, but sometimes we run into issues that cause us to fall back to using Docker instead. Hope that makes sense!\n\n\n\n\n\n\nTL;DR\n\n\n\nChoose Podman unless you have a specific reason to choose Docker instead or you have been unable to successfully install and run Podman.\n\n\n## Installing\n\n\n\n\n\n\nHow They Work\n\n\n\nOne way to think of Podman/Docker is as a ‘library’ of ready-made virtual computers that you can copy and use free-of-charge. If you’d like to know more about what Podman/Docker are and how they work, you can read more in the Understanding Virtualisation section.\n\n\n\n\n\n\n\n\nWindows Users\n\n\n\nPlease ensure that you have installed WSL2 before installing Docker! If you cannot install WSL2 then please have a look at the ‘dealing with errors’ section.\n\n\nAfter you’ve downloaded Podman (first choice) or Docker (second choice), you need to:\n\nInstall it – usually this will mean opening the image and either dragging it your Application folder (Mac) or running the installer (Windows)\nStart it up – double-click the Podman/Docker icon in your Applications folder to start the application running.\nFinish setup – you may see a login screen like the one below, but you do not need to create an account (notice Continue without signing in)\nOn all the subsequent questions you can Skip (upper-right corner) answering as well.\n\n\n\n\nDocker trying to trick you into creating an account\n\n\nYou must finish setting up before proceeding to the next step. You’ll know that you’re ready to move on when you see either the ‘Podman Desktop’ or ‘Docker Desktop’ window appear listing ‘downloaded images’ and ‘running containers’:\n\n\n\nDocker Desktop\n\n\nIf you didn’t see this then you will need to have a look at the ‘dealing with errors’ section.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/env.html#testing",
    "href": "setup/env.html#testing",
    "title": "Installation",
    "section": "Testing",
    "text": "Testing\nTo test if the application (Docker or Podman) is installed correctly, you will need either the Terminal (macOS) or the Power Shell (Windows).\n\n\n\n\n\n\nCopy Code to Clipboard\n\n\n\nWhenever you see a ‘code block’ below, you will also see a ‘clipboard’ icon () in the right. Click that, and the code will be copied to your computer’s ‘clipboard’ so that you can then paste it into the Terminal or Power Shell. That will save you a lot of time and effort.\n\n\nDocker has provided a simple way to test if your installation is working correctly. You can run the following command in the Terminal or Power Shell:\ndocker run hello-world\nThis should output something like:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n478afc919002: Pull complete\nDigest: sha256:91fb4b041da273d5a3273b6d587d62d518300a6ad268b28628f74997b93171b2\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (arm64v8)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\nIf you see this message, then Docker is installed correctly and you can move on to the next step. If you see an error message, then you will need to have a look at the ‘dealing with errors’ section. Notice how there are several things happening:\n\nUnable to find image... locally – this is because the hello-world image is not (yet) stored on your computer.\nlatest: Pulling from library/hello-world – this is Docker downloading the hello-world image from the internet.\nPull complete – this is Docker telling you that it has finished downloading the image.\nHello from Docker! – this is the hello-world image running and telling you that Docker is working correctly.\n\nThere’s obviously a lot more to that message, but that’s the basic idea.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/env.html#running",
    "href": "setup/env.html#running",
    "title": "Installation",
    "section": "Running",
    "text": "Running\nWe now need to download and run the sparc image that we created for the workshop. The image is the ‘template’ for running containers (i.e. virtual computers) on our ‘host’ computer and it comes complete with all of the Python libraries and other tools that you’ll need to complete the module (and a good deal more besides!). Installing the image will take a while as it’s quite large (1-5GB) and so will depend on the speed of your internet connection.\nYou can use a single command to download and start the sparc container by copying the following command into the Terminal or Power Shell (this does not work in the Command Prompt/cmd):\n\nFor Intel MacsFor M-Chip MacsFor Windows\n\n\ndocker run --rm -d --name sparc -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sparc:2025-intel start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sparc -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sparc:2025-silicon start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sparc -p 8888:8888 -v \"$(pwd):/home/jovyan/work\" jreades/sparc:2025-intel start.sh jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/env.html#if-things-go-wrong",
    "href": "setup/env.html#if-things-go-wrong",
    "title": "Installation",
    "section": "If Things Go Wrong",
    "text": "If Things Go Wrong\nIf you encounter any problems with the installation, please have a look at the Dealing with Problems page.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/env.html#success",
    "href": "setup/env.html#success",
    "title": "Installation",
    "section": "Success!",
    "text": "Success!\nHowever, most of you should now be able to connect to the virtual machine by pointing your browser at: localhost:8888 where you should see something like this:\n\n\n\nJupyter Lab Success",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/env.html#footnotes",
    "href": "setup/env.html#footnotes",
    "title": "Installation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAnd Docker, which is basically the same thing.↩︎",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "setup/base.html",
    "href": "setup/base.html",
    "title": "Updates",
    "section": "",
    "text": "In order to get the machine ready to do virtualisation you need to install a few updates to the Operating System as well as some tools that help to interact with the programming platform. Things are a lot more complicated for Windows users here than for Mac (or Linux) users.",
    "crumbs": [
      "Updates"
    ]
  },
  {
    "objectID": "setup/base.html#system-updates",
    "href": "setup/base.html#system-updates",
    "title": "Updates",
    "section": "System Updates",
    "text": "System Updates\nBefore going any further, please ensure that your computer is fully up-to-date with all Operating System and application updates before following any of the other steps in this brief guide to getting started.",
    "crumbs": [
      "Updates"
    ]
  },
  {
    "objectID": "setup/base.html#base-utilities",
    "href": "setup/base.html#base-utilities",
    "title": "Updates",
    "section": "Base Utilities",
    "text": "Base Utilities\nIn order to access the majority of the features that this module uses, you will need to install several ‘base’ utilities:\n\nMacOSWindows\n\n\nYou need the Xcode Command Line Tools installed on your Mac. In some cases this may have already been installed, but it’s the same process to check as to install:\n\nOpen the Terminal application (which can be found under Utilities in your Applications folder).\nType the following: xcode-select --install and then hit Enter (⏎)\n\nUnless you get an outright error you can proceed to the next step:\n\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal.\n\n\n\nYou will need to install WSL2 but, strangely, you do not actually need to install a full Linux O/S, so as far as we can tell this means you only need to run the following commands in the Windows PowerShell:\n\nwsl --install should quickly install the subsystem that we need.\nwsl --update will ensure that the most up-to-date version is available.\n\nThat should be it: Podman and Docker should now run without complaint.\n\n\n\n\n\n\nIf You Need More Help\n\n\n\n\nThere is good guidance from Microsoft for Windows 11 and more recent ‘builds’ of Windows 10.\nThere are also older instructions for Windows 10.\n\nCommon installation errors are covered here.\nFinally, if you are still being told that you can’t install WSL2 and Linux, then the most likely cause of this issue is a setting in the BIOS of the computer itself. There are a couple of settings that need changing at a very low level to enable Hyper-V virtualisation. I would start by following this MS guide and, if there is still a problem, check this blog post.",
    "crumbs": [
      "Updates"
    ]
  },
  {
    "objectID": "setup/base.html#windows-only",
    "href": "setup/base.html#windows-only",
    "title": "Updates",
    "section": "Windows Only",
    "text": "Windows Only\n\n\n\n\n\n\nCreating a Linux User\n\n\n\nIf you want to install a full Linux distribution (e.g. because you want to do more than just run Docker) then make sure you set up a new Linux user and do not end up running everything as root.\n\n\nTo make full use of WSL2 and Linux (if you want to do more than just use Docker) you will need to familiarise yourself with how having two operating systems that can talk to each other works. That is covered in the next section. This will actually be useful for understanding how Docker works, as it can be profoundly confusing.\nThe behaviour of the ‘shell’ (command line) is quite confusing because, with WSL2, you effectively end up with two ‘home’ directories: one for your Windows user, and one for your new Ubuntu user. Starting a Linux shell/command line puts you in your Linux home directory (the username may be completely different from your Windows username). Starting a Windows shell/command line puts you in your Windows home directory (again, the username may be completely different from your Linux username).\nSo the first, and perhaps most important, thing is understanding where ‘data’ is being stored:\n\nUnder Linux the user directory is apparently something like: \\\\wsl$\\&lt;DistroName&gt;\\home\\&lt;UserName&gt;\\ but you can usually get it by simply typing cd $HOME and then pwd when starting a new Linux shell.\nUnder Windows the user directory is: C:\\Users\\&lt;UserName&gt;\\ or /mnt/c/Users/&lt;UserName&gt;/, and you can often simply type pwd when opening a new Windows shell.\n\nSo these are different locations on your computer’s hard drive, and you will not see your Linux files in your Windows Home Directory and vice versa. To make it easy to switch between the two, I found this page on Microsoft’s web site that goes through some of the post-WSL2 installation steps, but see especially the additional page on Windows Terminal configuration.\nSlightly confusingly, you can run Linux commands directly from Windows, usually be adding wsl in front of the Linux command (e.g. wsl ls *.csv from Windows, where in Linux the command would be ls *.csv).\nTo make it easy to move from the Linux side of your machine to the Windows machine you can also do this:\n\nWork out where your CASA files are stored on the Windows side (see above: /mnt/c/Users/&lt;UserName&gt;/My\\ Documents/CASA/... where &lt;UserName&gt; is your Windows user name).\ncd to this location and type pwd to output the full path to the CASA directory.\nCopy this.\nNow start a Linux shell and run the following command once (you do not need to do it ever again): echo \"export WIN_HOME=\\\"/mnt/c/Users/.../CASA/\\\"\" &gt;&gt; $HOME/.bashrc. Replace the ... with the rest of the actual path! The \\\" is very important, don’t try to change those!\nNow run source .bashrc and you should see no errors.\n\nOnce you have done this you will have added a single line to your .bashrc file in Linux. This will create a ‘shortcut’ for bash in Linux. From here on out you should be able to type cd $WIN_HOME and move immediately over to the CASA directory on the Windows side. This will save having to remember (and type) the Windows path each time.",
    "crumbs": [
      "Updates"
    ]
  },
  {
    "objectID": "sessions/day3.html",
    "href": "sessions/day3.html",
    "title": "Day 3: Reproducible Analysis",
    "section": "",
    "text": "Goal\n\n\n\nHow tools like Quarto and Python can make report-writing ‘easy’.\n\n\nIntroductory session:\n\nWhat is reproducible analysis and why care about it?\nA brief introduction to version control and github.io (Git / GitHub)\nAn introduction to Quarto\n\nApplied session:\n\nCreating a report in Quarto:",
    "crumbs": [
      "Day 3: Reproducible Analysis"
    ]
  },
  {
    "objectID": "sessions/day1.html",
    "href": "sessions/day1.html",
    "title": "Day 1: Getting Started",
    "section": "",
    "text": "Goal\n\n\n\nA basic understanding of core concepts in reproducible analysis and the advantages of moving to open data and open source code.\n\n\nIntroductory session:\n\nFormat for the week\n\nPoll: how many people have used GIS? If so, which one?\nPoll: how many people have learned a programming language? If so, which one?\n\nWhy use (open source) code?\nWhy use (open) data?\nWhy use virtualisation?\nWhy care about reproducibility?\nWhy share your code?\nWhy share your data?\n\nApplied session:\n\nSetting up Podman\nRunning Podman\nRunning a Python Notebook",
    "crumbs": [
      "Day 1: Getting Started"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Over the course of the week we will be exploring a little bit of what is possible using code (Python, in this case) to process and analyse spatial data. Along the way we’ll touch both on the practical benefits of coding (instead of using only point-and-click software like ArcGIS or QGIS) as well as the more subtle philosophical advantages of using open source software and code.\nEach day we will have about 90 minutes of lecture and discussion, then a short break, and then about 90 minutes of an ‘applied’ workshop using the techniques and principles discussed earlier. Because we only have a week, we will be focussing on understanding the why we do something in a particular way, and a general understanding of what is happening, rather than digging into how to code.\nThese days, AI can help you a lot with the basics of coding, but it is important to recognise that AI is only as good as the problems it was trained on, and you’ll likely find that it knows a lot less about Indian geo-data than it does British or American data. Treat the AI as a personal tutor that is endlessly patient and can offer you 1:1 time, but it cannot answer questions of ethics or purpose.\nNow,in order to get you started on your spatial and data science ‘journey’, you will need to follow the guidance provided on the pages we’ve linked to below to check that you’re able to run the programming environment and get everything (or as much as you can!) set up and ready to go on Day 1.."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Welcome",
    "section": "Requirements",
    "text": "Requirements\nBefore trying to install the software, please complete the basic health check to ensure that your computer is up-to-date and able to run the software we use."
  },
  {
    "objectID": "index.html#updates",
    "href": "index.html#updates",
    "title": "Welcome",
    "section": "Updates",
    "text": "Updates\nOnce you know that your machine and operating system are up-to-date, you should install the basic utilities that will enable you to complete installation of the programming environment."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Welcome",
    "section": "Installation",
    "text": "Installation\nThe Installation Guide section will help you to get your computer ready for the workshop sessions."
  },
  {
    "objectID": "index.html#sessions",
    "href": "index.html#sessions",
    "title": "Welcome",
    "section": "Sessions",
    "text": "Sessions\nThere are four sessions planned for the week (see Sessions drop-down menu!). The sessions will make use of the tools installed above, so please try to install Podman on your laptop before the start of the first session as this will save quite a bit of time and also allow us to help you more quickly if there are any issues."
  },
  {
    "objectID": "index.html#citing",
    "href": "index.html#citing",
    "title": "Welcome",
    "section": "Citing",
    "text": "Citing\n@software{jaipur:2025,\n  author = {Reades, Jon},\n  title = {\\texttt{jaipur_env}: A containerised platform for Urban Spatial Science},\n  url = {https://github.com/jreades/jaipur/},\n  version = {2025},\n  date = {2025-08-11},\n}"
  },
  {
    "objectID": "sessions/day2.html",
    "href": "sessions/day2.html",
    "title": "Day 2: Exploring Code",
    "section": "",
    "text": "Goal\n\n\n\nDiscussion of data issues in planning and where code can help (or hinder) our work.\n\n\nIntroductory session:\n\nThink data\nSources of data\nReading data\nCode vs. GIS\n\nApplied session:\n\nLinking data\nData tables\nData maps\nSimple analysis",
    "crumbs": [
      "Day 2: Exploring Code"
    ]
  },
  {
    "objectID": "sessions/day4.html",
    "href": "sessions/day4.html",
    "title": "Day 4: Reinforcement",
    "section": "",
    "text": "Goal\n\n\n\nTo get you using the tools and seeing the advantages by working in small groups on a report that uses the data already loaded plus (if available) data provided either online or via download.\n\n\nApplied session:\n\nApplying what has been learned over the preceding days.\nAdding new data to your map\nWorking on a report — choosing a topic of interest (continuation of Day 3)",
    "crumbs": [
      "Day 4: Reinforcement"
    ]
  },
  {
    "objectID": "setup/code_camp.html",
    "href": "setup/code_camp.html",
    "title": "Code Camp",
    "section": "",
    "text": "Code Camp provides a gentle introduction to the basics of programming in Python. Across about twelve sessions you will learn about syntax, variables, ‘simple’ data structures such as lists and dictionaries, and about the fundamentals of writing functions for reusable code. The sessions are entirely self-led: you should follow along at your own pace and remember that ‘it’s a marathon, not a sprint’.\nWe’ve tried to keep Code Camp as simple as possible so that you can get started as quickly as possible. We recommend that you simply run Code Camp in your browser since that will allow you to learn (and run) Python anywhere and any time. However, you are welcome to run Code Camp code on your own computer (see: install options).",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "setup/code_camp.html#tldr",
    "href": "setup/code_camp.html#tldr",
    "title": "Code Camp",
    "section": "TL;DR",
    "text": "TL;DR\nJust point your browser to Lesson 1 and get started because there’s nothing to install.",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "setup/git.html",
    "href": "setup/git.html",
    "title": "Git & GitHub",
    "section": "",
    "text": "Git is a ‘version control system’, which is a fancy way of saying that it has the potential to store a complete, line-by-line history of your work… so long as it’s in a plain-text format like Markdown or Python/R code files. Git updates all of this history on your computer every time you ‘commit’ the changes you’ve told it about by ‘adding’ a file. With GitHub you can then synchronise these changes so that you have a full backup (code and content are no longer just on your computer), publish a web site (via github.io), or collaborate with other people (via public, shared ‘repositories’).\nWhile it is not necessary that you learn all about how GitHub works now, it will be really helpful if you can get yourself set up with a GitHub account and install Git locally so that you’re ready to get when we start the term."
  },
  {
    "objectID": "setup/git.html#get-a-github-account",
    "href": "setup/git.html#get-a-github-account",
    "title": "Git & GitHub",
    "section": "Get a GitHub Account",
    "text": "Get a GitHub Account\nYou will need to go to GitHub.com and then click the Sign up button at the top right. Follow the instructions for creating a new account from there.\n\n\n\n\n\n\nUse Your Personal Account\n\n\n\nAlthough you can always change it later (so if you’ve opened your GitHub account using your UCL email don’t panic!), you may find it easier to:\n\nOpen a GitHub account using a personal email address to which you expect to always have access.\nThen associate your UCL email address to this GitHub account so that you gain from any educational benefits offered by GitHub (there are some around private respositories and so on)."
  },
  {
    "objectID": "setup/git.html#install-git-locally",
    "href": "setup/git.html#install-git-locally",
    "title": "Git & GitHub",
    "section": "Install Git Locally",
    "text": "Install Git Locally\nYou can follow along with GitHub’s own instructions for installing Git on your own computer. In many cases (especially if you use a Mac) you may find that Git is already installed, you just didn’t know it."
  },
  {
    "objectID": "setup/markdown.html",
    "href": "setup/markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown is a ‘markup language’ for documents that is compatible with a lot of different tools (including GitHub and Jupyter) that we use day-in and day-out for doing our research and teaching. Many of us have now largely stopped using Word (and even LaTeX) except for the final polishing of a document. Why? Because Markdown is faster, simpler, and just gets out of the way when we’re writing. So rather than fiddling about with Word’s styles (or, worse, discovering that you should have been using styles all along) or with LaTeX’s painful table layout, you can just get on with writing in Markdown and then export to Word or LaTeX for the final steps. Best of both worlds!\nIn fact, Markdown is so handy that it’s become the default for writing content for the web. This web site was actually written in Markdown and then ‘rendered’ (i.e. turned into a functional web page) using Quarto. We’ve included Quarto on the SDS2022 Docker image that we’ve recommended you use."
  },
  {
    "objectID": "setup/markdown.html#markdown-editors",
    "href": "setup/markdown.html#markdown-editors",
    "title": "Markdown",
    "section": "Markdown Editors",
    "text": "Markdown Editors\nOver time you will undoubtedly learn how to write markdwon without need to think much (if at all) about how to type the formatting ‘codes’, but a simple markdown editor can make your life much, much easier. Even when you’re highly experienced!\n\nFor MacOSFor WindowsFor Linux\n\n\nThere’s a good overview of ‘free’1 editors for the Mac which highlights a few in particular:\n\nMacDown – I’ve not used this, but it seems determinedly FOSS so is probably a good choice.\nHaroopad – this looks like a more powerful, but less immediatley user-friendly editor.\nAtom – I’ve used Atom for editing Python code but believe it’s largely plugin-based so it clearly supports markdown too.\n\nTypora was free while in beta, but I thought it was worth the modest amount of money asked for something that was super-fast and gave me a tool with which to write up my research, not just my code and teaching content. iA Writer is another good (paid for) option because it runs on iPad and iPhone as well! Together with the Working Copy Git client for iOS I’ve used iA Writer to draft articles, make notes directly in my codebase, and correct errors found at the last minute in my teaching materials. Like Typora, iA Writer is probably intended more for writing text, not writing complex Reveal.js presentations or non-standard markdown.\n\n\nI don’t have access to a Windows machine to test this out, but there are plenty of opinions to be found by Googling ‘best Windows Markdown editors’ or ‘best free Windows Markdown editors’. There’s one for writers and a more generic set of recommendations. Have a look around and see what you like!\n\n\nIf you use Linux already do you really need a recommendation? How about vim or vi?"
  },
  {
    "objectID": "setup/markdown.html#using-markdown",
    "href": "setup/markdown.html#using-markdown",
    "title": "Markdown",
    "section": "Using Markdown",
    "text": "Using Markdown\nFor Markdown to be useful as more than just a lightweight way to write notes, we want to be able to render it into new output formats/contexts. Here are three…"
  },
  {
    "objectID": "setup/markdown.html#markdown-github",
    "href": "setup/markdown.html#markdown-github",
    "title": "Markdown",
    "section": "Markdown & GitHub",
    "text": "Markdown & GitHub\nMarkdown is the ‘default’ language of GitHub, which means it’s worth your while to familiarise yourself with how it works. However, there are different ‘flavours’ of markdown, which also means that just because something works on GitHub it will work everywhere else in the same way. This is particularly common when dealing with optional parameters that try to give the ‘renderer’ (the thing that converts markdown to HTML, or LaTeX, or any other format) hints about how the content should look."
  },
  {
    "objectID": "setup/markdown.html#markdown-notebooks",
    "href": "setup/markdown.html#markdown-notebooks",
    "title": "Markdown",
    "section": "Markdown & Notebooks",
    "text": "Markdown & Notebooks\nMarkdown is also the language of plain-text cells in Jupyter notebooks, which makes it doubly worth your while to familiarise yourself with how it works."
  },
  {
    "objectID": "setup/markdown.html#quarto",
    "href": "setup/markdown.html#quarto",
    "title": "Markdown",
    "section": "Quarto",
    "text": "Quarto\nQuarto builds on RMarkdown to make the power of Markdown+Code available to other languages than R. In our Foundations of Spatial Data Science module we use Quarto to do submissions but that’s largely because it demonstrates how we can Quarto to write whole articles or dissertation!\nIn many cases, it is as straightforward as installing Quarto and then running quarto render ..., but there are some tricks. In particular, to ‘render’ Markdown files to PDF, you will need to have some flabour to TeX installed. The default suggested by Quarto is TinyTex, and this can be installed using:\nquarto install tool tinytex\nBut on some platforms there are additional issues:\n\nMacWindows\n\n\nYou will probably be able to successfully install tinytex, but then be told that no TeX installation could be found when trying to render. The issue relates to the $PATH where Quarto searches for a valid TeX installation and when completing the installation you may have seen a warning to the effect of “To complete the installation, please run the following…”\nSo that’s basically what we need to do. The first thing you need to do is find the TinyTeX binaries, in the cases that I’ve been able to fix these were found under something like $HOME/Library/TinyTex/bin/, but you may need to look further under $HOME/Library/ to find the TinyTex directory.\nOnce you know where TinyTeX is (adjust the cd command below as necessary), you can then follow the suggestion given:\ncd $HOME/Library/TinyTeX/bin/\n./universal-darwin/tlmgr option sys_bin $HOME/Library/TinyTeX/bin\n./universal-darwin/tlmgr path add\nThat should do it, but in case you are still getting errors, then the following might be necessary (again, adjust the path if necessary):\necho \"export PATH=\\\"/Users/$(whoami)/Library/TinyTeX/bin:\\$PATH\\\"\" &gt;&gt; $HOME/.zshrc\nThe command above uses whoami to set the username and assumes that’s how things should be set up, but don’t blindly copy+paste and assume this will work! You could, for instance, check this location exists first using: ls /Users/$(whoami)/Library/TinyTeX/bin/ That will show if the path exists! The above command then updates the $PATH variable used by your Terminal to look for binaries, enabling Quarto to find TinyTeX once you close and then re-open a new Shell.\n\n\nMost commands seem to require replacing quarto with quarto.exe to run correctly. So quarto render Template.qmd becaomes quarto.exe render Template.qmd.\nHowever, if you are still getting errors to the effect that Quarto cannot be found then you may need to make additional edites to your .bashrc file (this is the configuration file for bash):\n\nCheck where Quarto is installed, it is most likely under /mnt/c/Users/&lt;Your Username&gt;/AppData/Local/Programs/Quarto/bin (replace &lt;Your Username&gt; as appropriate.\nEdit the .bashrc file in your $HOME directory. On Windows I would Google search for the best way to do this: “edit .bashrc file Windows”.\nAdd the following line at the end of the file: export PATH=/mnt/c/Users/&lt;Your Username&gt;/AppData/Local/Programs/Quarto/bin:$PATH\nSave the file and run source .bashrc in the Terminal.\nYou should now be able to run the following command successfully: quarto.exe --help"
  },
  {
    "objectID": "setup/markdown.html#footnotes",
    "href": "setup/markdown.html#footnotes",
    "title": "Markdown",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNot all of these are still free.↩︎"
  },
  {
    "objectID": "setup/problems.html",
    "href": "setup/problems.html",
    "title": "Dealing with Problems",
    "section": "",
    "text": "There are two types of problems that you’re likely to encounter when trying to use Podman or Docker:\nThe vast majority of people encountering these issues will be on Windows machines."
  },
  {
    "objectID": "setup/problems.html#errors-installing",
    "href": "setup/problems.html#errors-installing",
    "title": "Dealing with Problems",
    "section": "Errors Installing",
    "text": "Errors Installing\n\nUnsupported Version\nThe only problem that is common to both Windows and macOS machines is the ‘unsupported version’ (or similar wording) error. This happens when you are running an older version of the Operating System that is no longer supported by the most recent installer.\nIf you are not able to update your computer’s operating system to a more recent release, then your only option is to use an older version of the application. You can find older versions of [Podman]() and Docker to install, though for very old machines this may still not resolve the ‘unsupported version’ problem.\n\n\nProblems with WSL2\nOn Windows, if you have problems that mention WSL/WSL2 (this could be errors installing or updating this system) and you are sure that you’ve installed and updated WSL, then you may need to try using ‘Hyper-V’ instead. This is a ‘second-best’ workaround that has worked for some people.\n\nEnabling Hyper-V\nMicrosoft has instructions here on how to enable Hyper-V on your Windows machine. You will need to restart your computer after enabling Hyper-V. These instructions may also help.\nYou will then need to look at the Podman or Docker settings and change the Use the WSL2 based engine to Use the Hyper-V based engine.\n\n\n\nProblems with Admin Rights\nIssues with administrator rights are the main reason that we are trying to swich from Docker to Podman. Podman does not require you to be an administrator of your machine. So if you are unable to install Docker on your computer (e.g. because you are using a secure corporate laptop), you may wish to try using Podman instead. Podman is runs in ‘user space’, which means that it does not need admin rights to run. You can find out more about Podman here. Our limited testing suggests that it works well with the sparc environment.\nYou will need to:\n\nDownload and install the Podman CLI and Desktop from here.\nRun the following command in the PowerShell or Terminal: podman machine initpodman machine start\nAnd then run this command in PowerShell or Terminal to download the sparc image with podman pull jreades/sparc:2025-intel (or jreades/sparc:2025-silicon for M-chip Macs)"
  },
  {
    "objectID": "setup/problems.html#errors-running",
    "href": "setup/problems.html#errors-running",
    "title": "Dealing with Problems",
    "section": "Errors Running",
    "text": "Errors Running\nIf you have managed to install Docker (or Podman) and have managed to ‘pull’ a disk image then the last remaining obstacle to running Podman or Docker is, typically, running out of disk space.\n\nDealing with Disk Space\nSome Windows PCs (especially those sold with Windows10) have two drives (C and D). The C drive may fill up very quickly once you start installing and running software or processing data. In that case you may want to store your images on the D drive.\nThis is a complex process, and you may need assistance, so there is a Moving to the D Drive page to try to talk you through the process.\n\n\nOther Disk Space Issues\nIf you don’t have separate C and D drives but still have very little space left on your hard drive then it’s worth remembering that all of the images you’ve used and containers that you have run are saved on your computer. You can see how much space Docker (there’s a similar command for Podman) is using by running the following command in the PowerShell or Terminal:\ndocker system df\n\nDeleting an Image\nThe most ‘intuitive’ way is to delete each image by it’s unique ID:\ndocker ps -aq # Get list of running processes and work out container IDs to remove\ndocker rm -f &lt;list of container IDs&gt;\ndocker images # Get list of available images and work out image IDs to remove\ndocker rmi -f &lt;list of image IDs&gt;\n\n\nDeleting by Filter\nA more ‘direct’ approach that should be used with some care is to looking for the name of the image and delete that way:\ndocker ps -aqf \"name=sds\" --format=\"{{.Image}} {{.Names}} {{.ID}}\" | grep \"2025\" | cut -d' ' -f3 | xargs docker rm -f\ndocker images --format=\"{{.Repository}} {{.Tag}} {{.ID}}\" | grep \"sds\" | cut -d' ' -f3 | xargs docker rmi"
  },
  {
    "objectID": "setup/problems.html#the-last-resort",
    "href": "setup/problems.html#the-last-resort",
    "title": "Dealing with Problems",
    "section": "The Last Resort",
    "text": "The Last Resort\nA very small number of students are unable to run Docker or Podman at all on computers running Windows 10 Home (in 23/24 there were none), in which case Anaconda Python can be used with a configuration based on the Podman build file. We don’t recommend this as Podman and Docker isolate the programming environment from your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every Python library as the rest of the class (and the versions for which the practicals are tested).\nAnaconda is only supported as a last resort.\nHowever you are always free to install Anaconda Python and to use our YAML configuration script to install the sparc environment, but you should do this in your own time: in previous years students have encountered difficult-to-diagnose bugs in their code (and lost marks in the Assessments!) because they had installed an older or more recent version of a Python library than the one configured and tested in the sparc environment.\nWe believe that the replication advantages of virtualisation outweigh the disbenefits in terms of performance. It also means that you will spend less time installing libraries and more time running code, which is where your attention should really be when you are familiarising yourself with the foundations of data science.\nEventually you will, of course, want to install and manage your own programming environment (possibly even by building and sharing Podman/Docker images!) but this can be left for later when you have developed an appreciation of how and when virtualisation is (or is not) an appropriate solution to your needs."
  }
]